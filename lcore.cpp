#include "lcore.h"
#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

static QString strResponseData = "";

LCore::LCore():sharedMemory("MemoryImage")
{
    thlpinfo = NULL;
    LE_Password = NULL;
    passwordDialog = NULL;

    strConnectionLaunchPath = getHomeUserPath();
    bEnableImprivataLogs = false;
    QStringList strLogStatus = readDefaultsValue("EnableImprivataLogs");
    if(!strLogStatus.isEmpty() && strLogStatus.at(0).toInt())
    {
        bEnableImprivataLogs = true;
    }
}
typedef struct _sig_ucontext
{
//    unsigned long     uc_flags;
//    struct ucontext   *uc_link;
    stack_t           uc_stack;
    struct sigcontext uc_mcontext;
    sigset_t          uc_sigmask;
} sig_ucontext_t;

void crit_err_hdlr(int sig_num, siginfo_t * pi, void * ucontext)
{
    /*The symbols are taken from the dynamic symbol table; you need the -rdynamic option to g++,
    which makes it pass a flag to the linker which ensures that all symbols are placed in the table.
    write  QMAKE_LFLAGS = -rdynamic in qt qmake.conf file*/
    // QMAKE_CFLAGS = -g to genrate line number

    if(sig_num == SIGSEGV)
    {
        void *             array[50];
        void *             caller_address;
        char **            messages;
        int                size, i;
        sig_ucontext_t *   uc;
        const siginfo_t * info = pi;

        uc = reinterpret_cast<sig_ucontext_t*>(ucontext);

        /* Get the address at the time the signal was raised */
        caller_address = reinterpret_cast<void*>(uc->uc_mcontext.rip); // RIP: x86_64 specific
        QString str_datetime = QDateTime::currentDateTime().toString("MMM dd hh:mm:ss yyyy");
        QByteArray ba = str_datetime.toLocal8Bit();
        const char *c_str2 = ba.data();

        FILE *fp;
        fp = fopen(DBGFILENAME, "a");
        fprintf(fp, "signal %d %s (%s), address is %p from %p\n", sig_num, c_str2, strsignal(sig_num), info->si_addr, reinterpret_cast<void*>(caller_address));

        size = backtrace(array, 50);

        /* overwrite sigaction with caller's address */
        array[1] = caller_address;

        messages = backtrace_symbols(array, size);

        size_t funcnamesize = 256;
        char* funcname = static_cast<char*>(malloc(funcnamesize));

        // /* skip first stack frame (points here) */
        for (i = 1; i < size && messages != NULL; ++i)
        {
            QString MsgCheck = messages[i];
            if(!MsgCheck.isEmpty() && (MsgCheck.contains("libQt") || MsgCheck.contains("QMetaObject") || MsgCheck.contains("/usr/lib")))
            {
                continue;
            }

            char *begin_name = 0, *begin_offset = 0, *end_offset = 0;

            // find parentheses and +address offset surrounding the mangled name:
            // ./module(function+0x15c) [0x8048a6d]
            for (char *p = messages[i]; *p; ++p)
            {
                if (*p == '(')
                {
                    begin_name = p;
                }
                else if (*p == '+')
                {
                    begin_offset = p;
                }
                else if (*p == ')' && begin_offset)
                {
                    end_offset = p;
                    break;
                }
            }

            if (begin_name && begin_offset && end_offset && begin_name < begin_offset)
            {
                *begin_name++ = '\0';
                *begin_offset++ = '\0';
                *end_offset = '\0';

                int status;
                char* ret = abi::__cxa_demangle(begin_name,funcname, &funcnamesize, &status);
                Q_UNUSED(ret);
                if (status == 0) //This prints all function name which is called before crashing from executable
                {
                    funcname = ret; // use possibly realloc()-ed string
                    fprintf(fp, " %s : %s+%s\n", messages[i], funcname, begin_offset);
                }
            }


            size_t p1 = 0;
            while(messages[i][p1] != '(' && messages[i][p1] != ' ' && messages[i][p1] != 0)
            {
                ++p1;
            }

            char syscom[256];
            sprintf(syscom, "addr2line -p %p -e %.*s -f -C", array[i], p1, messages[i]);

            FILE *fp1;
            char cPath[300];
            fp1 = popen(syscom, "r");

            if(fp1 == NULL)
            {
                printf("Failed to run command\n" );
            }
            else
            {
                while(!feof(fp1))
                {
                    if(fgets(cPath, sizeof(cPath)-1, fp1) != NULL)
                    {
                        QString strLine = cPath;
                        if(!strLine.isEmpty() && (!strLine.contains("libQt") && (!strLine.contains("/usr/lib/")) && !strLine.contains("QMetaObject")) && !strLine.contains("moc"))
                        {
                            fprintf(fp, "(%s) : %s : %s", strsignal(sig_num), messages[i], cPath);
                        }
                    }
                }
                pclose(fp1);
            }
        }

        pclose(fp);
        free(messages);
        exit(EXIT_FAILURE);
    }
}

// cppcheck-suppress unusedFunction
int LCore::CheckRAMSizeAvailable()
{
    qDebug() << "LCore:CheckRAMSizeAvailable::3:: Start.";

    char line[30];
    memset(line, 0, sizeof(line));
    FILE *fp = popen("fdisk -l | grep Disk | grep dev | cut -d',' -f2 | cut -f2 -d' '", "r");
    fgets(line, sizeof(line), fp);
    line[strlen(line)-1] = '\0';
    pclose(fp);

    int domsize = atoi(line) / 1024;

    memset(line, 0, sizeof(line));
    //fp = popen("cat /proc/meminfo  | grep MemTotal: | cut -d':' -f2 | cut -d' ' -f10", "r");
    fp = popen("cat /proc/meminfo  | grep MemTotal: | cut -d':' -f2 | awk '{ print $1 }'", "r");
    fgets(line, sizeof(line), fp);
    line[strlen(line)-1] = '\0';
    pclose(fp);

    int ramsize = atoi(line);
    printf("line : %s\ndomsize : %d\nramsize : %d\n", line, domsize, ramsize);

    if( ramsize <= domsize + 5120)
    {
        //fl_alert("RAM size should be greater than DOM/Flash size");
        qDebug() << "configuration:CheckRAMSizeAvailable::3:: return 0.";
        return 0;
    }
    qDebug() << "LCore:CheckRAMSizeAvailable::3:: return 1.";
    return 1;
}

// cppcheck-suppress unusedFunction
void LCore::sendMessageToCloseButton(QByteArray strMessage)
{
    qDebug()<<"LCore:sendMessageToCloseButton::3::Start << "<<strMessage;

    QLocalSocket *localSocket = new QLocalSocket;
    int nRetry = 0;
    QString strSocketFile = QString(FLOATINGCLOSEBUTTON);

    localSocket->connectToServer(strSocketFile);

    while(!localSocket->waitForConnected())
    {
        if(nRetry > 10)
        {
            break;
        }

        qDebug() << "Connecting to server";
        //   usleep(400);
        nRetry++;
    }

    if(nRetry > 10)
    {
        qDebug() << QString("Failed to connect to the socket");
    }
    else
    {
        QLocalSocket::LocalSocketState socketState = localSocket->state();

        if(socketState == QLocalSocket::ConnectedState)
        {
            qDebug() << QString("Total size sent to client in RESPONSE = %1").arg(QString::number(strMessage.size()));

            localSocket->write(strMessage);
            localSocket->waitForBytesWritten();
            localSocket->flush();
        }
        else
        {
            qDebug() << QString("Failed to write data to the socket");
        }

        localSocket->close();
    }

    localSocket->deleteLater();

    qDebug()<<"LCore:sendMessageToCloseButtone::3::End";
}

// cppcheck-suppress unusedFunction
QString LCore::uptimefn(void)
{
    qDebug() << "LCore:uptimefn::3:: Start.";
    char returnuptime[20];
    memset(returnuptime, 0, sizeof(returnuptime));
    char ch[100];
    int loop=0;
    FILE *fp;

    fp=fopen("/proc/uptime","r");
    if(fp!=NULL)
    {
        int i = 0;
        while((ch[i]=fgetc(fp))!=' ')
        {
            loop=1;
            i++;
        }
    }
    else
    {
        return " ";
    }
    if(loop==1)
    {
        int uptimetmp,uptime,uptimesecond,Day,minute;
        uptimetmp=atoi(ch);
        qDebug() << "LCore:uptimefn::3:: uptimetmp."<< uptimetmp;

        Day = (uptimetmp/60/60/24);
        qDebug() << "LCore:uptimefn::3:: Day."<< Day;

        uptime=(uptimetmp/60/60%24);
        qDebug() << "LCore:uptimefn::3:: uptime."<< uptime;

        minute = (uptimetmp/60%60);
        qDebug() << "LCore:uptimefn::3:: minute."<< minute;

        uptimesecond=(uptimetmp%60);
        qDebug() << "LCore:uptimefn::3:: uptimesecond."<< uptimesecond;

        sprintf(returnuptime,"%2d:%02d:%02d:%02d\n",Day,uptime,minute,uptimesecond);

        fclose(fp);
    }
    qDebug() << "LCore:uptimefn::3:: End.";
    return QString(returnuptime);
}

QString LCore::getCPUname()
{
    qDebug() << "LCore:getCPUname::3:: Start.";
    QString cputype, model;
    QStringList li;
    QProcess *proc = new QProcess();
    proc->start("cat /proc/cpuinfo");

    if(qgetenv("BOARDARCH") == QString("via-arm"))
        model = QString("Processor");
    else
        model = QString("model name");

    proc->waitForFinished(-1);

    while (!proc->atEnd())
    {
        if((cputype=proc->readLine()).contains(model))
        {
            li=cputype.trimmed().split(':');
            cputype = li[1];
            qDebug()<<"cpu name : "<< cputype;
            break;
        }
    }
    delete proc;
    qDebug() << "LCore:getCPUname::3:: return cputype = " << cputype;
    return cputype;
}

QString LCore::getVGAcard()
{
    qDebug() << "configuration:getVGAcard::3:: Start.";
    QString vcard, line;
    QStringList li;
    QProcess *proc = new QProcess();
    proc->start("lspci");
    proc->waitForFinished(-1);
    while (!proc->atEnd())
    {
        if((line=proc->readLine()).contains("VGA"))
        {
            li = line.split(':');
            vcard = li[2];
            qDebug() <<"LCore:getVGAcard::3:: vga card name = "<< vcard.trimmed();
            break;
        }
    }
    delete proc;
    qDebug() << "LCore:getVGAcard::3:: return vcard = " << vcard;
    return vcard;
}

// cppcheck-suppress unusedFunction
QStringList LCore::getVGAcardList()                                                            //--12/7/17 -- Mayur  for getting multiple "VGA" card to proper fallback
{
    qDebug() << "LCore:getVGAcardList::3:: Start.";
    QString line;
    QStringList li, vcard;
    QProcess *proc = new QProcess();
    proc->start("lspci");
    proc->waitForFinished(-1);
    while (!proc->atEnd())
    {
        if((line=proc->readLine()).contains("VGA"))
        {
            li = line.split(':');
            QString vgaCard = li[2];
            vcard << vgaCard;
            qDebug()<<"LCore:getVGAcardList::3:: vga card name = "<< vcard;
        }
    }
    delete proc;
    qDebug() << "LCore:getVGAcardList::3:: return vcard = " << vcard;
    return vcard;
}

// cppcheck-suppress unusedFunction
QString LCore::getEthernetCard()
{
    qDebug() << "LCore:getEthernetCard::3:: Start.";
    QString netCard, line;
    QStringList li;
    QProcess *proc = new QProcess();
    proc->start("lspci");
    proc->waitForFinished(-1);
    while (!proc->atEnd())
    {
        if((line=proc->readLine()).contains("Ethernet"))
        {
            li = line.split(':');
            netCard = li[2];
            qDebug()<<"LCore:getEthernetCard::3:: net card name = "<< netCard.trimmed();
        }
    }
    delete proc;
    qDebug() << "LCore:getEthernetCard::3:: return netCard = " << netCard;
    return netCard;
}

// cppcheck-suppress unusedFunction
QString LCore::getDateTime(int i)  //For date, i=0 ; For time, i=1
{
    qDebug() << "LCore:getDateTime::3:: Start.";
    QString datetime="";
    if(i==0)
        datetime = QDate::currentDate().toString("dd/MM/yy");
    else
        datetime = QTime::currentTime().toString("hh:mm:ss");

    qDebug() << "LCore:getDateTime::3:: date = " << QDate::currentDate().toString("dd/MM/yy");
    qDebug() << "LCore:getDateTime::3:: time = " << QTime::currentTime().toString("hh:mm:ss");
    qDebug() << "LCore:getDateTime::3:: return datetime = " << datetime;
    return datetime;
}

// cppcheck-suppress unusedFunction
QString LCore::getAudioInfo()
{
    qDebug() << "LCore:getAudioInfo::3:: Start.";
    QString audio="";
    QStringList li;
    QProcess *proc = new QProcess();
    proc->start("lspci");
    proc->waitForFinished(-1);
    while (!proc->atEnd())
    {
        QString line;
        if((line=proc->readLine()).contains("Audio"))
        {
            li = line.split(':');
            audio = li[2];
            qDebug()<<"LCore:getAudioInfo::3:: Audio info = "<< audio.trimmed();
        }
    }
    delete proc;
    qDebug() << "LCore:getAudioInfo::3:: return audio = " << audio;
    return audio;
}

// cppcheck-suppress unusedFunction
QString LCore::getHardDiskInfo()
{
    qDebug() << "LCore:getHardDiskInfo::3:: Start.";
    QString hd, line;
    QStringList li;
    QProcess *proc = new QProcess();
    proc->start("lspci");
    proc->waitForFinished(-1);
    while (!proc->atEnd())
    {
        if((line=proc->readLine()).contains("IDE"))
        {
            li = line.split(':');
            hd = li[2];
            qDebug() << "LCore:getHardDiskInfo::3:: hard Disk info = "<< hd.trimmed();
            break;
        }
    }
    if(hd.size()==0)
    {
        proc->start("lspci");
        proc->waitForFinished(-1);
        while (!proc->atEnd())
        {
            if((line=proc->readLine()).contains("SATA"))
            {
                li = line.split(':');
                hd = li[2];
                qDebug() << "LCore:getHardDiskInfo::3:: Hard Disk info = "<< hd.trimmed();
                break;
            }
        }
    }
    delete proc;
    qDebug() << "LCore:getHardDiskInfo::3:: return hd = " << hd;
    return hd;
}

// cppcheck-suppress unusedFunction
QString LCore::getCDdriveInfo()
{
    qDebug() << "LCore:getCDdriveInfo::3:: Start.";
    QString dr, dr1;
    QProcess *proc = new QProcess();
    proc->start("cat /proc/scsi/scsi");
    proc->waitForFinished(-1);

    while (!proc->atEnd())
    {
        if((dr1=proc->readLine()).contains("Vendor"))
        {
            dr = dr1.section(':', 1, 1);
            dr1 = dr.section(' ', 1, 1);
            break;
        }
    }
    delete proc;
    qDebug() << "LCore:getCDdriveInfo::3:: return dr1 = " << dr1;
    return dr1.trimmed();
}

// cppcheck-suppress unusedFunction
QStringList LCore::getDriveInfo()
{
    qDebug() << "LCore:getDriveInfo::3:: Start.";
    QStringList driveList;
    QProcess *proc = new QProcess();
    proc->start("df -h");
    proc->waitForFinished(-1);
    while (!proc->atEnd())
        driveList.append(proc->readLine());
    delete proc;
    qDebug() << "LCore:getDriveInfo::3:: return driveList = " << driveList;
    return driveList;
}

QString LCore::getTotalMem()
{
    qDebug() << "LCore:getTotalMem::3:: Start.";
    QString memTotal, mem;
    QStringList li;
    QRegExp sep("\\s+");
    QProcess *proc = new QProcess();
    proc->start("cat /proc/meminfo | grep \"MemTotal\"");
    proc->waitForFinished(-1);

    while (!proc->atEnd())
    {
        if((memTotal=proc->readLine()).contains("MemTotal"))
        {
            li=memTotal.trimmed().split(':');
            memTotal = li[1];
            qDebug() << "LCore:getTotalMem::3:: Mem Total = "<< memTotal;
            break;
        }
    }
    delete proc;
    mem = memTotal.section(sep, 1, 1);
    qDebug() << "LCore:getTotalMem::3:: return mem = " << mem;
    return mem.trimmed();
}

QString LCore::getFreeMem()
{
    qDebug() << "LCore:getFreeMem::3:: Start.";
    QString memfree, mem;
    QStringList li;
    QRegExp sep("\\s+");
    QProcess *proc = new QProcess();
    proc->start("cat /proc/meminfo | grep \"MemFree\"");
    proc->waitForFinished(-1);

    while (!proc->atEnd())
    {
        if((memfree=proc->readLine()).contains("MemFree"))
        {
            li=memfree.trimmed().split(':');
            memfree = li[1];
            qDebug() << "LCore:getFreeMem::3:: Mem free = "<< memfree;
            break;
        }
    }
    delete proc;
    mem = memfree.section(sep, 1, 1);
    qDebug() << "LCore:getFreeMem::3:: return MEM = " << mem;
    return mem.trimmed();
}

QString LCore::getResolution()
{
    qDebug() << "LCore:getResolution::3:: Start.";
    QString resolution1, res;
    QRegExp sep("\\s+");
    QProcess *proc = new QProcess();
    proc->start("xrandr.orig");
    proc->waitForFinished(-1);

    while (!proc->atEnd())
    {
        if((resolution1=proc->readLine()).contains("*"))
        {
            res = resolution1.section(sep, 1, 1);
            qDebug() << "LCore:getResolution::3:: Resolution : "<< res;
            break;
        }
    }
    delete proc;
    qDebug() << "LCore:getResolution::3:: return res = " << res;
    return res;
}

QStringList LCore::ShortingResolution(QStringList list)
{
    qDebug() << "LCore:ShortingResolution::3:: Start.";
    qDebug() << "LCore:ShortingResolution::3:: args : list = " << list;

    list.sort();
    int i, j;
    for (i = 0; i < list.count()-1; i++)
    {
        for(j = 0; j < list.count()-i-1; j++)
        {
            if(list[j].section("x",0,0).toInt() < list[j+1].section("x",0,0).toInt())
            {
                QString tmp;
                tmp.clear();
                tmp=list[j];
                list[j]=list[j+1];
                list[j+1]=tmp;
            }
            else if(list[j].section("x",0,0).toInt() == list[j+1].section("x",0,0).toInt())
            {
                if(list[j].section("x",1,1).toInt() < list[j+1].section("x",1,1).toInt())
                {
                    QString tmp;
                    tmp.clear();
                    tmp=list[j];
                    list[j]=list[j+1];
                    list[j+1]=tmp;
                }
            }
        }
    }
    qDebug() << "LCore:ShortingResolution::3:: return list = " << list;
    return list;
}

// cppcheck-suppress unusedFunction
QString LCore::getFrequency()
{
    qDebug() << "LCore:getFrequency::3:: Start.";
    QString freq;
    QRegExp sep("\\s+");
    QProcess *proc = new QProcess();
    proc->start("xrandr");
    proc->waitForFinished(-1);

    while (!proc->atEnd())
    {
        if((freq=proc->readLine()).contains("*"))
        {
            QString f = freq.section(sep, 2, 2);
            freq = f.section('.', 0, 0);
            qDebug() << "LCore:getFrequency::3:: Frequency = "<< freq;
            break;
        }
    }
    delete proc;
    qDebug() << "LCore:getFrequency::3:: return freq = " << freq;
    return freq;
}

// cppcheck-suppress unusedFunction
QString LCore::getDriver()
{
    qDebug() << "LCore:getDriver::3:: Start.";

    QString strDriver = QString("vesa");
    QFile xorgFile(QString(XORG_FILE));
    if(xorgFile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&xorgFile);
        while (!in.atEnd())
        {
            QString line = in.readLine();
            if(line.contains(" driver for ") && line.contains(" chipsets: "))
            {
                strDriver = line.section(':', 0, 0).section(' ', -1, -1).toLower();
                break;
            }
        }
        xorgFile.close();
    }

    strDriver = strDriver.simplified().toLower();

    qDebug() << "LCore:getDriver::3:: return strDriver = " << strDriver;
    return strDriver;
}

// cppcheck-suppress unusedFunction
QString LCore::getColorDepth()
{
    qDebug() << "LCore:getColorDepth::3:: Start.";
    QFile file( XORG_FILE );
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return "";

    QTextStream in(&file);
    QString ln1;
    while (!in.atEnd())
    {
        QString ln = in.readLine();
        if(ln.contains("Depth"))
        {
            ln1 = ln.section(':', 1, 1);
            ln  = ln1.section(',', 0, 0);
            ln1 = ln.section(' ', -1, -1);
            qDebug() << "LCore:getColorDepth::3:: Color depth : " << ln1.trimmed();
            break;
        }
    }
    qDebug() << "LCore:getColorDepth::3:: return ln1 = " << ln1;
    return ln1.trimmed();
}

QString LCore::getHostname()
{
    qDebug() << "LCore:getHostname::3:: Start.";

    QStringList list = readTable("SysConf", "Property='Hostname'", "Value");
    if(!list.isEmpty())
    {
        QString strHostname = list.at(0);
        qDebug() << "LCore:getHostname::3:: return strhostname = " << strHostname.left(15);
        return strHostname.left(15);
    }
    else
    {
        qDebug() << "LCore:getHostname::3:: return mac hostname = " << getMac().remove(":");
        return getMac().remove(":");
    }

}

// cppcheck-suppress unusedFunction
QString LCore::getGateway(const QString& Type)
{
    qDebug() << "LCore:getGateway::3:: Start.";
    QStringList list = readTable("NetworkDetails", "NetworkType='"+Type+"'", "Gateway");
    if(!list.isEmpty())
    {
        qDebug() << "LCore:getGateway::3:: return list  = " << list.at(0);
        return list.at(0);
    }
    else
    {
        qDebug() << "LCore:getGateway::3:: return empty ";
        return "";
    }
}

QString LCore::getIPAddress(const QString& Type)
{
    qDebug() << "LCore:getIPAddress::3:: Start.";
    QStringList list = readTable("NetworkDetails", "NetworkType='"+Type+"'", "IP");
    if(!list.isEmpty())
    {
        qDebug() << "LCore:getIPAddress::3:: return list = " << list.at(0);
        return list.at(0);
    }
    else
    {
        qDebug() << "LCore:getIPAddress::3:: return empty string.";
        return "";
    }
}

// cppcheck-suppress unusedFunction
QString LCore::getKbdType()
{
    qDebug() << "LCore:getKbdType::3:: Start.";
    QString kbdtype, line, kbd;
    QFile file("/home/prashant/Xorg.0.log");
    file.open(QIODevice::ReadOnly | QIODevice::Text);
    QTextStream in(&file);
    while (!in.atEnd())
    {
        if((line = in.readLine()).contains("XkbLayout"))
        {
            kbdtype = line.section(":", 2, 2);
            line = kbdtype.section('"', 1, 1);
            kbd = line;
            //qDebug() << "Keyboard Type : " << kbd;
        }
    }
    qDebug() << "LCore:getKbdType::3:: return kbd = " << kbd;
    return kbd;
}

// cppcheck-suppress unusedFunction
QString LCore::getKbd_rate()
{
    qDebug() << "LCore:getKbd_rate::3:: Start.";
    QString kbd_rate, rate;
    QProcess *proc = new QProcess();
    proc->start("kbdrate");
    proc->waitForFinished(-1);
    while (!proc->atEnd())
    {
        if((kbd_rate=proc->readLine()).contains("cps"))
        {
            rate = kbd_rate.section( " ", 4, 4);
            break;
        }
    }
    delete proc;
    qDebug() << "LCore:getKbd_rate::3:: return rate = " << rate;
    return rate;
}

// cppcheck-suppress unusedFunction
QString LCore::getDNS(int opcode)
{
    qDebug() << "LCore:getDNS::3:: Start.";
    QFile file(NET_MAN_FILE);
    QString dns;
    file.open(QIODevice::ReadOnly | QIODevice::Text);
    QTextStream in(&file);
    QString nextLine;
    while (!in.atEnd())
    {
        QString line = in.readLine();
        if(line.contains("nameserver"))
        {
            QString li=line.section(":",-1,-1);
            qDebug() << "LCore:getDNS::3:: PDNS = " << li.section("",-11,-2);
            dns = li.section("",-11,-2);
            nextLine = in.readLine();
            break;
        }
    }
    if( opcode == 1 )
    {
        qDebug() << "LCore:getDNS::3:: SDNS = " << nextLine.section("",-16,-2);
        dns = nextLine.section("",-16,-2);
    }
    qDebug() << "LCore:getDNS::3:: return dns  = " << dns;
    return dns;
}

// cppcheck-suppress unusedFunction
QString LCore::getNetmask()
{
    qDebug() << "LCore:getNetmask::3:: Start.";
    QString net;
    QNetworkInterface *inter=new QNetworkInterface();
    foreach(const QNetworkInterface& iface, inter->allInterfaces())
    {
        if(iface.name().startsWith("eth"))
        {
            net = iface.addressEntries().at(0).netmask().toString();
        }
    }
    qDebug() << "LCore:getNetmask::3:: return net = " <<net;
    return net;
}

QString LCore::getPkgVersion(const QString& pkgName)
{
    qDebug() << "LCore:getPkgVersion::3:: Start.";
    QString componentVersion = "";

    QString cmd = "grep -i \""+pkgName+"\" /pkgs/*";
    FILE* file = popen(cmd.toLatin1(), "r");
    char buffer[100];
    memset(buffer, 0, sizeof(buffer));
    while(fgets(buffer, 100, file))
    {
        buffer[strlen(buffer)-1] = '\0';
        QString strLine = QString::fromStdString(buffer);
        if(strLine.contains(":/pkgs/") || (strLine.startsWith("/pkgs/Image-vff:") && strLine.endsWith(".vff")))
        {
            QString strNext = strLine.section(':', -1, -1);
            if(strNext.contains('_'))
                break;
        }

        memset(buffer, 0, sizeof(buffer));
    }

    pclose(file);

    QString str = QString::fromStdString(buffer);
    if(qApp->argc()>1)  qDebug() << "str : " << str.simplified();
    if(!str.isEmpty())
    {
        componentVersion = str.section(":", 1, 1).section("_", -1);
        componentVersion = componentVersion.remove(".vff");
    }
    qDebug() << "LCore:getPkgVersion::3:: return comonantVersion = " << componentVersion;
    return componentVersion;
}

int LCore::checkLink(QString bin)
{
    QString path;
    QStringList paths;
    path = getenv("PATH");
    paths = path.split(":");

    for(int i=0; i<paths.length(); i++)
    {
        QString filename = paths[i].append("/").append(bin);
        if(QFile::exists(filename))
        {
            return 1;
        }
    }
    return 0;
}

int LCore::isTableExists(const QString& tablename, const QString& primeKeyName)
{
    qDebug() << "LCore:isTableExists::3:: Start.";
    qDebug() << "LCore:isTableExists::3:: args : tablename = " << tablename << " primeKeyNAme = " << primeKeyName;

    int rowscount = 0;

    QSqlQuery query;
    QString qry = QString("SELECT COUNT(*) FROM ") + tablename;
    if(!primeKeyName.isEmpty())
        qry.append(QString(" WHERE ") + primeKeyName);

    if(query.exec(qry))
    {
        if(query.next())
            rowscount = query.value(0).toInt();
    }
    else
    {
        qDebug() << "LCore:isTableExists::3:: Table exites failed because " << query.lastError();
    }

    qDebug() << "LCore:isTableExists::3:: return rowscount = " << rowscount;
    return rowscount;
}

/**********************************************************************************************************************
  writeTable ( < Table Name > , < ColumnType1 DataType1 , ColumnType2 DataType2 ...> , < Value1, Value2 ...> ,
  insert into <TableName> (<ColumnType1>, <ColumnType2>) VALUES (<value1>, <values>);

  Argument4 :
                ""                          =   To edit existing row.
                <PrimaryKeyName = Value>    =   To delete row. eg. Name = "ICA"
                "AppendNew"                 =   To insert new row


***********************************************************************************************************************/

QString LCore::writeTable(const QString& tableName, const QString& columnType, const QString& values, const QString& condition)
{
    qDebug() << "LCore:writeTable::3:: Start.";
    qDebug() << "LCore:writeTable::3:: args : tableName = " << tableName << " cloumnType = " << columnType
             << " values = " << values << "Condition = " << condition;
    QSqlQuery query;
    QString qry = "";

    qry = "CREATE TABLE IF NOT EXISTS " + tableName + "(" + columnType + ")";
    qDebug() << "LCore:writeTable::3:: qry = " << qry;
    if(query.exec(qry))
        qDebug() << "LCore:writeTable::3:: Table created " + tableName;
    else
    {
        qDebug() << "LCore:writeTable::3:: Table Not created because " << query.lastError();
        qDebug() << "LCore:writeTable::3:: Table Not created " << tableName;
        return ("Table Not Created " + tableName);
    }

    QStringList columnList = columnType.split(",");
    QString columns = "";

    for (int i = 0; i < columnList.size(); ++i)
    {
        QString colName = columnList.at(i).trimmed();
        QString propName = colName.section(" ",0,0);
        if(propName.contains("PRIMARY"))
        {
            columns = columns.left(columns.length()-2);
            break;
        }
        else
        {
            columns.append(propName);
            if(i < columnList.size()-1)
                columns.append(", ");
        }
    }
    qDebug() << "LCore:writeTable::3::  columns = " << columns;

    if(condition != "AppendNew")
    {
        {
            qry = "DELETE FROM " + tableName;
            if(condition.contains("="))
                qry.append(" WHERE ").append(condition);

            qDebug() << "LCore:writeTable::3:: qry = " << qry;

            if(query.exec(qry))
                qDebug() << "LCore:writeTable::3:: Table dropped = " + tableName;
            else
            {
                qDebug() << "LCore:writeTable::3:: Table Not dropped because" << query.lastError();
                return ("Table Not dropped " + tableName);
            }
        }
    }

    qry = "REPLACE into " + tableName + "(" + columns + ") values(" + values + ")";
    qDebug() << qry;

    if(query.exec(qry))
        qDebug() << "LCore:writeTable::3::  Values Inserted " + tableName;
    else
    {
        qDebug() << "LCore:writeTable::3:: Values not Inserted because " <<  query.lastError();
        return ("Data Not Inserted " + tableName);
    }

    qDebug() << "LCore:writeTable::3:: return  Successful.";
    return "Successfull";
}

QStringList LCore::readTable(const QString& tableName, const QString& primeKeyName, const QString& selectProperty)
{
    qDebug() << "LCore:readTable::3:: Start.";
    qDebug() << "LCore:readTable::3:: args : tableName = " << tableName << " primeKeyName = " << primeKeyName
             << " selectProperty = " << selectProperty;

    if(!isTableExists(tableName))
        return QStringList();
    if(!isTableExists(tableName, primeKeyName))
        return QStringList();

    QStringList values;

    QSqlQuery query;
    QString qry = "SELECT " + selectProperty + " FROM " + tableName;
    if(primeKeyName.length() > 1)
    {
        qry.append(" WHERE ");
        qry.append(primeKeyName);
    }
    qDebug() << "LCore:readTable::3:: "<< qry;

    if(query.exec(qry))
    {
        QSqlRecord rec = query.record();
        while (query.next())
        {
            for(int i=0 ; i < rec.count(); i++)
            {
                values << query.value(i).toString();
            }
        }
    }
    else
    {
        values << "Failed to retrive. " + tableName;
        qDebug() << "LCore:readTable::3:: Failed to retrive because " << query.lastError();
        qDebug() << "LCore:readTable::3:: "<< values;
        return QStringList();
    }
    qDebug() << "LCore:readTable::3:: return values  = " <<values;
    return values;
}

QString LCore::writeImprivataGlobalTable(const QString& strProperty, const QString& strValue)
{
    QString ColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(255)";
    QString Values = "'"+strProperty+"', '"+strValue+"'";
    return writeTable("ImprivataGlobal", ColumnType, Values, "AppendNew");
}

QString LCore::readImprivataGlobalTable(const QString& strProperty)
{
    QString propValue;
    QStringList strlistRead;
    strlistRead = readTable("ImprivataGlobal", "Property='"+strProperty+"'", "Value");

    if(!strlistRead.isEmpty())
    {
        propValue = strlistRead.at(0);
    }
    return propValue;
}

QString LCore::deleteEntry(const QString& tableName, const QString& primeKeyName)
{
    qDebug() << "LCore:deleteEntry::3:: Start.";
    qDebug() << "LCore:deleteEntry::3:: args : tableName = " << tableName << " primeKetKyName = " << primeKeyName;
    QSqlQuery query;
    QString qry = "DELETE from " + tableName;
    qDebug() << "LCore:deleteEntry::3:: qry : " << qry;
    QString lckey = primeKeyName.toLower();

    if(lckey.compare("drop") == 0)
    {
        qry = "DROP table " + tableName;
    }
    else if(primeKeyName.length() > 1)
    {
        qry.append(" WHERE ");
        qry.append(primeKeyName);
    }

    if(query.exec(qry))
    {
        qDebug() << "LCore:deleteEntry::3:: Deleted " + tableName;
    }
    else
    {
        qDebug() << "LCore:deleteEntry::3:: Faile to delete " + tableName;
        qDebug() << "LCore:deleteEntry::3:: Faile to delete because " << query.lastError();
        return ("Failed to delete. " + tableName);
    }
    qDebug() << "LCore:deleteEntry::3:: return Successful" ;
    return "Successfull";
}

// cppcheck-suppress unusedFunction
void LCore::LoadImage(QWidget *parent1)
{
    qDebug() << "LCore:LoadImage::3:: Start.";
    wid = new QWidget(parent1);
    wid->setGeometry(0,0,parent1->width(),parent1->height());

    label = new QLabel(wid);
    label->setGeometry( 180, 110, 100, 100 );
    label->setAlignment(Qt::AlignCenter);
    label->setStyleSheet("background-color: rgba(0,0,0,0);");
    label->show();

    movie = new QMovie(":/images/loading.gif");
    movie->setScaledSize(QSize(80,80));
    label->setMovie(movie);
    movie->start();
    wid->show();
    qDebug() << "LCore:LoadImage::3:: End.";
}

// cppcheck-suppress unusedFunction
void LCore::StopImage()
{
    if(movie)
    {
        movie->stop();
        delete movie;
        movie = NULL;
    }
    if(label)
    {
        label->hide();
        delete label;
        label = NULL;
    }
    if(wid)
    {
        wid->hide();
        delete wid;
        wid = NULL;
    }
}

// cppcheck-suppress unusedFunction
char* LCore::encrypt(char *pass)
{
    char newpass[128];
    char val[10];
    memset(newpass, 0, sizeof(newpass));
    u_short i,len;
    u_char key = 0x43;

    len = strlen(pass)+1;

    sprintf(newpass, "%.2x%.2x%.2x", 0, len, key);

    pass[0] ^= (key | 'C');

    memset(val, 0, sizeof(val));
    sprintf(val, "%.2x", pass[0]);
    strcat(newpass, val);

    for(i = 1; i < len-1; i++)
    {
        pass[i] ^= pass[i-1] ^ key;
        memset(val, 0, sizeof(val));
        sprintf(val, "%.2x", pass[i]);
        strcat(newpass, val);
    }

    return strdup(newpass);
}

// cppcheck-suppress unusedFunction
int LCore::hex_decode(char *src, char *dst, int outsize)
{
    char *p, *q;

    const char *pe = src + strlen(src);
    const char *qe = dst + outsize;

    for (p = src, q = dst; p < pe && q < qe && isxdigit((int)*p); p += 2)
    {
        char ch = tolower(p[0]);
        char cl = tolower(p[1]);

        if ((ch >= '0') && (ch <= '9')) ch -= '0';
        else if ((ch >= 'a') && (ch <= 'f')) ch -= 'a' - 10;
        else return (-1);

        if ((cl >= '0') && (cl <= '9')) cl -= '0';
        else if ((cl >= 'a') && (cl <= 'f')) cl -= 'a' - 10;
        else return (-1);

        *q++ = (ch << 4) | cl;
    }
    return (q - dst);
}

// cppcheck-suppress unusedFunction
int LCore::decrypt(char *pass, int len)
{
    short i;
    char *p, key;

    if (len < 4)
        return (0);

    i = ntohs(*reinterpret_cast<short*>(pass));

    if (i != len - 2)
        return (0);

    key = pass[2];
    p = pass + 3;

    for (i -= 2; i > 0; i--)
        p[i] = p[i - 1] ^ p[i] ^ key;

    p[0] ^= (key | 'C');

    i = len - 3;
    memmove(pass, pass + 3, i);
    pass[i] = '\0';

    return (1);
}

// cppcheck-suppress unusedFunction
QString LCore::CreateTempIniFile(const QString& name, const QStringList& conn)
{
    qDebug() << "LCore:CreateTempIniFile::3:: Start.";
    QString ipaddress = conn.at(1);
    QString xres, yres, line;

    QString tmpfile = "/tmp/"+ name +".ini";

    QFile icafile(tmpfile);
    if (!icafile.open(QIODevice::WriteOnly | QIODevice::Text ))
        return "";
    else
    {
        QTextStream out(&icafile);
        out << "[WFClient]" << "\n";
        out << "Version=1" << "\n";
        //        out << "TransparentKeyPassthrough=FullScreenOnly" << "\n\n";    // This is used to show start menu of host system.

        out << "[ApplicationServers]\n" << name << "=\n\n";
        out << "[" << name << "]\n";
        out << "WinStationDriver=ICA 3.0" << "\n";

        if(conn.at(1).length())             // server address
        {
            if(conn.at(5).length())
                out << "Address=" << conn.at(5).section(":", 0, 0) << "\n";
            else
                out << "Address=" << conn.at(1) << "\n";
        }

        if(conn.at(2).length())             // domain
            out << "Domain=" << conn.at(2) << "\n";

        if(conn.at(3).length())             // username
            out << "Username=" << conn.at(3) << "\n";

        if(conn.at(4).length())             // password
        {
            QString strPassword;
            strPassword = conn.at(4);  /// Do encryption for all build @ Ritesh on 29 Sept 2016.
            out << "ClearPassword=" << QString(strPassword) << "\n";
        }

        if(conn.at(5).length())             // Server Location
        {
            QString ipica = conn.at(5);
            if(!(ipica.section(":",1,1)==NULL))                                 // {{ by  jignesh for port 1494
            {
                //   server_port = server_ip.section(":",1,1);
                if(ipica.section(":",1,1)=="1494")
                    ipica = ipica.section(":",0,0);
            }                                                                  //  }}
            out << "DoNotUseDefaultCSL=On" << "\n";
            out << "LocTcpBrowserAddress=" << ipica << "\n";
            out << "LocHttpBrowserAddress=" << ipica << "\n";
        }
        else
            out << "DoNotUseDefaultCSL=Off" << "\n";

        if(conn.at(6).length())             // Application
            out << "InitialProgram=#" << conn.at(6) << "\n";

        QStringList Network_protocol;
        Network_protocol << "Use Global" << "TCP/IP + HTTP server location" << "TCP/IP" << "SSL/TLS + HTTP server location";
        qDebug() << "LCore:CreateTempIniFile::3:: NetworkProtocol : " << conn.at(7) << Network_protocol.indexOf(conn.at(7));
        switch(Network_protocol.indexOf(conn.at(7)))                         //Network Protocol
        {
        case 0:
            out << "SSLEnable=Off" << "\n";
            out << "SSLProxyHost=*" << "\n";
            break;
        case 1:
            out << "SSLEnable=Off" << "\n";
            out << "SSLProxyHost=*" << "\n";
            out << "BrowserProtocol=HTTPonTCP" << "\n"; //changes made on 16/09/2014 interchanges Values of Network Protocol
            break;
        case 2:
            out << "SSLEnable=Off" << "\n";
            out << "SSLProxyHost=*" << "\n";
            out << "BrowserProtocol=UDP" << "\n";   //changes made on 16/09/2014 interchanges Values of Network Protocol
            break;
        case 3:
            out << "SSLEnable=On" << "\n";
            out << "SSLProxyHost=*" << "\n";
            out << "BrowserProtocol=HTTPonTCP" << "\n";
            out << "SSLProxyHost=*" << "\n";
            break;
        }

        if(conn.at(8).size())
            out << "WorkDirectory=" << conn.at(8) << "\n";

        if(conn.at(11).toInt())                                                //Smart Card
            out << "DisableCtrlAltDel=Off" << "\n";
        else
            out << "DisableCtrlAltDel=On" << "\n";

        out << "TransportDriver=TCP/IP" << "\n";

        if(conn.at(12).toInt())                                 //Sound
        {
            QStringList sound_val;
            sound_val << "High" << "Medium" << "Low";

            out << "AudioBandwidthLimit=" << sound_val.indexOf(conn.at(13)) << "\n";
            out << "ClientAudio=On" << "\n";
        }
        else
        {
            out << "ClientAudio=Off" << "\n";
        }

        if(conn.at(14).contains("Enable"))
            out << "EnableAudioInput=Yes" << "\n";
        else if(conn.at(14).contains("Disable"))
            out << "EnableAudioInput=No" << "\n";
        else
        {
            QStringList globalconn = readTable("ICAGLOBAL", "", "EnableAudioInput");
            if(globalconn.count())
            {
                if(globalconn.at(0).toInt())    out << "EnableAudioInput=Yes" << "\n";
                else                            out << "EnableAudioInput=No" << "\n";
            }
        }

        if(conn.at(15).toInt())                                 //Data Compression
            out << "Compress=On" << "\n";
        else
            out << "Compress=Off" << "\n";

        if(conn.at(16).contains("Enable"))
            out << ";CDMAllowed=On" << "\n";
        else if(conn.at(16).contains("Disable"))                     //Drive Mapping
            out << "CDMAllowed=Off" << "\n";
        else
        {
            QStringList globalconn = readTable("ICAGLOBAL", "", "EnableDriveMap");
            if(globalconn.count())
            {
                if(globalconn.at(0).toInt())    out << ";CDMAllowed=On" << "\n";
                else                            out << "CDMAllowed=Off" << "\n";
            }
        }

        if(conn.at(17).toInt())                                 //Middle Button Clicked
            out << "MouseSendsControlV=On" << "\n";
        else
            out << "MouseSendsControlV=Off" << "\n";

        if(conn.at(18).toInt())                                 //Disk Cache
            out << "PersistentCacheEnabled=On" << "\n";

        out << "ZLMouseMode=" << conn.at(19) << "\n";           //Mouse Click
        out << "ZLKeyboardMode=" << conn.at(20) << "\n";        //Text Echo

        QStringList Encryption_Level;
        Encryption_Level << "Basic" << "RC5 ( 128 bit-Login Only )" << "RC5 ( 40 bit )" << "RC5 ( 56 bit )" << "RC5 ( 128 bit )";
        switch(Encryption_Level.indexOf(conn.at(21)))           //Encryption
        {
        case 0:
            out << "EryptionLevelSession=Basic" << "\n";
            break;
        case 1:
            out << "EncryptionLevelSession=RC5 (128 bit - Login Only)" << "\n";
            break;
        case 2:
            out << "EncryptionLevelSession=RC5 (40 bit)" << "\n";
            break;
        case 3:
            out << "EncryptionLevelSession=RC5 (56 bit)" << "\n";
            break;
        case 4:
            out << "EncryptionLevelSession=RC5 (128 bit)" << "\n";
            break;
        }

        if(conn.at(22).toInt())                                 //Use Default Firewall
            out << "UseAlternateAddress=1" << "\n";
        else
            out << "UseAlternateAddress=0" << "\n";

        if(!conn.at(23).toInt())                                //proxy type
            out << "ProxyUseDefault=On" << "\n";
        else
            out << "ProxyUseDefault=Off" << "\n";

        switch(conn.at(23).toInt())                             //proxy type
        {
        case 1:
            out << "ProxyType=None" << "\n";
            break;
        case 2:
            out << "ProxyType=Auto" << "\n";
            break;
        case 3:
            out << "ProxyType=Secure" << "\n";
            out << "ProxyHost=" << conn.at(24) << ":" << conn.at(26) << "\n";   //proxy address: proxy port
            out << "ProxyUsername=" << conn.at(25) << "\n";                     //proxy username
            out << "ProxyPassword=" << conn.at(27) << "\n";                     // decrypt(conn.at(27)) proxy password
            break;
        case 4:
            out << "ProxyType=Socks" << "\n";
            out << "ProxyHost=" << conn.at(24) << ":" << conn.at(26) << "\n";
            out << "ProxyUsername=" << conn.at(25) << "\n";
            out << "ProxyPassword=" << conn.at(27) << "\n";                     // decrypt(conn.at(27))
            break;
        case 5:
            out << "ProxyType=Wpad" << "\n";
            break;
        default:
            break;
        }

        QStringList Window_Colors;
        Window_Colors << "Use Global" << "16" << "256" << "32 Thousand" << "16 Million" << "Automatic";
        switch(Window_Colors.indexOf(conn.at(28)))                   // Window color
        {
        case 1:
            out << "DesiredColor=1" << "\n";
            break;
        case 2:
            out << "DesiredColor=2" << "\n";
            break;
        case 3:
            out << "DesiredColor=4" << "\n";
            break;
        case 4:
            out << "DesiredColor=8" << "\n";
            break;
        case 5:
            out << "DesiredColor=15" << "\n";
            break;
        default:
            break;
        }

        QStringList Color_Map;
        Color_Map << "Use Global" << "Shared-Approximate-Colors" << "Private-Exact Colors";

        if(conn.at(28) == "256")
        {
            switch(Color_Map.indexOf(conn.at(29)))                             // 256 Color Mapping
            {
            case 0:
                out << "UseDefaultSettingForColormap=Yes" << "\n";
                break;
            case 1:
                out << "UseDefaultSettingForColormap=No" << "\n";
                out << "ApproximateColors=On" << "\n";
                break;
            case 2:
                out << "UseDefaultSettingForColormap=No" << "\n";
                out << "ApproximateColors=Off" << "\n";
                break;
            }
        }

        QStringList window_screen;
        window_screen << "Use Global" << "Fixed Size" << "Screen percentage" << "Fullscreen";
        qDebug() << "LCore:CreateTempIniFile::3:: Window Screen1 : " << conn.at(30);
        switch(window_screen.indexOf(conn.at(30)))          // window screen
        {
        case 0:
            out << "NoWindowManager=True" << "\n";  // Added on 5/10/2013
            break;
        case 1:
            out << "UseFullScreen=No" << "\n";
            out << "DesiredVRES=" << conn.at(31).section("x", 1, 1).trimmed() << "\n";    // window size
            out << "DesiredHRES=" << conn.at(31).section("x", 0, 0).trimmed() << "\n";
            break;
        case 2:
            out << "UseFullScreen=No" << "\n";
            out << "ScreenPercent=" << conn.at(31).section("%",0,0).trimmed() << "\n";
            break;
        case 3:
            out << "NoWindowManager=True" << "\n";
            out << "UseFullScreen=Yes" << "\n";
            break;
        }

        if(conn.at(32) == "Use Global")                                                 //Autoreconnect
        {
            QStringList ICAGlobalValues = readTable("ICAGlobal","");

            if(ICAGlobalValues.at(43).contains("Enable")) // enable auto reconnect -- When we Disable Reconnect option from ICA global, then reconnect will not performed--Varsha
            {
                out << "TransportReconnectDefault=False" << "\n";
                out << "ICAKeepAliveEnabled=True" << "\n";
                out << "TransportReconnectEnabled=True" << "\n";
                out << "TransportReconnectDelay=" << ICAGlobalValues.at(45) << "\n";           //Reconnect Delay
                out << "TransportReconnectRetries=" << ICAGlobalValues.at(44) << "\n";         //Retry

            }
            else
            {
                out << "ICAKeepAliveEnabled=False" << "\n";
                out << "TransportReconnectEnabled=False" << "\n";

            }

        }
        else if(conn.at(32) == "Enable")
        {
            out << "TransportReconnectDefault=False" << "\n";
            out << "ICAKeepAliveEnabled=True" << "\n";
            out << "TransportReconnectEnabled=True" << "\n";
            out << "TransportReconnectDelay=" << conn.at(34) << "\n";           //Reconnect Delay
            out << "TransportReconnectRetries=" << conn.at(33) << "\n";         //Retry
        }
        out << "Launcher=Custom" << "\n";

        if(conn.at(42).toInt())
            out<<"TWIMode=True"<<"\n"; //for seamless mode

        out<<"TWIEmulateSystray=False";

        icafile.close();
        sync();
    }
    line = ipaddress.length()?ipaddress:"None";
    line.append(" ").append(xres).append(" ").append(yres);

    qDebug() << "LCore:CreateTempIniFile::3:: return line = " << line;
    return line;
}

// cppcheck-suppress unusedFunction
QString LCore::CreateWfclientIniFile(const QString& name, const QStringList& conn)
{
    qDebug() << "LCore:CreateWfclientIniFile::3:: Start.";
    qDebug() << "LCore:CreateWfclientIniFile::3:: args : name = " << name << "conn = " << conn;
    QString ipaddress = conn.at(1);
    QString xres, yres, line;

    QString tmpfile = "/tmp/";
    tmpfile.append(name).append(".ini");

    QFile icafile(tmpfile);
    if (!icafile.open(QIODevice::WriteOnly | QIODevice::Text))
        return "";
    else
    {
        QTextStream out(&icafile);
        out << "[WFClient]" << "\n";
        out << "Version=1" << "\n";
        out << "TransparentKeyPassthrough=FullScreenOnly" << "\n\n";    // This is used to show start menu of host system.

        out << "[ApplicationServers]\n" << name << "=\n\n";
        out << "[" << name << "]\n";
        icafile.close();
        sync();
    }
    line = ipaddress.length()?ipaddress:"None";
    line.append(" ").append(xres).append(" ").append(yres);
    qDebug() << "LCore:CreateWfclientIniFile::3:: End.";
    qDebug() << "LCore:CreateWfclientIniFile::3:: retrun line = " << line;
    return line;
}

// cppcheck-suppress unusedFunction
int LCore::isExtended()
{
    qDebug() << "LCore:isExtended::3:: Start.";
    QStringList tc_property;
    QFile file;
    if(file.exists("/tmp/.newicewm"))   // This condition added coz new icewm does not support xinerama on intel board
        return 0;

    QString DRIVER, CONFDUALDISPLAY, ROTATION;

    tc_property.clear();
    tc_property = readTable( " DisplaySettings ", " Name = DisplayDriver ");
    DRIVER = tc_property.at(0).isEmpty()? tc_property.at(1):"vesa";

    tc_property.clear();
    tc_property = readTable( " DisplaySettings ", " Name = ConfDualDisplay ");
    CONFDUALDISPLAY = tc_property.at(0).isEmpty()? tc_property.at(1):"0";

    tc_property.clear();
    tc_property = readTable( " DisplaySettings ", " Name = DisplayRotation ");
    ROTATION = tc_property.at(0).isEmpty()? tc_property.at(1):"2";

    if( (DRIVER == "via" || DRIVER == "intel") && CONFDUALDISPLAY.toInt() && ROTATION=="1" )
    {
        qDebug() << "LCore:isExtended::3:: return 1.";
        return 1;
    }

    qDebug() << "LCore:isExtended::3:: return 0.";
    return 0;
}

// cppcheck-suppress unusedFunction
int LCore::is2ndDispRotated()
{
    qDebug() << "LCore:is2ndDispRotated::3:: Start.";
    QStringList tc_property;
    QString DRIVER, CONFDUALDISPLAY, ROTATION;

    tc_property.clear();
    tc_property = readTable( " DisplaySettings ", " Name = DisplayDriver ");
    DRIVER = tc_property.at(0).isEmpty()? tc_property.at(1):"vesa";

    tc_property.clear();
    tc_property = readTable( " DisplaySettings ", " Name = ConfDualDisplay ");
    CONFDUALDISPLAY = tc_property.at(0).isEmpty()? tc_property.at(1):"0";

    tc_property.clear();
    tc_property = readTable( " DisplaySettings ", " Name = DisplayRotation ");
    ROTATION = tc_property.at(0).isEmpty()? tc_property.at(1):"5";

    if( DRIVER == "via" && CONFDUALDISPLAY.toInt() && ( ROTATION=="3" || ROTATION=="4" ) )
    {
        qDebug() << "LCore:is2ndDispRotated::3:: return 1.";
        return 1;
    }
    qDebug() << "LCore:is2ndDispRotated::3:: return 0.";
    return 0;
}

// cppcheck-suppress unusedFunction
int LCore::GetXDisplayNum(void)
{
    qDebug() << "LCore:GetXDisplayNum::3:: Start.";
    int i;
    QString fn;
    struct stat buf;

    for (i=1; i<=44; i++)
    {
        fn.clear();
        fn.sprintf("/tmp/.X%d-lock", i);    // /tmp/.X%d-lock
        if (stat(fn.toLatin1(), &buf) < 0)
            break;
    }
    qDebug() << "LCore:GetXDisplayNum::3:: return i = " << i;
    return i;
}
//" Name VARCHAR(30) , Server VARCHAR(30) , Screen VARCHAR(30) , Encryption INTEGER , ViewOnly INTEGER , SharedSession INTEGER , Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";

// cppcheck-suppress unusedFunction
QString LCore::GenerateVNC(QStringList conn)
{
    qDebug() << "LCore:GenerateVNC::3:: Start.";
    QString cmd, options, junk;
    QFile file;

    if ( !conn.at(2).length())
        junk = "0";
    else
        junk = conn.at(2);   // Added by prashant

    if(file.exists("/pkgs/tightvnc-1.3.10"))
    {
        options = " -truecolour ";
        switch(conn.at(3).toInt())  // Encryption
        {
        case 0: options.append(" -encodings raw");      break;
        case 1: options.append(" -encodings hextile");  break;
        case 2: options.append(" -encodings ZRLE");    break;
        }
        if (conn.at(5).toInt()) // Shared Session
            options.append(" -shared");
        if (conn.at(4).toInt())    // View Only
            options.append(" -viewonly");
    }
    else
    {
        options = " -FullColour ";
        switch(conn.at(3).toInt())  // Encryption
        {
        case 0: options.append(" -PreferredEncoding=raw");      break;
        case 1: options.append(" -PreferredEncoding=hextile");  break;
        case 2: options.append(" -PreferredEncoding=ZRLE");    break;
        }
        if (conn.at(5).toInt()) // Shared Session
            options.append(" -Shared");

        if (conn.at(4).toInt())    // View Only
            options.append(" -ViewOnly");
    }

    // Added sleep 0 b'coz password window not visible in tightvnc.
    if(file.exists("/pkgs/tightvnc-1.3.10"))
        cmd.sprintf("sleep 0 | vncviewer%s %s:%s", static_cast<const char*>(options.toLatin1()), static_cast<const char*>(conn.at(1).toLatin1()), static_cast<const char*>(junk.toLatin1()));
    else
        cmd.sprintf("vncviewer%s %s:%s", static_cast<const char*>(options.toLatin1()), static_cast<const char*>(conn.at(1).toLatin1()), static_cast<const char*>(junk.toLatin1()));

    qDebug() << "LCore:GenerateVNC::3:: return cmd = " << cmd;
    return cmd;
}

bool LCore::copyDir(const QString &source, const QString &destination, const bool override) {
    QDir directory(source);
    bool error = false;

    if (!directory.exists()) {
        return false;
    }

    QStringList dirs = directory.entryList(QDir::AllDirs | QDir::Hidden | QDir::NoDotAndDotDot);
    QStringList files = directory.entryList(QDir::Files | QDir::Hidden);
    QList<QString>::iterator d,f;

    for (d = dirs.begin(); d != dirs.end(); ++d) {
        if ((*d) == "." || (*d) == "..") {
            continue;
        }
        if (!QFileInfo(directory.path() + "/" + (*d)).isDir()) {
            continue;
        }
        QDir temp(destination + "/" + (*d));
        temp.mkpath(temp.path());
        if (!copyDir(directory.path() + "/" + (*d), destination + "/" + (*d), override)) {
            error = true;
        }
    }

    for (f = files.begin(); f != files.end(); ++f) {
        QFile tempFile(directory.path() + "/" + (*f));
        if (QFileInfo(directory.path() + "/" + (*f)).isDir()) {
            continue;
        }
        QFile destFile(destination + "/" + directory.relativeFilePath(tempFile.fileName()));
        if (destFile.exists() && override) {
            destFile.remove();
        }
        if (!tempFile.copy(destination + "/" + directory.relativeFilePath(tempFile.fileName()))) {
            error = true;
        }
    }
    return !error;
}

// cppcheck-suppress unusedFunction
QStringList LCore::getAllConnections(QString tableName, int opcode) // opcode=1 with table name, opcode=0 without table name.
{
    qDebug() << "LCore:getAllConnections::3:: Start.";
    if(!isTableExists(tableName))
        return QStringList("");

    QStringList values;

    QSqlQuery query;
    QString qry = "SELECT * FROM " + tableName;

    if(query.exec(qry))
    {
        QString str;
        while (query.next())
        {
            if(opcode == 1)
                str.append(tableName).append(":");

            str.append(query.value(0).toString().simplified());
            values << str;
            str.clear();
        }
    }
    else
    {
        values << "Failed to retrive. " + tableName;
        qDebug() << "LCore:getAllConnections::3:: Failed to retrive because " << query.lastError();
        qDebug() << "LCore:getAllConnections::3:: "<< values;
        return QStringList("");
    }
    qDebug() << "LCore:getAllConnections::3:: return values = " << values;
    return values;
}

QString LCore::getManufracturerDetalis(QString prop)    //Aash 10-06-2013
{
    qDebug() << "LCore:getManufracturerDetalis::3:: Start.";
    QString manufracturerDetalis;
    QStringList li;
    QProcess *proc = new QProcess();
    if(prop == "Asset")
        proc->start("dmidecode -t 2");
    else
        proc->start("dmidecode -t system");

    proc->waitForFinished(-1);

    while (!proc->atEnd())
    {
        if((manufracturerDetalis=proc->readLine()).contains(prop))
        {
            li=manufracturerDetalis.trimmed().split(':');
            manufracturerDetalis = li[1];
            break;
        }
    }
    delete proc;
    qDebug() << "LCore:getManufracturerDetalis::3:: return manufracturerDetalis = " << manufracturerDetalis;
    return manufracturerDetalis;
}

// cppcheck-suppress unusedFunction
QString LCore::getFlashSize()   //Aash 10-06-2013
{
    qDebug() << "LCore:getFlashSize::3:: Start.";
    QString flashSize,cmd,splitter,identifier;
    QStringList li;

    QProcess *procFlash = new QProcess();
    QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
    env.insert("LC_ALL", "en_US.utf-8"); // Add an process environment variable
    procFlash->setProcessEnvironment(env);

    cmd = "fdisk -l";
    cmd.append(" "+QString(getDevice()));
    splitter = ":";
    identifier = "Disk /dev";
    if(qgetenv("BOARDARCH") == "via-arm")
    {
        cmd = "df -h";
        splitter = " ";
        identifier = "/dev/root";
    }
    qDebug()<<"cmd:-"<<cmd;
    procFlash->start(cmd);
    procFlash->waitForFinished(-1);

    while (!procFlash->atEnd())
    {
        if((flashSize=procFlash->readLine()).contains(identifier))
        {
            //                     qDebug() << "flash Size = " << flashSize;
            li=flashSize.simplified().split(splitter);
            if(qgetenv("BOARDARCH") == "via-arm")
                flashSize = li[1];
            else
                flashSize = li[1].section(",",0,0);
            break;
        }
    }
    delete procFlash;
    qDebug() << "LCore:getFlashSize::3:: return flashSize = " << flashSize.trimmed();
    return flashSize.trimmed();
}

char *LCore::getDevice()
{
    qDebug() << "LCore:getDevice::3:: Start.";
    char device[20];
    bool bIQLType;
    QString strCPUInfo = getCPUname();
    if(strCPUInfo.contains("Z3735F") || strCPUInfo.contains("N2808") || strCPUInfo.contains("N3350"))
        bIQLType = true;
    else
        bIQLType = false;

    memset(device, 0, sizeof(device));
    FILE *fp = popen("findfs LABEL=sukshm2", "r");
    if(fp)
    {
        fgets(device, sizeof(device), fp);
        pclose(fp);
    }

    if(bIQLType)
    {
        memset(device, 0, sizeof(device));
        strcpy(device, "/dev/mmcblk0");
    }
    else if(strlen(device) && strncmp(device, "/dev/", 5) == 0)
    {
        device[strlen(device)-2] = '\0';
        ////********************************************
        // changes for flash size of NVME Board
        int i,j;
        for(i = 0; device[i] != '\0'; ++i)
        {
            while (!( (device[i] != 'p' ) ))

            {
                for(j = i; device[j] != '\0'; ++j)
                {
                    device[j] = device[j+1];
                }
                device[j] = '\0';
            }
        }
        qDebug()<<"device path:-"<<device;
        /////*******************************************
    }
    else
    {
        memset(device, 0, sizeof(device));
        strcpy(device, "/dev/sda");
    }
    qDebug() << "LCore:getDevice::3:: return ";
    return strdup(device);
}

void LCore::chownFilesAndDir(const QString& FilenameorDirName)
{
	QString strchangeOwner = "chown -Rv myuser:myuser \""+FilenameorDirName+"\"";
    QProcess::execute("chown", QStringList()<< "-Rv" << "myuser:myuser" << FilenameorDirName);
    qDebug()<< "\n\n\nstrchangeOwner"<<strchangeOwner;
    sync();
}

QString LCore::getHomeUserPath()
{
    QString strConnectionAndApplicationLaunchUser = "/root/";
    QStringList strConnLaunchUser = readDefaultsValue("ConnectionLaunchUser");
    if(!strConnLaunchUser.isEmpty() && strConnLaunchUser.at(0).toInt())
    {
      strConnectionAndApplicationLaunchUser = "/home/myuser/";
    }
    return strConnectionAndApplicationLaunchUser;
}

void LCore::writeLogsOnDefaultValue(const QString& strStatement, const QString& strOP)
{

    if(bEnableImprivataLogs == true)
    {
        QFile file("/root/.logsimprivata.txt");
        if (file.open(QIODevice::Append | QIODevice::Text))
        {
            QTextStream out(&file);
            out << QDateTime::currentDateTime().toString("dd/MM/yyyy hh:mm:ss:zzz") <<"\t"<< strStatement <<"\t"<< strOP << "\n";
            file.close();
        }
    }
}

// cppcheck-suppress unusedFunction
void LCore::ExecuteKeyboardSettings()
{
    qDebug() << "LCore:ExecuteKeyboardSettings::3:: Start.";
    if(!isTableExists(QString("KeyboardSettings")))
        return;

    QStringList data = readTable(QString("KeyboardSettings"), "");
    if(!data.isEmpty())
    {
        if(data.at(0).trimmed() == "chf")
        {
            data.removeAt(0);
            data.insert(0,"ch");
            if(data.at(1).trimmed().isEmpty())
            {
                data.insert(1,"fr");
            }
        }

        QString setlayout = "setxkbmap";
        QStringList argList;
        if(!data.at(1).trimmed().isEmpty())
        {
            argList << "-variant" << data.at(1);
        }

        if(!data.at(2).simplified().isEmpty())
            argList  << "-model" << data.at(2);

        argList << data.at(0);
        QProcess *setKbdLayout = new QProcess();
        QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
        env.insert("DISPLAY",":0.0");
        setKbdLayout->setProcessEnvironment(env);

        setKbdLayout->start(setlayout, argList);
        setKbdLayout->waitForFinished(-1);

        QString program = "xset";
        QStringList arguments;
        arguments << "r" << "rate" << data.at(3) << data.at(4);

        QProcess *myProcess = new QProcess();
        myProcess->setProcessEnvironment(env);
        myProcess->start(program, arguments);
        myProcess->waitForFinished(-1);

        arguments.clear();
        arguments << "on";
        if(data.at(6)=="0")
        {
            arguments.clear();
            arguments << "off";
        }
        myProcess->start(QString("numlockx"), arguments);
        myProcess->waitForFinished(-1);

        if(data.at(8)=="1")
        {
            if(qgetenv("BOARDARCH") == "31238U1404" || qgetenv("OSPROJECT") == "McD")
                myProcess->start(("xmodmap -e \"keycode 113 = Alt_L Meta_L\""));
            else
                myProcess->start(("xmodmap -e \"keycode 108 = Alt_L Meta_L\""));
        }
        else
        {
            if(qgetenv("BOARDARCH") == "31238U1404" || qgetenv("OSPROJECT") == "McD")
                myProcess->start(("xmodmap -e \"keycode 113 = ISO_Level3_Shift NoSymbol ISO_Level3_Shift\""));
            else
                myProcess->start(("xmodmap -e \"keycode 108 = ISO_Level3_Shift NoSymbol ISO_Level3_Shift\""));
        }
        myProcess->waitForFinished(-1);

        program = "xmodmap";
        if(data.at(7)=="1")
            myProcess->start("xmodmap -e \"add mod3 = Scroll_Lock\"");
        else
            myProcess->start(("xmodmap -e \"clear mod3\""));
        myProcess->waitForFinished(-1);

        QStringList touchscreen_settings = readTable("TouchScreen", "");

        if((touchscreen_settings.count() && touchscreen_settings.at(0).toInt()) || QFile::exists("/root/.tmpTouch") )
        {
            if(data.at(8)=="1")
            {
                system("xmodmap -e \"keycode 108 = Alt_L Meta_L\"");
            }
            system("xmodmap -e \"keycode 113 = Left NoSymbol Left\"");//for left and right key
        }

        bool isLaptop = false;

        if(checkForLaptop() == true)
            isLaptop = true;

        bool bL14W = isL14W(getLenovoMT());
        bool bL480 = isL480(getLenovoMT());

        if(isLaptop )
        {
            //for AltGr key   //done by kunal
            if(data.at(8) == "1")
            {
                if( !bL14W && !bL480 )
                {
                    myProcess->start("xmodmap -e \"keycode 108 = Alt_L Meta_L\"");
                }
                else
                {
                    //This Condition is added because on L14w laptop In keyboards, right alt to behave as left fails to work.
                    system("xmodmap -e \"keycode 113 = Alt_L Meta_L\"");
                }
            }
            else
            {
                myProcess->start("xmodmap -e \"keycode 113 = Left NoSymbol Left\"");//for left and right key
            }
            myProcess->waitForFinished(-1);
        }
        if((getVGAcard().contains("[Radeon", Qt::CaseInsensitive) && !getVGAcard().contains("Raven Ridge", Qt::CaseInsensitive) && !getVGAcard().contains("wani", Qt::CaseInsensitive)) || (isLaptop && !bL14W && !bL480))
        {
            /// /* ON Dell AMD(Radeon driver) Board left key was not working so following cmd executed on 2 Feb 2017 by ritesh*/
            system("xmodmap -e \"keycode 113 = Left NoSymbol Left\"");//for left and right key
        }
    }

    QStringList strPScreen = readDefaultsValue("disablePrintScreen");
    if(!strPScreen.isEmpty() && strPScreen.at(0).toInt())
    {
        disableKeyCode("Print");
    }
    qDebug() << "LCore:ExecuteKeyboardSettings::3:: End.";
}

// cppcheck-suppress unusedFunction
int LCore::SetSerialPortsettings(QString port)
{
    qDebug() << "LCore:SetSerialPortsettings::3:: Start.";
    QString condition = "SelectPort='";
    condition = condition.append(port);
    condition = condition.append("'");
    qDebug() << "LCore:SetSerialPortsettings::3:: Condition = "<<condition;

    QStringList port_settings = readTable( "SERIAL_PORT_SETTINGS", condition);

    int fd;
    struct termios options;

    int nPort = port.remove("COM").toInt();
    QString device = QString("/dev/ttyS%1").arg(QString::number(nPort - 1));
    qDebug() << "LCore:SetSerialPortsettings::3:: device = "<< device;

    fd = ::open(device.toLatin1(), O_RDWR | O_NOCTTY | O_NDELAY);
    if(fd < 0)
        return 0;

    tcgetattr(fd, &options);

    unsigned int baud_rate[20] = { B50, B75, B110, B150, B200, B300, B600, B1200, B1800, B2400, B4800, B9600, B19200, B38400, B57600, B115200 };
    const unsigned int data_bits[6] = { CS5, CS6, CS7, CS8 };

    QStringList BAUD_RATE;
    QStringList DATA_BITS;
    BAUD_RATE << "50" << "75" << "110" << "150" << "200" << "300" << "600" << "1200" << "1800" << "2400" << "4800" << "9600" << "19200" << "38400" << "57600" << "115200";
    DATA_BITS << "5" << "6" << "7" << "8";

    // Setting the output baud rate
    int nIndexBaud = BAUD_RATE.indexOf(port_settings.at(1));
    cfsetospeed(&options, baud_rate[nIndexBaud]); // Baud Rate
    cfsetispeed(&options, baud_rate[nIndexBaud]); // Baud Rate

    // Setting the data bits
    options.c_cflag &= ~CSIZE;                      //  Mask the character size bits
    options.c_cflag |= data_bits[DATA_BITS.indexOf(port_settings.at(3))];     // Char Length //  Select 8 data bits

    // Setting the parity (No/Odd/Even)
    QStringList PARITY;
    PARITY << "None" << "Odd" << "Even";
    switch(PARITY.indexOf(port_settings.at(4)))
    {
    case 0:
        options.c_cflag &= ~PARENB;
        options.c_cflag &= ~CSTOPB;
        options.c_cflag &= ~CSIZE;
        options.c_cflag |= CS8;
        break;
    case 1:
        options.c_cflag |= PARENB;
        options.c_cflag |= PARODD;
        options.c_cflag &= ~CSTOPB;
        options.c_cflag &= ~CSIZE;
        options.c_cflag |= CS7;
        break;
    case 2:
        options.c_cflag |= PARENB;
        options.c_cflag &= ~PARODD;
        options.c_cflag &= ~CSTOPB;
        options.c_cflag &= ~CSIZE;
        options.c_cflag |= CS7;
        break;
    default:
        break;
    }

    // Setting the stop-bit
    (port_settings.at(5) == "2") ? (options.c_cflag &= ~CSTOPB) : (options.c_cflag |= CSTOPB);

    // Setting Flow control
    QStringList FLOW_CONTROL;
    FLOW_CONTROL << "Hardware" << "Software" << "None";
    switch(FLOW_CONTROL.indexOf(port_settings.at(2)))
    {
    case 0: options.c_cflag |= CRTSCTS;
        options.c_iflag &= ~(IXON | IXOFF | IXANY);
        break;
    case 1: options.c_cflag &= ~CRTSCTS;
        options.c_iflag |= (IXON | IXOFF | IXANY);
        break;
    case 2: options.c_cflag &= ~CRTSCTS;
        options.c_iflag &= ~(IXON | IXOFF | IXANY);
        break;
    default:
        break;
    }

    //   set raw input, 1 second timeout
    options.c_cflag |= (CLOCAL | CREAD);
    options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
    options.c_oflag &= ~OPOST;
    options.c_cc[VMIN] = 0;
    options.c_cc[VTIME] = 10;

    fcntl(fd, F_SETFL, 0);
    tcflush(fd, TCIFLUSH);

    if(tcsetattr(fd, TCSANOW, &options) < 0)
    {
        ::close(fd);
        return 0;
    }
    else
        qDebug() << "LCore:SetSerialPortsettings::3:: Successfully set";

    ::close(fd);
    return 1;
}

QList<QStringList> LCore::readCompleteTable(const QString& tableName, const QString& primeKeyName)
{  
    qDebug() << "LCore:readCompleteTable::3:: Start.";
    qDebug() << "LCore:readCompleteTable::3:: args : tableName = " << tableName << " primeKeyName = " << primeKeyName ;
    QList<QStringList> CompleteValue;
    CompleteValue.clear();

    if(!isTableExists(tableName, primeKeyName))
        return CompleteValue;

    QStringList values;

    QSqlQuery query;
    QString qry = "SELECT * FROM " + tableName;

    if(primeKeyName.length() > 1)
    {
        qry.append(" WHERE ");
        qry.append(primeKeyName);
    }

    qDebug() << "LCore:readCompleteTable::3:: qry = "<< qry;

    if(query.exec(qry))
    {
        QSqlRecord rec = query.record();
        int counter=0;
        while (query.next())
        {
            values.clear();
            for(int i=0 ; i < rec.count(); i++)
            {
                values << query.value(i).toString();
            }

            CompleteValue.insert(counter,values);
            ++counter;
        }
    }
    else
    {
        values << "Failed to retrive. " + tableName;
        qDebug() << "LCore:readCompleteTable::3:: Failed to retrive because " << query.lastError();
        qDebug() << "LCore:readCompleteTable::3:: return CompleteValue = " << CompleteValue;
        return CompleteValue;
    }
    qDebug() << "LCore:readCompleteTable::3:: return completevalue = " << CompleteValue;
    return CompleteValue;
}

QString LCore::ExecutePowerSettings() //Aash 13-06-13
{
    qDebug() << "LCore:ExecutePowerSettings::3:: Start.";
    QProcess::execute("xset s off");
    QProcess::execute("xset -dpms");

    if(!isTableExists(QString("PowerSettings")))
    {
        qDebug() << "LCore:ExecutePowerSettings::3:: !PowerSettings return "" ";
        return "";
    }

    QStringList data = readTable(QString("PowerSettings"), QString(""));
    if(data.count())
    {
        int nStandby = data[0].toInt();
        int nSuspend = data[1].toInt();
        int nTurnOff = data[2].toInt();

        if(!nStandby && !nSuspend && !nTurnOff)
            return "";

        QString cmd = "xset dpms "+data[0]+" "+data[1]+" "+data[2];
        QProcess proc;
        proc.start(cmd);
        if(proc.waitForFinished(-1))
        {
            QString tmpStr = "";
            tmpStr = proc.readAllStandardError();
            tmpStr.chop(1);
            qDebug() << "LCore:ExecutePowerSettings::3:: return tmpStr = " << tmpStr;
            return tmpStr;
        }
    }
    qDebug() << "LCore:ExecutePowerSettings::3::  return "" ";
    return "";
}

QStringList LCore::getDisplayDriverList() //Prash 1-02-14
{
    qDebug() << "LCore:getDisplayDriverList::3:: Start.";
    QStringList strlistDriver;
    QFile driverFile(QString(DRIVERSFILE));
    if(driverFile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&driverFile);
        while (!in.atEnd())
            strlistDriver << in.readLine();
        driverFile.close();
    }

    strlistDriver.removeOne(QString("vesa"));

    qDebug() << "LCore:getDisplayDriverList::3:: return strlistDriver = " << strlistDriver;
    return strlistDriver;
}

QString LCore::GetDefaultPrinter()
{
    qDebug() << "LCore:GetDefaultPrinter::3:: Start.";
    if(!isTableExists("PrinterSettings"))
        return "";

    QSqlQuery query;
    QString qry = "SELECT PrinterName FROM PrinterSettings WHERE DefaultPrinter=1";
    qDebug() << "LCore:GetDefaultPrinter::3:: qry = " << qry;
    if(!query.exec(qry))
        qDebug() << "LCore:GetDefaultPrinter::3:: Table Not Exists";
    else
    {
        QSqlRecord rec = query.record();
        while (query.next())
        {
            for(int i=0 ; i < rec.count(); i++)
            {
                qDebug() << "LCore:GetDefaultPrinter::3:: return  = " << query.value(i).toString();
                return query.value(i).toString();
            }
        }
    }
    qDebug() << "LCore:GetDefaultPrinter::3:: return "" ";
    return "";
}

QStringList LCore::GetPrinterList()
{
    qDebug() << "LCore:GetPrinterList::3:: Start.";
    QStringList prnList;
    if(!isTableExists("PrinterSettings"))
        return prnList;

    QSqlQuery query;
    QString qry = "SELECT PrinterName FROM PrinterSettings";
    qDebug() << "LCore:GetPrinterList::3:: qry = " << qry;
    if(!query.exec(qry))
        qDebug() << "LCore:GetPrinterList::3:: Table Not Exists";
    else
    {
        QSqlRecord rec = query.record();
        while (query.next())
        {
            for(int i=0 ; i < rec.count(); i++)
            {
                qDebug() << "LCore:GetPrinterList::3::record = " << query.value(i).toString();
                prnList << query.value(i).toString();
            }
        }
    }

    qDebug() << "LCore:GetPrinterList::3:: return prnList = " << prnList;
    return prnList;
}

// cppcheck-suppress unusedFunction
void LCore::ExecuteMouseSettings()  //Aash
{
    qDebug() << "LCore:ExecuteMouseSettings::3:: Start.";
    if(!isTableExists(QString("mouseSettings")))
        return;

    QStringList data = readTable("mouseSettings", "");
    if(!data.isEmpty())
    {
        QProcess::execute("killall unclutter");
        if(data.at(1) != "0")
        {
            QStringList arguments;
            arguments << "-root" << "-idle" << data.at(1) << "-noevents" << "-visible";
            QProcess::startDetached("unclutter", arguments);
        }
        QStringList mouseIDList;
        QString cmd="xinput";
        QStringList argMouse;
        argMouse<<"--list";
        QProcess *proc = new QProcess();
        proc->start(cmd,argMouse);
        proc->waitForFinished(-1);
        while (!proc->atEnd())
        {
            QString line = proc->readLine();
            if(line.contains("Mouse"))
                mouseIDList<<line.section("id=",-1,-1).section("\t",0,0);
        }
        delete proc;

        QString deviceAccel = "Device Accel Constant Deceleration";

        for(int i = 0; i < mouseIDList.length(); i++)
            QProcess::execute("xinput --set-prop "+mouseIDList.at(i) + " \"" + deviceAccel + "\" " + data.at(0));

        if(data.at(2) == "1")
            system("xmodmap -e \"pointer = 3 2 1\"");
        else
            system("xmodmap -e \"pointer = 1 2 3\"");
    }
    qDebug() << "LCore:ExecuteMouseSettings::3:: End.";
}

// cppcheck-suppress unusedFunction
QStringList LCore::FillConnectionFailoverOption()
{
    qDebug() << "LCore:FillConnectionFailoverOption::3:: Start.";
    QStringList AllConnectionsList;
    AllConnectionsList << "None";

    QList<QStringList> connList = readCompleteTable("ConnectionTable", "");
    for(int i=0; i<connList.count(); i++ )
    {
        QStringList list = connList.at(i);
        AllConnectionsList << list.at(0)+":"+list.at(1);
    }

    qDebug() << "LCore:FillConnectionFailoverOption::3:: return AllConnectionsList = " << AllConnectionsList;
    return AllConnectionsList;
}

// cppcheck-suppress unusedFunction
void LCore::Modify_DB(const QString& filePath, const QString& propertyName, const QString& propertyValue)          //Aash 26-06-13
{
    qDebug() << "LCore:Modify_DB::3:: Start.";
    qDebug() << "LCore:Modify_DB::3:: args : propertyName = " << propertyName << " propertyValue = " << propertyValue;
    QStringList lines;
    QFile fileread(filePath);
    if (!fileread.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    QTextStream in(&fileread);
    while (!in.atEnd()) {
        QString line = in.readLine();
        if(line.startsWith(propertyName))
        {
            line = propertyName + "=" + propertyValue;
            lines += line;
        }
        else
            lines += line;
    }
    fileread.close();

    QFile filewrite(filePath);
    if (!filewrite.open(QIODevice::WriteOnly | QIODevice::Text))
        return;

    QTextStream out(&filewrite);
    for (int i = 0; i < lines.size(); ++i)
        out << lines.at(i) << "\n";
    filewrite.close();
    sync();
    qDebug() << "LCore:Modify_DB::3:: End.";
}

QString LCore::getMac() //Nikhil Parte
{
    qDebug() << "LCore:getMac::3:: Start.";
    int sock;
    struct ifreq ifr;
    QString macaddress;

    memset(&ifr, 0x00, sizeof(ifr));
    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP);
    //strcpy(ifr.ifr_name, getEthernetDevice().toLatin1().data());
    strcpy(ifr.ifr_name, ListEthernetInterfaces().at(0).toLatin1().data());
    if (ioctl(sock, SIOCGIFHWADDR, &ifr) < 0)
        return macaddress;

    ostringstream out;
    for(int s = 0; s < 6; s++)
    {
        out << hex << setfill('0') << setw(2) << uppercase << static_cast<int>(ifr.ifr_hwaddr.sa_data[s] & 0xff);
        if(s < 5)
            out << ":";
    }

    macaddress = QString::fromStdString(out.str());
    qDebug() << "LCore:getMac::3:: return macaddress = " << macaddress;
    return macaddress;
}

QString LCore::getMacForWifi()
{
    qDebug() << "LCore:getMacForWifi::3:: Start.";
    int sock;
    struct ifreq ifr;
    QString macaddress;

    memset(&ifr, 0x00, sizeof(ifr));
    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP);
    if(ListWirelessInterfaces().count())
        strcpy(ifr.ifr_name, ListWirelessInterfaces().at(0).toLatin1().data());
    if (ioctl(sock, SIOCGIFHWADDR, &ifr) < 0)
    {
        qDebug() << "LCore:getMacForWifi::3:: return MacAddress = " << macaddress;
        return macaddress;
    }

    ostringstream out;
    for(int s = 0; s < 6; s++)
    {
        out << hex << setfill('0') << setw(2) << uppercase << static_cast<int>(ifr.ifr_hwaddr.sa_data[s] & 0xff);
        if(s < 5)
            out << ":";
    }

    macaddress = QString::fromStdString(out.str());

    qDebug() << "LCore:getMacForWifi::3:: return macaddress = " << macaddress;
    return macaddress;
}

QString LCore::getEthernetDevice() //Nikhil Parte
{
    qDebug() << "LCore:getEthernetDevice::3:: Start.";
    QString ethdev = "eth0";
    struct ifaddrs *ifaddr, *ifa;

    if (getifaddrs(&ifaddr) == -1)
    {
        qDebug() << "LCore:getEthernetDevice::3:: return EthDev = " << ethdev;
        return ethdev;
    }

    for (ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next)
    {
        //int family = ifa->ifa_addr->sa_family;
        if(strncmp(ifa->ifa_name, "eth", 3) == 0)
        {
            ethdev = QString(ifa->ifa_name);
            bool bStatus = getNetworkDeviceLinkStatus(ethdev, QString("Ethernet"));
            if(bStatus == true)
            {
                break;
            }
            ethdev.clear();
        }
    }
    freeifaddrs(ifaddr);

    if(ethdev.isEmpty() == true)
    {
        ethdev = "eth0";
    }

    qDebug() << "LCore:getEthernetDevice::3:: return ethdev = " << ethdev;
    return ethdev;
}

bool LCore::isValidIP(const string& strIP)    //Nikhil Parte
{
    qDebug() << "LCore:isValidIP::3:: Start.";
    struct sockaddr_in sa;
    int result = inet_pton(AF_INET, strIP.c_str(), &(sa.sin_addr));
    return result != 0;
}

QString LCore::updateTable(const QString& tableName, const QStringList& columnNameValues, const QString& PrimaryKey)    //Aash 4-6-13 (modified)
{
    qDebug() << "LCore:updateTable::3:: Start.";
    qDebug() << "LCore:updateTable::3:: args : tableNeme = " << tableName << " columnNameValues = "
             << columnNameValues << " primaryKey = " << PrimaryKey ;

    QSqlQuery query;
    QString qry = "UPDATE "+tableName+" SET ";
    for(int i=0; i<columnNameValues.count(); i++)
    {
        qry.append(columnNameValues.at(i));
        qry.append(", ");
    }

    qry = qry.left(qry.length()-2);
    if(!PrimaryKey.isEmpty())
    {
        qry.append(" WHERE ");
        qry.append(PrimaryKey);
    }
    qDebug() << "LCore:updateTable::3::  Query = " << qry;

    if(query.exec(qry))
    {
        qDebug() << "LCore:updateTable::3:: return Update Successfull.";
        return "Update Successfull";
    }
    else
    {
        qDebug() <<"LCore:updateTable::3:: return error = " << query.lastError();
        return "Unsuccessfull";
    }
    qDebug() << "LCore:updateTable::3::return  Update UnSuccessfull.";
    return "Unsuccessfull";
}


QStringList LCore::getResolutionList(const QString& display)
{    
    qDebug() << "LCore:getResolutionList::3:: Start." << display;

    QString output1,output2,output3,output4;
    QProcess *proc = new QProcess();
    proc->start("xrandr.orig");
    proc->waitForFinished(-1);
    while(!proc->atEnd())
    {
        QString line = QString(proc->readLine());
        QString strOutput = line.section(' ', 0, 0);
        QString strStatus = line.section(' ', 1, 1);
        QString strPrimary = line.section(' ', 2, 2);

        if(strStatus == QString("connected"))
        {
            if(strPrimary == QString("primary"))
                output1 = strOutput;
            else if(output2.isEmpty() == true)
                output2 = strOutput;
            else if(output3.isEmpty() == true)
                output3 = strOutput;
            else if(output4.isEmpty() == true)
                output4 = strOutput;
        }
    }
    delete proc;

    QMap<QString, QString> mapDisplay;
    mapDisplay.insert(QString("1"), output1);
    mapDisplay.insert(QString("2"), output2);
    mapDisplay.insert(QString("3"), output3);
    mapDisplay.insert(QString("4"), output4);

    QStringList lines;
    bool bStartAdding = false;

    proc = new QProcess();
    proc->start("xrandr.orig");

    proc->waitForFinished(-1);

    while(!proc->atEnd())
    {
        QString line = QString(proc->readLine()); // do not use simplified here

        if(line.contains(" connected ") == true)
        {
            QString strOutput = line.section(' ', 0, 0);

            if(mapDisplay.value(display) == strOutput)
            {
                bStartAdding = true;
            }
            else
            {
                bStartAdding = false;
            }
            continue;
        }
        else if(line.contains(" disconnected ") == true)
        {
            bStartAdding = false;
        }

        if(bStartAdding == true)
        {
            lines << line.trimmed();
        }
    }
    delete proc;
    return lines;

    /*QString strBoardSeries;
    strBoardSeries = getVGAcard().trimmed();

    QStringList lines;
    QProcess *proc = new QProcess();
    proc->start("xrandr.orig");

    proc->waitForFinished(-1);
    bool bStartAdding = false;
    int nCurrentDisplay = 0;

    bool bPrimary = false;

    while(!proc->atEnd())
    {
        QString line = proc->readLine(); // do not use simplified here

        QString strSecond = line.section(" ", 1, 1);
        /// Changes for Dual Display @ 5 April 2017
        if(strSecond == QString("connected")&& line.section(" ", 2, 2)== "primary" && !line.startsWith("  "))
            bPrimary = true;

        if(strSecond == QString("connected") && line.section(" ", 2, 2) != "primary" && !line.startsWith("  "))
            bPrimary = false;

        if(bStartAdding && strSecond != QString("connected") && !line.startsWith("  "))
            bStartAdding = false;
        else if(strSecond == QString("connected"))
        {
            bStartAdding = true;
            nCurrentDisplay++;
        }
        else if(bStartAdding && ((display.toInt() == 1 && bPrimary) || (display.toInt()== 2 && !bPrimary && nCurrentDisplay == 2) || (display.toInt() == 3 && !bPrimary && nCurrentDisplay == 3) || (display.toInt() == 4 && !bPrimary && nCurrentDisplay == 4)))
        {
            if(!line.contains("i") || !line.contains("x"))  // added second condition for Etihad Airways
            {
                if(!line.contains("HSync") && !line.contains("h:") && !line.contains("v:") )
                {
                    lines << line.simplified();
                }
            }
        }

        if(line.startsWith("DP2") && (strBoardSeries.contains("Z36xxx") || strBoardSeries.contains("Z37xxx")) && strSecond == QString("connected"))
            display = "2";
    }
    delete proc;
    if(qgetenv("OSPROJECT") == "McD" && !lines.count() && display == "2")
        lines = getResolutionList("1");


    qDebug() << "LCore:getResolutionList::3:: return lines = " << lines;
    return lines;*/
}

QStringList LCore::getMultiMonitorResolutionList(QString strDisplay)
{
    qDebug() << "LCore:getMultimonitorResolutionList::3:start";
    QStringList lines;
    QProcess *proc = new QProcess();
    proc->start("xrandr.orig");
    proc->waitForFinished(-1);
    bool bStartAdding = false;
    int nCurrentDisplay = 0;

    while(!proc->atEnd())
    {
        QString line = proc->readLine(); // do not use simplified here
        if(line.contains(strDisplay))
        {
            while(!proc->atEnd())
            {
                line = proc->readLine();
                if(!line.startsWith("   "))
                    break;
                if((line.contains("HSync")) || (line.contains("VSync")))
                    break;

                QString strSecond = line.section(" ", 1, 1);

                if(bStartAdding && strSecond != QString("connected") && !line.startsWith("  "))
                    bStartAdding = false;
                else if(strSecond == QString("connected"))
                {
                    bStartAdding = true;
                    nCurrentDisplay++;
                }

                if(!line.contains("i") || !line.contains("x"))
                    lines << line.simplified();
            }
        }
    }
    delete proc;

    qDebug() << "LCore:getMultimonitorResolutionList::3:: return lines = " << lines;
    qDebug() << "LCore:getMultimonitorResolutionList::3:stop";
    return lines;
}

QMap<QString, QString> LCore::getEthernetInfo()
{
    qDebug() << "LCore:getEthernetInfo::3:: Start.";
    QString ethDevice = getEthernetDevice();
    QProcess proc;
    QString Speed, LinkModes;
    QStringList arguments;
    QMap<QString, QString> InfoList;
    arguments << ethDevice;
    proc.start("ethtool", arguments);
    proc.waitForFinished(-1);
    int check = 0;
    while (!proc.atEnd())
    {
        QString line = proc.readLine();
        if(line.contains("Supported link modes:"))
            check = 1;
        if(line.contains("Supports auto-negotiation:"))
        {
            check = 0;
            if(line.section(":", 1, 1).simplified() == "Yes")
                LinkModes.append("Auto select");
            check = 0;
        }
        if(check)
        {
            QString str = getLinkModes(line);
            if(str.length())
                LinkModes.append(str+",");
        }

        InfoList.insert("LinkMode", LinkModes);

        if(line.contains("Speed:"))
            Speed.append(line.section(":", 1, 1).simplified());

        if(line.contains("Duplex:"))
        {
            line = line.simplified();
            QString tmp = " "+line.section(":", 1, 1).simplified()+"-"+line.section(":", 0, 0);
            Speed.append(tmp);
            InfoList.insert("Speed", Speed);
        }
        if(line.contains("Supports Wake-on:"))
        {
            InfoList.insert("d", "Disabled");
            QString str = line.section(":", 1, 1).simplified();
            for(int i = 0; i < str.length(); i++)
            {
                switch(str.at(i).toAscii())
                {
                case 'p':
                    InfoList.insert("p", "PHY activity");
                    break;
                case 'u':
                    InfoList.insert("u", "Unicast messages");
                    break;
                case 'm':
                    InfoList.insert("m", "Multicast messages");
                    break;
                case 'b':
                    InfoList.insert("b", "Broadcast messages");
                    break;
                case 'a':
                    InfoList.insert("a", "ARP");
                    break;
                case 'g':
                    InfoList.insert("g", "Magic Packet");
                    break;
                }
            }
        }

        if(line.contains("Wake-on:") && !line.contains("Supports Wake-on:"))
            InfoList.insert("WakeOn", line.section(":", 1, 1));
    }
    qDebug() << "LCore:getEthernetInfo::3:: return InfoList = " << InfoList;
    return InfoList;
}

QString LCore::getLinkModes(QString line)
{
    qDebug() << "LCore:getLinkModes::3:: Start.";
    if(line.simplified().length())
    {
        if(line.contains(":"))
            line = line.section(":", 1,1);
        line = line.simplified();
        QString str = line.section("/", 0, 0).simplified();
        QString newStr;
        for(int i = 0; i < str.length(); i++)
        {
            if(str.at(i) >= '0' && str.at(i) <= '9')
                newStr.append(str.at(i));
        }
        if(newStr.length())
        {
            if(newStr.length() > 3)
            {
                newStr = QString::number(newStr.toInt()/1000);
                newStr.append(" Gbps");
            }
            else
                newStr.append(" Mbps");

            QString LinkModes;
            if(line.section(" ", 0, 0).section("/",1,1).length())
            {
                LinkModes = newStr;
                LinkModes.append(" "+line.section(" ", 0,0).section("/",1,1)+"-Duplex");

                LinkModes.append(","+newStr.append(" "+line.section(" ", 1,1).section("/",1,1)+"-Duplex"));
            }
            else
                LinkModes = newStr.append(" "+line.section("/",1,1)+"-Duplex");

            qDebug() << "LCore:getLinkModes::3:: return LinkModes = " << LinkModes;
            return LinkModes;
        }
        else
        {
            qDebug() << "LCore:getLinkModes::3:: return "" ";
            return "";
        }
    }
    else
        return "";
}

//for modifying start menu file of icewm
void LCore::ModifyStartMenu(QString Name, QString cmd, int value)
{
    qDebug() << "LCore:ModifyStartMenu::3:: Start.";
    qDebug() << "LCore:ModifyStartMenu::3:: args : Name = " << Name << " cmd = " << cmd << " value = " << value;

    QString Tmpfile = QString("/tmp/.menu");

    QFile mfile(QString(MENU_FILE));
    if(!CheckforFileContents(QString(MENU_FILE))) //&& QFile(MENU_UPDATED_FILE).exists())
    {
        for(int i =0; i<3; i++)
        {
            int nStatus;
            if(CheckforFileContents(QString(MENU_UPDATED_FILE)))
            {
                nStatus = system(QString("cp -f "+QString(MENU_UPDATED_FILE)+" "+QString(MENU_FILE)).toLatin1());
                system(QString("echo \"Coping... /data/menu.updated to /usr/share/icewm/menu Status = %1 %2\" >> /data/.menuLog").arg(nStatus==0?"Succesfull":"Unsuccesfull").arg(QDateTime::currentDateTime().toString()).toLatin1());
            }
            else
            {
                nStatus=system(QString("cp -f "+QString(MENU_ORIG_FILE)+" "+QString(MENU_FILE)).toLatin1());
                system(QString("echo \"Coping... /data/menu.orig to /usr/share/icewm/menu Status = %1 %2\" >> /data/.menuLog").arg(nStatus==0?"Succesfull":"Unsuccesfull").arg(QDateTime::currentDateTime().toString()).toLatin1());
            }
            sync();

            if(!nStatus)
                break;
            else if(i==2)
                QProcess::execute("reboot");
        }
        sync();
    }
    QFile tfile(Tmpfile);
    QString iconpath;

    if(!mfile.open(QIODevice::ReadOnly | QIODevice::Text ))
        return ;

    if (!tfile.open(QIODevice::WriteOnly | QIODevice::Text ))
        return ;

    switch (value)
    {
    case 1:     iconpath = "RDP.png";           break;
    case 2:     iconpath = "ICA.png";           break;
    case 3:     iconpath = "X11.png";           break;
    case 4:     iconpath = "VMView.png";        break;
    case 5:     iconpath = "Firefox.png";       break;
    case 6:     iconpath = "PNAgent.png";       break;
    case 7:     iconpath = "FreeRDP.png";       break;
    case 8:     iconpath = "VNC.png";           break;
    case 9:     iconpath = "ShellScript.png";   break;
    case 10:    iconpath = "REXEC.png";         break;
    case 11:    iconpath = "SSH.png";           break;
    case 12:    iconpath = "Spice.png";         break;
    case 13:    iconpath = "2X-Client.png";     break;
    case 14:    iconpath = "PowerTerm.png";     break;
    case 15:    iconpath = "VPN.png";           break;
    case 16:    iconpath = "VWorkspace.png";    break;
    case 17:    iconpath = "SFTP.png";          break;
    case 18:    iconpath = "Chrome.png";        break;
    case 19:    iconpath = "PCOIPClient.png";   break;
    case 20: iconpath = "Edge.png";             break;


    }

    bool bApplications = false;
    bool bConnections = false;
    QString strCompare;
    if(value == 100)
    {
        strCompare = QString("menu \"Applications\"");
        bApplications = true;
    }
    else
    {
        strCompare = QString("menu \"Connections\"");
        bConnections = true;
    }

    bool bFoundAppConn = false;
    bool bAppsAdded = false;
    bool bConnAdd = true   ;

    QTextStream in(&mfile);
    QTextStream out(&tfile);

    while(!in.atEnd())
    {
        QString strLine = in.readLine();

        if(!strLine.contains("Sleep"))  // made chnages for adding sleep option in startmenu on 21-Feb-2017
        {
            if(bFoundAppConn && (strLine.startsWith('}') || ((bConnections || bApplications)  && strLine.startsWith("#}"))))
            {
                if(value && bConnections && bConnAdd)
                {
                    out << "\tprog \"" << Name << "\" \"/usr/os-bin/images/" << iconpath << "\" " << cmd << "\n";
                    bConnAdd = false;
                }

                bApplications = false;
                bConnections = false;
                bFoundAppConn = false;
            }

            if(!bFoundAppConn && strLine.startsWith(strCompare) && (bConnections || bApplications))
            {

                if(bApplications)
                    out << strLine << "\n";
                bFoundAppConn = true;
            }

            if(strLine.contains(QString("#menu \"Connections\"")) && bConnections)
            {
                bFoundAppConn=true;
            }
            if(strLine.contains(QString("#menu \"Applications\"")) && bApplications)
            {
                out << strLine << "\n";
                bFoundAppConn=true;
            }

            if(bFoundAppConn && bConnections)
            {
                QString strContains = QString("prog \"%1\"").arg(Name);
                bool bStatus = strLine.contains(strContains) && strLine.contains(iconpath) && strLine.contains(cmd);

                if(bConnAdd && value && bStatus)
                    bConnAdd = false;

                if(!value && bStatus)
                {
                    bConnAdd = false;
                    continue;
                }
                else
                {
                    out << strLine << "\n";
                }
            }
            else if(bFoundAppConn && bApplications)
            {
                if(bAppsAdded) continue;

                QStringList strlist = readTable("PackageInfo", "Parent!='Parent' and Parent!='' and Parent!='None' and InstalledStatus='Installed' AND AddToMenu=1", "distinct Parent");
                if(strlist.count())
                {
                    bAppsAdded = true;

                    QStringList strlistCategory;

                    for(int i = 0; i < strlist.count(); i++)
                    {
                        QString strCategory = strlist.at(i);
                        QString strWhereClause = QString("PackageName='%1' and Parent!='Parent' and Parent!='' and Parent!='None'").arg(strCategory);
                        QStringList strlistParent = readTable("PackageInfo", strWhereClause, "Parent");
                        if(!strlistParent.count())
                            strlistCategory << strCategory;
                    }

                    for(int i = 0; i < strlistCategory.count(); i++)
                    {
                        QString strCategory = strlistCategory.at(i);
                        QString strWhereClause = QString("Parent='%1' AND AddToMenu=1").arg(strCategory);
                        out << "\tmenu \"" << strCategory << "\" \"/usr/os-bin/images/folder.png\" {\n";
                        QStringList strlistParent = readTable("PackageInfo", strWhereClause, "PackageName,Icon");
                        for(int j = 0; j < strlistParent.count(); j += 2)
                        {
                            QString strParent = strlistParent.at(j);
                            QString strParentIcon = strlistParent.at(j+1);
                            QString strWhereClauseNew = QString("Parent='%1' AND AddToMenu=1").arg(strParent);
                            QStringList strlistChildren = readTable("PackageInfo", strWhereClauseNew, "PackageName,Icon");
                            if(!strlistChildren.count())
                                out << "\t\tprog \"" << strParent << "\" \"" << strParentIcon << "\" xalf -l \"" + strParent + "\" -s LaunchApplication \"" << strParent << "\"\n";
                            else
                            {
                                out << "\t\tmenu \"" << strParent << "\" \"" + strParentIcon + "\" {\n";
                                for(int k = 0; k < strlistChildren.count(); k += 2)
                                {
                                    QString strChild = strlistChildren.at(k);
                                    QString strChildIcon = strlistChildren.at(k+1);
                                    out << "\t\t\tprog \"" << strChild << "\" \"" << strChildIcon << "\" xalf -l \"" + strChild + "\" -s LaunchApplication \"" << strChild << "\"\n";
                                }
                                out << "\t\t}\n";
                            }
                        }
                        out << "\t}\n";
                    }
                }
            }
            else
                out << strLine << "\n";
        }
    }
    // made chnages for adding sleep option in startmenu on 21-Feb-2017
    QStringList propertylist = readTable("TaskbarProperties", "");
    bool ncheck = isTableExists("TaskbarProperties");

    QStringList strlist = readTable("SysConf", "Property='S3'", "Value");
    QString strDriverName;
    QStringList strlistDriverName;
    QStringList strMultiDisplay = readDefaultsValue("EnableMultiDisplay");
    if(!strMultiDisplay.isEmpty() && strMultiDisplay.at(0).toInt())
    {
        strlistDriverName = readTable(QString("MultipleDisplay"), "PrimaryDisplay=2" );
        if(!strlistDriverName.isEmpty())
            strDriverName = strlistDriverName.at(1);
    }
    else
    {
        strlistDriverName = readTable(QString("DisplaySettings"), "");
        if(!strlistDriverName.isEmpty())
            strDriverName = strlistDriverName.at(0);
    }
    if((strlist.count() && strlist.at(0) == "1") && (strDriverName != "vesa"))
    {
        QString str ="prog \"Sleep\" \"/usr/os-bin/images/Hibernate.png\"  /usr/os-bin/OS_Desktop --hibernate";

        if(ncheck)
        {
            if(propertylist.at(18).toInt())
                out << str;
            else if(!propertylist.at(18).toInt() )
                out << "#"+str;

        }
        else
        {
            out<<str;
        }
    }

    bool bIsBEL = false;
    QStringList  strlistCheckBEL = readDefaultsValue("BELEnable");
    if(strlistCheckBEL.count() && strlistCheckBEL.at(0).toInt())
    {
        bIsBEL = true;
    }

    QStringList enableImprivata = readTable("SysConf", "Property='Imprivata'", "Value");
    QStringList checkImprivata = readDefaultsValue("Imprivata");
    bool nimprivata = false;

    if(!checkImprivata.isEmpty() && checkImprivata.at(0) == "Active" && !enableImprivata.isEmpty() && enableImprivata.at(0) == "Enable")
    {
        nimprivata = true;
    }

    tfile.close();
    mfile.close();

    // 29/03/17---- Mayur ---- for handling UserInterface Start Menu Properties

    if(ncheck)
    {
        if(propertylist.count())
        {
            QFile tmpfile(Tmpfile);
            if (!tmpfile.open(QIODevice::ReadOnly | QIODevice::Text ))
                return ;

            QString strParantCheck="None";
            QStringList strList;
            QTextStream outfile(&tmpfile);
            while(!outfile.atEnd())
            {
                QString strLine = outfile.readLine();

                if(strLine.contains("Reboot"))
                {
                    if(propertylist.at(15).toInt() && strLine.startsWith("#"))
                        strList << strLine.remove("#");
                    else if(!propertylist.at(15).toInt() &&  !strLine.startsWith("#"))
                        strList << "#"+strLine;
                    else
                        strList << strLine;
                }
                else if(strLine.contains("Shutdown"))
                {
                    if(propertylist.at(16).toInt() && strLine.startsWith("#"))
                        strList << strLine.remove("#");
                    else if(!propertylist.at(16).toInt() &&  !strLine.startsWith("#"))
                        strList << "#"+strLine;
                    else
                        strList << strLine;
                }
                else if(strLine.contains("Logout"))
                {
                    if(propertylist.at(17).toInt() && strLine.startsWith("#"))
                        strList << strLine.remove("#");
                    else if(!propertylist.at(17).toInt() &&  !strLine.startsWith("#"))
                        strList << "#"+strLine;
                    else
                        strList << strLine;
                }
                else if(strLine.contains("Sleep"))
                {
                    if(propertylist.at(18).toInt() && strLine.startsWith("#"))
                        strList << strLine.remove("#");
                    else if(!propertylist.at(18).toInt() &&  !strLine.startsWith("#"))
                        strList << "#"+strLine;
                    else
                        strList << strLine;
                }
                else if(strLine.contains("Lock Screen"))
                {
                    if(bIsBEL)
                    {
                        if(!strLine.startsWith("#"))
                            strList << "#"+strLine;
                        else
                            strList << strLine;
                    }
                    else
                    {
                        if(propertylist.at(19).toInt() && strLine.startsWith("#") && !nimprivata)
                            strList << strLine.remove("#");
                        else if(!propertylist.at(19).toInt() &&  !strLine.startsWith("#") || nimprivata)
                            strList << "#"+strLine;
                        else
                            strList << strLine;
                    }
                }
                else if(strLine.contains("Control Center"))
                {
                    if(propertylist.at(20).toInt() && strLine.startsWith("#"))
                        strList << strLine.remove("#");
                    else if(!propertylist.at(20).toInt() &&  !strLine.startsWith("#"))
                        strList << "#"+strLine;
                    else
                        strList << strLine;
                }
                else if(strLine.contains("Connection Manager"))
                {
                    if(propertylist.at(21).toInt() && strLine.startsWith("#"))
                        strList << strLine.remove("#");
                    else if(!propertylist.at(21).toInt() &&  !strLine.startsWith("#"))
                        strList << "#"+strLine;
                    else
                        strList << strLine;
                }
                else if(strLine.contains("menu \"Applications\""))
                {
                    strParantCheck="Application";
                    if(propertylist.at(22).toInt() && strLine.startsWith("#"))
                        strList << strLine.remove("#");
                    else if(!propertylist.at(22).toInt() &&  !strLine.startsWith("#"))
                        strList << "#"+strLine;
                    else
                        strList << strLine;
                }
                else if(strLine.contains("menu \"Connections\""))
                {
                    strParantCheck="Connections";
                    if(propertylist.at(23).toInt() && strLine.startsWith("#"))
                        strList << strLine.remove("#");
                    else if(!propertylist.at(23).toInt() &&  !strLine.startsWith("#"))
                        strList << "#"+strLine;
                    else
                        strList << strLine;
                }
                else if(strParantCheck != "None")
                {
                    if(strLine.contains("separator",Qt::CaseSensitive))
                    {
                        if(strParantCheck == "Application")
                        {
                            if(propertylist.at(22).toInt() && strLine.startsWith("#"))
                                strList << strLine.remove("#");
                            else if(!propertylist.at(22).toInt() &&  !strLine.startsWith("#"))
                                strList << "#"+strLine;
                            else
                                strList << strLine;
                        }
                        else if(strParantCheck == "Connections")
                        {
                            if(propertylist.at(23).toInt() && strLine.startsWith("#"))
                                strList << strLine.remove("#");
                            else if(!propertylist.at(23).toInt() &&  !strLine.startsWith("#"))
                                strList << "#"+strLine;
                            else
                                strList << strLine;
                        }
                        strParantCheck = "None";

                    }
                    else
                    {

                        if(strParantCheck == "Application")
                        {
                            if(propertylist.at(22).toInt() && strLine.startsWith("#"))
                                strList << strLine.remove("#");
                            else if(!propertylist.at(22).toInt() &&  !strLine.startsWith("#"))
                                strList << "#"+strLine;
                            else
                                strList << strLine;
                        }
                        else if(strParantCheck == "Connections")
                        {
                            if(propertylist.at(23).toInt() && strLine.startsWith("#"))
                                strList << strLine.remove("#");
                            else if(!propertylist.at(23).toInt() &&  !strLine.startsWith("#"))
                                strList << "#"+strLine;
                            else
                                strList << strLine;
                        }
                    }
                }
                else
                    strList << strLine;
            }
            tmpfile.close();

            if (!tmpfile.open(QIODevice::WriteOnly | QIODevice::Text ))
                return ;

            QTextStream nout(&tmpfile);

            for(int i=0; i<strList.count(); i++)
                nout << strList.at(i) << "\n";
        }
    }
    //--------------------------------------------------------------------


    qDebug() << "LCore:ModifyStartMenu::3:: file exist " << QFile::exists(QString(MENU_FILE));
    sync();
    if(CheckforFileContents(QString(Tmpfile)))
    {
        system(QString("echo \"Coping... reading /tmp/.menu file n writing to to /usr/share/icewm/menu Status and /data/menu.updated = %1 \" >> /data/.menulogs").arg(QDateTime::currentDateTime().toString()).toLatin1());
        qDebug() << "LCore:ModifyStartMenu::3:: removing status = " << QFile::remove(QString(MENU_FILE));
        system(QString("cp -f "+Tmpfile+" "+QString(MENU_UPDATED_FILE)).toLatin1());
        qDebug() << "LCore:ModifyStartMenu::3:: copying status = " << system("cp -f "+Tmpfile.toLatin1()+" "+QString(MENU_FILE).toLatin1());
        sync();
    }
    /// qDebug() << "copying status " << system("cp -f "+Tmpfile.toLatin1()+" "+QString(MENU_FILE).toLatin1());
    QFile::remove(Tmpfile);
    sync();

    qDebug() << "LCore:ModifyStartMenu::3:: End.";
}

void LCore::LaunchPNAgentAppsOnMenu(const QString& connectionName, int value)
{
    qDebug() << "LCore:LaunchPNAgentAppsOnMenu::3:: Start.";
    qDebug() << "LCore:LaunchPNAgentAppsOnMenu::3:: args : connectionName = " << connectionName << " value = " << value;


    bool nShowAppFullName = false;
    QStringList strlistCheckFullAppName = readDefaultsValue("ShowFullAppName");
    if(strlistCheckFullAppName.count() && strlistCheckFullAppName.at(0).toInt())
    {
        nShowAppFullName = true;
    }

    QString Menufile = "/usr/share/icewm/menu";
    QString Tmpfile("/tmp/.menu");

    QFile mfile(Menufile);
    QFile tfile(Tmpfile);
    int flag=0;

    if (!mfile.open(QIODevice::ReadOnly | QIODevice::Text ))
        return ;

    if (!tfile.open(QIODevice::WriteOnly | QIODevice::Text ))
        return ;


    QTextStream out(&tfile);
    QTextStream inmenuFile(&mfile);
    while (!inmenuFile.atEnd()) {
        QString line = inmenuFile.readLine();

        if(line.contains("prog ") && line.contains(QString(MENU_ICON_PATH)+"PNAgent.png") && line.contains("xalf -s LaunchCommand \""+connectionName+"\" PNAgent") )
        {
            flag = 1;
            break;
        }
        //        else if(line.contains("menu \""+connectionName+"\" \"/usr/share/icons/pnagent.png\" {"))
        else if(line.contains("menu \""+connectionName+"\" \""+MENU_ICON_PATH+"PNAgent.png\" {"))
        {
            flag = 2;
            break;
        }
        else
        {
            out << line <<"\n";
        }
    }
    qDebug() << "LCore:LaunchPNAgentAppsOnMenu::3:: flag = " << flag;
    QString pnaFileName = QString(PNAGENT_LIST_DIR) +"pna."+connectionName;
    QFile file(pnaFileName);
    QString strPrimeKey = "Name='"+pnaFileName.section("/",-1).remove("pna.")+"'";
    QStringList strlistConnDetails = readTable("PNAgent", strPrimeKey);

    if((flag==1 || flag==2) && value)
    {
        if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        {}
        else
        {
            out << "\tmenu \""+connectionName+"\" \""+MENU_ICON_PATH+"PNAgent.png\" {\n";
            out << "\t\tprog \"Disconnect\" \""+QString(MENU_ICON_PATH)+"PNAgent.png\" LaunchCommand \""+connectionName+"\" PNAgent 0"+ "\n";

            QTextStream in(&file);
            QString line,strAppName;
            while (!in.atEnd())
            {
                line = in.readLine();
                QString iconpath, appname, cmd;
                if(strlistConnDetails.at(23).trimmed() != QString("PNAgent (Legacy Mode)"))
                {
                    appname = line.section("\t", 0, 0).trimmed().remove("'");
                    qDebug() << "LCore:LaunchPNAgentAppsOnMenu::3:: app_name = " << appname;
                    iconpath = line.section("\t", 2, 2).trimmed().remove("'");
                    qDebug() << "LCore:LaunchPNAgentAppsOnMenu::3:: icon_path = " << iconpath;
                    if(!nShowAppFullName)
                    {
                        strAppName = line.section("\t", 0, 0).remove("'").trimmed().section("(",0,0);
                    }
                    else
                    {
                        strAppName = line.section("\t",0,0).remove("'").trimmed();
                    }
                    appname = connectionName+":"+line.section("\t", 0, 0).trimmed().remove("'").section(")",0,0).section("(",1,1);
                }
                else
                {
                    iconpath = line.section("\t",3,3).section("'",1,1);
                    strAppName =line.section("\t",0,0).section("'",1,1);
                    appname  = line.section("\t",0,0).section("'",1,1);
                }
                cmd = QString("xalf -l \"%1 (%2)\" -s LaunchCommand \"%3\" %4").arg(strAppName, "PNAgent", appname, "PNAgent");
                out << "\t\tprog \""+strAppName+"\" \""+iconpath+"\" "+ cmd + "\n";
            }
            file.close();
            if(flag == 1)
                out << "\t}\n";
        }
    }

    if(value==0 )
    {
        if(flag==2)
        {
            while (!inmenuFile.atEnd())
            {
                QString line = inmenuFile.readLine();
                if(line == "\t}" || line == "#\t}")
                    break;
            }
        }
        if(flag==1 || flag==2)
            out << "\tprog \""+connectionName+"\" \""+MENU_ICON_PATH+"PNAgent.png\" xalf -s LaunchCommand \""+connectionName+"\" PNAgent" << "\n";
    }

    while (!inmenuFile.atEnd())
    {
        QString line = inmenuFile.readLine();
        out << line << "\n";
    }

    tfile.close();
    mfile.close();
    QProcess::execute("sync");

    if(QFile::exists(Menufile))  QFile::remove(Menufile);
    //    QFile::copy( Tmpfile, Menufile);
    system("cp -f "+Tmpfile.toLatin1()+" "+Menufile.toLatin1());
    if(QFile::exists(Tmpfile))  QFile::remove(Tmpfile);
    sync();

    ModifyStartMenu(QString(""),QString(""), 0);
    qDebug() << "LCore:LaunchPNAgentAppsOnMenu::3:: End.";
}

// cppcheck-suppress unusedFunction
void LCore::LaunchFreeRDPAppsOnMenu(QString connectionName, int value)
{
    qDebug() << "LCore:LaunchFreeRDPAppsOnMenu::3:: Start.";
    qDebug() << "LCore:LaunchFreeRDPAppsOnMenu::3:: args : connectionName = " << connectionName << " value = " << value;

    QString Menufile = "/usr/share/icewm/menu";
    QString Tmpfile("/tmp/.menu");

    QFile mfile(Menufile);
    QFile tfile(Tmpfile);
    int flag=0;

    if (!mfile.open(QIODevice::ReadOnly | QIODevice::Text ))
        return ;

    if (!tfile.open(QIODevice::WriteOnly | QIODevice::Text ))
        return ;

    QTextStream out(&tfile);
    QTextStream in(&mfile);

    while (!in.atEnd())
    {
        QString line = in.readLine();
        
        if(line.contains("prog ") && line.contains(QString(MENU_ICON_PATH)+"FreeRDP.png") && line.contains("xalf -s LaunchCommand \""+connectionName+"\" FreeRDP") )
        {
            flag = 1;
            break;
        }
        else if(line.contains("menu \""+connectionName+"\" \""+MENU_ICON_PATH+"FreeRDP.png\" {"))
        {
            flag = 2;
            break;
        }
        else
        {
            out << line <<"\n";
        }
    }
    qDebug() << "LCore:LaunchFreeRDPAppsOnMenu::3:: flag = " << flag;
    QString pnaFileName =QString(RDWeb_LIST_DIR)+QString(connectionName)+QString("/list");
    QFile file(pnaFileName);

    QString primeKey = " Name='";
    if(QString(connectionName).contains(":"))
        primeKey.append(QString(connectionName).section(":",0,0).trimmed()).append("'");
    else
        primeKey.append(QString(connectionName)).append("'");

    if((flag==1 || flag==2) && value)
    {
        if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        {}
        else
        {
            out << "\tmenu \""+connectionName+"\" \""+MENU_ICON_PATH+"FreeRDP.png\" {\n";
            out << "\t\tprog \"Disconnect\" \""+QString(MENU_ICON_PATH)+"FreeRDP.png\" LaunchCommand \""+connectionName+"\" FreeRDP 0"+ "\n";

            QTextStream inRDweb(&file);
            QString line;
            while (!inRDweb.atEnd())
            {
                line = inRDweb.readLine();
                QString iconpath, appname, cmd;
                appname.clear();
                appname = connectionName+ ":" +line.section("\t", 0, 0).trimmed().remove("'");
                qDebug() << "LCore:LaunchFreeRDPAppsOnMenu::3:: app_name = " << appname;
                iconpath = line.section("\t", 1, 1).trimmed().remove("'");
                qDebug() << "LCore:LaunchFreeRDPAppsOnMenu::3:: icon_path = " << iconpath;
                //cmd = "xalf -s LaunchCommand \""+ connectionName+":"+ appname.section("(",1,1).remove(")") +"\" FreeRDP";
                iconpath = "/tmp/.rdweb/"+connectionName+"/"+line.section("\t", 1, 1).trimmed().remove("'");
                appname  = connectionName+ ":" + line.section("\t",0,0).section("'",1,1);
                cmd = "xalf -s LaunchCommand \""+ appname +"\" FreeRDP";
                out << "\t\tprog \""+appname+"\" \""+iconpath+"\" "+ cmd + "\n";
            }
            file.close();
            if(flag == 1)
                out << "\t}\n";
        }
    }

    if(value == 0 )
    {
        if(flag==2)
        {
            while (!in.atEnd())
            {
                QString line = in.readLine();
                if(line == "\t}" || line == "#\t}")
                {
                    break;
                }
            }
        }
        if(flag==1 || flag==2)
        {
            out << "\tprog \""+connectionName+"\" \""+MENU_ICON_PATH+"FreeRDP.png\" xalf -s LaunchCommand \""+connectionName+"\" FreeRDP" << "\n";
        }
    }

    while (!in.atEnd())
    {
        QString line = in.readLine();
        out << line << "\n";
    }
    tfile.close();
    mfile.close();
    QProcess::execute("sync");

    if(QFile::exists(Menufile))  QFile::remove(Menufile);
    system("cp -f "+Tmpfile.toLatin1()+" "+Menufile.toLatin1());
    if(QFile::exists(Tmpfile))  QFile::remove(Tmpfile);
    sync();
    ModifyStartMenu(QString(""),QString(""), 0);
    qDebug() << "LCore:LaunchFreeRDPAppsOnMenu::3:: End.";
}

//for launching applications/connections on start up
void LCore::ModifyStartup(QString cmd, QString startuptime, int value)
{
    qDebug() << "LCore:LaunchFreeRDPAppsOnMenu::3:: Start.";
    qDebug() << "LCore:LaunchFreeRDPAppsOnMenu::3:: args : cmd = " << cmd << " startuptime = " << startuptime << "value = " <<value;

    QString Startupfile = "/usr/share/icewm/startup";
    QString Tmpfile("/tmp/.startup");
    QFile sfile(Startupfile);
    QFile tfile(Tmpfile);

    if(checkrunningProcService("icewm") == true)
    {
        QFile autoStartFile("/tmp/.autoStart");
        if(!QFile::exists("/tmp/.autoStart"))
        {
            if(autoStartFile.open(QIODevice::WriteOnly | QIODevice::Text))
                autoStartFile.close();
        }
    }

    if (!sfile.open(QIODevice::ReadOnly | QIODevice::Text ))
    {
        sfile.open(QIODevice::WriteOnly | QIODevice::Text );
        sfile.close();
        if (!sfile.open(QIODevice::ReadOnly | QIODevice::Text ))
            return;
    }

    if (!tfile.open(QIODevice::WriteOnly | QIODevice::Text ))
        return ;

    QTextStream out(&tfile);
    //==================07Nov13======================
    out << "a=\"/tmp/.autoStart\"" << "\n";
    out << "b=\"/data/.configurationwizard\"" << "\n";
    out << "if [ -f $a ] || [ -f $b ]; then" << "\n";
    out << "echo \"File $a or $b Exist\"" << "\n";
    out << "else" << "\n";
    out << "touch $a" << "\n";
    //===============================================

    while (!sfile.atEnd()) {


        QString line = sfile.readLine();
        if(cmd.contains("xalf"))
            cmd.remove("xalf -s");

        if( (!QString::fromUtf8(gettext(line.toLatin1())).contains(cmd) || !cmd.length()) && QString::fromUtf8(gettext(line.toLatin1())).contains("LaunchCommand") )   //======= 09Jan14 =======
            out << line;
        else if( (!line.contains(cmd) || cmd.length()) && line.contains("LaunchApplication") )   //======= 09Jan14 =======
            out << line;
    }

    if(value == 100)
    {
        QList<QStringList> values = readCompleteTable("PackageInfo","AutoStart=1");

        if(!values.isEmpty())
        {
            for(int i=0; i<values.count(); i++)
            {
                out << "( sleep 10; LaunchApplication \"" + values[i][0].simplified() + "\" ) &" << "\n";
            }
        }
    }
    else if(value != 0)
    {
        if(startuptime.length())
        {
            int nTimeout;
            qDebug()<<"startuptime.toInt()=="<<startuptime.toInt();
            if(startuptime.toInt()<6)
            {
                nTimeout = 5;
            }
            else
            {
                nTimeout = startuptime.toInt();
            }

            if(qgetenv("BOARDARCH") == QString("via-arm"))
                nTimeout = 10;

            out << "( sleep "+QString::number(nTimeout)+";"+ cmd.remove("xalf -s") +" ) &" << "\n";
        }
        else
            out << cmd.remove("xalf -s") << "\n";
    }

    //==================07Nov13======================
    out << "fi" << "\n";
    tfile.close();
    sfile.close();

    if(QFile::exists(Startupfile))  QFile::remove(Startupfile);
    QFile::copy( Tmpfile, Startupfile);
    if(QFile::exists(Tmpfile))  QFile::remove(Tmpfile);
    sync();
    sfile.setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::ExeUser | QFile::ReadGroup | QFile::ExeGroup | QFile::ReadOther | QFile::ExeOther);
    system("sed -i 's/\r//'"+Startupfile.toLatin1());

    qDebug() << "LCore:LaunchFreeRDPAppsOnMenu::3:: End.";
}

//for adding/removing desktop icons on desktop(overridden function)
void LCore::ModifyDesktop(const QString& connectionName, const QString& cmd, int value, const QString& AppImagePath)
{
    qDebug() << "LCore:ModifyDesktop::3:: Start.";

    if(value)
    {
        QString iconpath;
        switch (value)
        {
        case 1: iconpath = "RDP.png";                       break;
        case 2: iconpath = "ICA.png";                       break;
        case 3: iconpath = "X11.png";                       break;
        case 4: iconpath = "VMView.png";                    break;
        case 5: iconpath = "Browser.png";                   break;
        case 6: iconpath = "PNAgent.png";                   break;
        case 7: iconpath = "FreeRDP.png";                   break;
        case 8: iconpath = "VNC.png";                       break;
        case 9: iconpath = "ShellScript.png";               break;
        case 10: iconpath = "REXEC.png";                    break;
        case 11: iconpath = "SSH.png";                      break;
        case 12: iconpath = "Spice.png";                    break;
        case 13: iconpath = "2X-Client.png";                break;
        case 14: iconpath = "PowerTerm.png";                break;
        case 15: iconpath = "VPN.png";                      break;
        case 16: iconpath = "VWorkspace.png";               break;
        case 17: iconpath = "SFTP.png";                     break;
        case 18: iconpath = "Chrome.png";                   break;
        case 19: iconpath = "PCOIPClient.png";              break;
        case 20: iconpath = "Edge.png";                     break;

        case 99:iconpath = "/tmp/icons/"+connectionName.section(":",1,1);   break;
        case 100: iconpath = AppImagePath;                  break;
        }

        QString type;
        if(value != 100)
        {
            iconpath = DESKTOP_ICON_PATH+iconpath;
            type = "Connection";
        }
        else
            type = "Application";


        QString columnType = "Name VARCHAR(100), Date VARCHAR(50), Icon VARCHAR(50), Type VARCHAR(20), Path VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(Name, Path) ";
        QString columnValues = "'"+ connectionName +"', '02/07/2013', '"+ iconpath +"', '"+ type +"', '"+ cmd +"', 0, 0, 0, '', ''";
        writeTable("DesktopWidget", columnType, columnValues, "AppendNew");
    }
    else
        deleteEntry("DesktopWidget", "Name='"+connectionName+"' AND Path='"+cmd+"'");

    updateSharedMemory();
    qDebug() << "LCore:ModifyDesktop::3:: End.";
}

//for adding/removing desktop icons on desktop(please do further changes in this function)
void LCore::ModifyDesktop(const QString& connectionName, const QString& cmd, int value, const QString& AppImagePath, bool bSendSignal)
{
    qDebug() << "LCore:ModifyDesktop::3:: Start.";
    qDebug() << "LCore:ModifyDesktop::3:: args : cmd = " << cmd << " value = " << value << " AppIUmagePath = " << AppImagePath
             << " bSendSignal = " << bSendSignal;

    if(value)
    {
        QString iconpath;
        switch (value)
        {
        case 1: iconpath = "RDP.png";                       break;
        case 2: iconpath = "ICA.png";                       break;
        case 3: iconpath = "X11.png";                       break;
        case 4: iconpath = "VMView.png";                    break;
        case 5: iconpath = "Firefox.png";                   break;
        case 6: iconpath = "PNAgent.png";                   break;
        case 7: iconpath = "FreeRDP.png";                   break;
        case 8: iconpath = "VNC.png";                       break;
        case 9: iconpath = "ShellScript.png";               break;
        case 10: iconpath = "REXEC.png";                    break;
        case 11: iconpath = "SSH.png";                      break;
        case 12: iconpath = "Spice.png";                    break;
        case 13: iconpath = "2X-Client.png";                break;
        case 14: iconpath = "PowerTerm.png";                break;
        case 15: iconpath = "VPN.png";                      break;
        case 16: iconpath = "VWorkspace.png";               break;
        case 17: iconpath = "SFTP.png";                     break;
        case 18: iconpath = "Chrome.png";                   break;
        case 19: iconpath = "PCOIPClient.png";              break;
        case 20: iconpath = "Edge.png";                     break;


        case 99:iconpath = "/tmp/icons/"+connectionName.section(":",1,1);   break;
        case 100: iconpath = AppImagePath;                  break;
        case 111: iconpath = AppImagePath;
        }

        QString type;
        if(value < 100)
        {
            iconpath = DESKTOP_ICON_PATH+iconpath;
            type = "Connection";
        }
        else if(value == 100)
        {
            type = "Application";
        }
        else if(value == 111)
        {
            type = "Shortcut";
        }

        QString columnType = "Name VARCHAR(100), Date VARCHAR(50), Icon VARCHAR(50), Type VARCHAR(20), Path VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(Name, Path) ";
        QString columnValues = "'"+ connectionName +"', '02/07/2013', '"+ iconpath +"', '"+ type +"', '"+ cmd +"', 0, 0, 0, '', ''";
        writeTable("DesktopWidget", columnType, columnValues, "AppendNew");
    }
    else
        deleteEntry("DesktopWidget", "Name='"+connectionName+"' AND Path='"+cmd+"'");

    if(bSendSignal)
        updateSharedMemory();

    qDebug() << "LCore:ModifyDesktop::3:: End.";
}

void LCore::LaunchPNAgentAppsOnDesktop(QString connectionName, int value)
{
    qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: Start.";
    qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: args : connectionName = " << connectionName << " value = " << value;

    bool nShowAppFullName = false;

    QStringList strlistCheckFullAppName = readDefaultsValue("ShowFullAppName");
    qDebug()<<"strlistCheckFullAppName = "<<strlistCheckFullAppName;

    if(strlistCheckFullAppName.count() && strlistCheckFullAppName.at(0).toInt())
    {
        nShowAppFullName = true;
    }

    QString pnaFileName = QString(PNAGENT_LIST_DIR) + "pna."+connectionName.trimmed();
    if(!QFile::exists(pnaFileName))
        return;

    qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: File exist = "<<pnaFileName;
    QFile file(pnaFileName);

    QString strPrimeKey = "Name='"+pnaFileName.section("/",-1).remove("pna.")+"'";
    QStringList strlistConnDetails = readTable("PNAgent", strPrimeKey);

    qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: File exist = "<<pnaFileName;

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
    {}
    else
    {
        QTextStream in(&file);
        QString line;
        while (!in.atEnd())
        {
            line = in.readLine();
            QString iconpath, appname, cmd,strAppName;
            appname.clear();
            qDebug()<<"LCore:LaunchPNAgentAppsOnDesktop::3::  strlistConnDetails.at(23)="<<strlistConnDetails.at(23);
            qDebug()<<"LCore:LaunchPNAgentAppsOnDesktop::3::  line = "<<line;

            if(strlistConnDetails.at(23).trimmed() != QString("PNAgent (Legacy Mode)"))
            {
                if(nShowAppFullName)
                {
                    strAppName = line.section("\t",0,0).remove("'").trimmed();
                }
                else
                {
                    strAppName = line.section("\t", 0, 0).remove("'").trimmed().section("(",0,0);
                }
                appname = connectionName+":"+line.section("\t", 0, 0).trimmed().remove("'").section(")",0,0).section("(",1,1);
                qDebug() << "\n\n222LCore:LaunchPNAgentAppsOnDesktop::3:: app_name = " << appname;
                iconpath = line.section("\t", 2, 2).trimmed().remove("'");
                if(iconpath.isEmpty())
                {
                    iconpath = "/usr/os-bin/images/DesktopConnectionDefaultIcon.png";
                }
                qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: icon_path = " << iconpath;
            }
            else
            {
                strAppName =line.section("\t",0,0).section("'",1,1);
                iconpath = line.section("\t",3,3).section("'",1,1);
                if(iconpath.isEmpty())
                {
                    iconpath = "/usr/os-bin/images/DesktopConnectionDefaultIcon.png";
                }
                appname  = connectionName+ ":" + line.section("\t",0,0).section("'",1,1);
            }
            cmd = QString("xalf -l \"%1 (%2)\" -s LaunchCommand \"%3\" %4").arg(strAppName, "PNAgent", appname, "PNAgent");
            qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: cmd : " << cmd;
            qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: strAppName : " << strAppName;

            if(value)
            {
                QString columnType = "Name VARCHAR(100) , Date VARCHAR(50), Icon VARCHAR(50), Type VARCHAR(20), Path VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(Name, Path) ";
                QString columnValues = "'"+ strAppName.trimmed() +"', '02/07/2013', '"+ iconpath +"', 'Connection', '"+ cmd +"', 0, 0, 0, '', ''";
                qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: columnValues = "<<columnValues;
                qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: writeTable = "<<writeTable("DesktopWidget", columnType, columnValues, "AppendNew");
            }
            else
            {
                qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: delete icons status :" << deleteEntry("DesktopWidget", "Name='"+strAppName.trimmed()+"' AND Path='"+cmd+"'");
            }
        }
        file.close();
    }

    qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: before updateSharedMemory";
    updateSharedMemory();
    qDebug() << "LCore:LaunchPNAgentAppsOnDesktop::3:: End.";
}

void LCore::detach()
{
    qDebug() << "LCore:detach::3:: Start.";
    if (!sharedMemory.detach())
        qDebug() << "LCore:detach::3:: Unable to detach from shared memory.";

    qDebug() << "LCore:detach::3:: End.";
}

//executed for configuring netwok for ethernet/wireless
void LCore::ExecuteNetworkSettings(QString device, int invokeType)
{
    qDebug() << "LCore:ExecuteNetworkSettings::3:: Start.";
    qDebug() << "LCore:ExecuteNetworkSettings::3:: args : device = " << device << " invokeType = " << invokeType;

    int NetworkMode = 2, ManualDNSEntry = 0 ,Security802Status = 0;
    QStringList arguments;
    QString IPAddress, SubnetMask, PrimaryDNS, SecondaryDNS, WakeOn, LinkMode, Domain, Hostname;
    QString Speed, Router, values, NetworkType, columnTypeN, ntpServers, OSConf, OSUpgrade, WifiSecurity, licManager,OSWSL,dhcpServerIdentifier;

    if(device == getEthernetDevice())
        NetworkType = "Ethernet";
    else
        NetworkType = "Wireless";

    QStringList strHostnameList = readTable("SysConf", "Property='Hostname'", "Value");
    if(!strHostnameList.isEmpty())
    {
        Hostname = strHostnameList.at(0);
    }
    // Nikhil

    if(NetworkType == "Ethernet")
    {
        /* commented code 16 Aug
        bool bEthernetConnected = getWiredInterfaceConnectedStatus();

        if(bEthernetConnected == false)
        {
            qDebug() << "Ethernet is not connected";
            return;
        }
        */

        //this file is checked because ethernet network is applied from OS_Desktop and network UI
        if(QFile::exists("/tmp/.applyingnetwork"))
            return;

        QFile tfile(QString("/tmp/.applyingnetwork"));
        if(tfile.open(QIODevice::WriteOnly | QIODevice::Text))
            tfile.close();
        sync();
    }
    else
    {
        //this file is checked because wireless network is applied from OS_Desktop and network UI
        if(QFile::exists("/tmp/.applyingwifi"))
            return;

        QFile tfile(QString("/tmp/.applyingwifi"));
        if(tfile.open(QIODevice::WriteOnly | QIODevice::Text))
            tfile.close();
        sync();
    }

    if(QFile::exists(BEFORENETWORKSCRIPT))
    {
        QProcess *proc = new QProcess();
        proc->start(QString(BEFORENETWORKSCRIPT));
        //  QProcess::startDetached(QString(BEFORENETWORKSCRIPT));
        sync();
    }

    QStringList outputValues = readTable("Network8021x", "", "EnableSecurity");
    if(outputValues.count())
        Security802Status = QString(outputValues.at(0)).toInt();
    columnTypeN = "NetworkMode INTEGER, IP VARCHAR(40), Subnetmask VARCHAR(50), Gateway VARCHAR(50), PrimaryWIN VARCHAR(50), SecondaryWIN VARCHAR(50), PrimaryDNS VARCHAR(50), SecondaryDNS VARCHAR(50), LinkMode INTEGER, Speed VARCHAR(50), WakeOn VARCHAR(30), NetworkType VARCHAR(30), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(NetworkType)";
    QStringList NetworkInfo = readTable("NetworkDetails", "NetworkType='"+NetworkType+"'");
    if(NetworkInfo.count() && isTableExists("NetworkDetails"))
    {
        NetworkMode = QString(NetworkInfo.at(0)).toInt();
        LinkMode = NetworkInfo.at(8);
        WakeOn = NetworkInfo.at(10);
        IPAddress = NetworkInfo.at(1);
        SubnetMask = NetworkInfo.at(2);
        Router = NetworkInfo.at(3);
        PrimaryDNS = NetworkInfo.at(6);
        SecondaryDNS = NetworkInfo.at(7);
        NetworkType = NetworkInfo.at(11);
        ManualDNSEntry = QString(NetworkInfo.at(12)).toInt();
    }
    else
    {
        NetworkMode = 2;
        LinkMode = "";
        WakeOn = "g";
    }

    QStringList list = readTable("SysConf", "Property='Domain'", "Value");
    if(list.size())
    {
        Domain = list.at(0);
    }
    bool bIsTCS = false;
    QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
    if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
        bIsTCS = true;

    bool isUSBPen = false;
    if(checkForUSBImage() )
        isUSBPen = true;

    if(!NetworkMode)
    {
        arguments.clear();
        if(NetworkType == "Ethernet")
            arguments << getEthernetDevice() << "down";
        else if(ListWirelessInterfaces().count())
            arguments << ListWirelessInterfaces().at(0) << "down";
        QProcess::execute("ifconfig",arguments);
        IPAddress = SubnetMask = Router = PrimaryDNS = SecondaryDNS = LinkMode = Speed = WakeOn = "";
        deleteEntry("DHCPParams", QString("drop"));
        deleteEntry("OSParams", QString("drop"));
        arguments.clear();
        arguments << "-r" << "-lf" << "/var/lib/dhclient/dhclient-"+device+".leases" << "-pf" << "/run/dhclient-"+device+".pid" << device;
        qDebug() << "LCore:ExecuteNetworkSettings::3::  dhclient 1 " << QProcess::execute("dhclient", arguments);
        ::sleep(2);
    }
    else if(NetworkMode == 1)
    {
        arguments.clear();
        arguments << "-r" << "-lf" << "/var/lib/dhclient/dhclient-"+device+".leases" << "-pf" << "/run/dhclient-"+device+".pid" << device;
        qDebug() << "LCore:ExecuteNetworkSettings::3:: dhclient m1 " << QProcess::execute("dhclient", arguments);

        arguments.clear();
        arguments << device << IPAddress;
        if(SubnetMask.length())
            arguments << "netmask" << SubnetMask;
        QProcess::execute("ifconfig", arguments);

        ///commented this because we called setgetway function below to switch network priority  16/01/2019
        //        arguments.clear();
        //        arguments << "del" << "default" << "dev" << device;
        //        QProcess::execute("route", arguments);

        //        arguments.clear();
        //        arguments << "add" << "default" << "gw" << Router << "dev" << device;
        //        QProcess::execute("route", arguments);

        deleteEntry("DHCPParams", QString("drop"));
        deleteEntry("OSParams", QString("drop"));
        QStringList nvalues;
        nvalues << "NTPViaDHCP=''";
        updateTable("DateTime", nvalues, "");

        //-------------------------------------- VMS ---------------------------------------------
        if(!QFile::exists("/tmp/.chkServer"))
        {
            system("touch /tmp/.chkServer");
            ExecuteVMSSettings();
        }
        //----------------------------------------------------------------------------------------

        ::sleep(2);
    }
    else
    {
        IPAddress = SubnetMask = Router = PrimaryDNS = SecondaryDNS  = Speed = WakeOn = "";

        QString ethLink = getEthernetDevice();
        if(NetworkType == "Wireless")
        {
            if(ethLink.isEmpty())
            {
                arguments.clear();
                /*Below line is commented because '-r' option releases lease file so we have used '-x' option instead of that.
                  This issue occurred in Keck Medicine where third party multiple dhcp servers ware available and every network apply it was changing the ip address*/
                //arguments << "-r" << "-lf" << "/var/lib/dhclient/dhclient-"+ethLink+".leases" << "-pf" << "/run/dhclient-"+ethLink+".pid" << ethLink;
                arguments << "-x" << "-lf" << "/var/lib/dhclient/dhclient-"+ethLink+".leases" << "-pf" << "/run/dhclient-"+ethLink+".pid" << ethLink;
                qDebug() << "LCore:ExecuteNetworkSettings::3::  dhclient 1 " << QProcess::execute("dhclient", arguments);
            }
            QStringList nlist = readTable("WifiDetails", "", "Security");
            if(nlist.count())
                WifiSecurity = nlist.at(0);
        }
        else
        {
            QString strLeaseFile = QString("/var/lib/dhclient/dhclient-%1.leases").arg(device);
            QFile file(strLeaseFile);
            if(!file.exists() || !file.size())
            {
                arguments.clear();
                arguments << device << "0.0.0.0" << "up";
                QProcess::execute("ifconfig", arguments);
            }
        }

        QString vms_ip = "", vms_group = "", vms_interval = "", vms_commtype = "", vms_host = "", vms_port = "";
        arguments.clear();
        /*Below line is commented because '-r' option releases lease file so we have used '-x' option instead of that.
          This issue occurred in Keck Medicine where third party multiple dhcp servers ware available and every network apply it was changing the ip address*/
        //arguments << "-r" << "-lf" << "/var/lib/dhclient/dhclient-"+device+".leases" << "-pf" << "/run/dhclient-"+device+".pid" << device;
        arguments << "-x" << "-lf" << "/var/lib/dhclient/dhclient-"+device+".leases" << "-pf" << "/run/dhclient-"+device+".pid" << device;
        qDebug() << "LCore:ExecuteNetworkSettings::3:: dhclient 1 " << QProcess::execute("dhclient", arguments);

        {
            bool bIsBEL = false;
            QStringList  strlistCheckBEL = readDefaultsValue("BELEnable");
            if(strlistCheckBEL.count() && strlistCheckBEL.at(0).toInt())
            {
                bIsBEL = true;
            }
            if(bIsBEL == false)
            {
                qDebug() << "LCore:ExecuteNetworkSettings::3::  remove .pid file " << QFile::remove("/var/run/dhclient-"+device+".pid");
                QFile::remove("/var/lib/dhclient/dhclient-"+device+".leases");
            }
        }

        if(invokeType)
        {
            if(/*(NetworkType == "Ethernet" && !Security802Status) || */(NetworkType == "Wireless" && WifiSecurity != "None")) // commented because it was taking time to apply network
            {
                arguments.clear();
                arguments << "link" << "set" << device << "down";
                qDebug() << "LCore:ExecuteNetworkSettings::3:: dhclient 3" << QProcess::execute("ip", arguments);
            }
        }

        int nCheckAgainCounter = 0;
checkagain:
        //        if(isTableExists("Network8021x"))
        //        {
        QString strCmd = QString("kill -9 `ps ax | grep dhclient | grep %1 | awk '{print $1}'`").arg(device);
        system(strCmd.toLatin1());
        //        }

        arguments.clear();
        arguments << "-lf" << "/var/lib/dhclient/dhclient-"+device+".leases" << "-pf" << "/run/dhclient-"+device+".pid" << device;
        qDebug() << "LCore:ExecuteNetworkSettings::3:: dhclient 2" << QProcess::execute("dhclient", arguments);

        QNetworkInterface interface = QNetworkInterface::interfaceFromName(device);

        QString strScheme, strPort;
        QFile file("/var/lib/dhclient/dhclient-"+device+".leases");

        if(file.exists())
        {
            // If we get file with zero size
            // then we will retry again atleast for two times
            if(file.size() == 0 && nCheckAgainCounter < 2)
            {
                file.remove();
                nCheckAgainCounter++;
                goto checkagain;
            }

            if(file.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream in(&file);
                while (!in.atEnd())
                {
                    QString line = in.readLine();
                    qDebug() << "LCore:ExecuteNetworkSettings::3:: line : " << line;
                    if(line.contains("fixed-address"))
                        IPAddress = line.simplified().section(" ", 1, 1).remove(";");

                    if(line.contains("subnet-mask"))
                        SubnetMask = line.simplified().section(" ", 2, 2).remove(";");

                    if(line.contains("domain-name-servers"))
                    {
                        QString DNSList = line.simplified().section(" ", 2, 2).remove(";");
                        if(DNSList.length())
                        {
                            if(ManualDNSEntry == 1)
                            {
                                PrimaryDNS = NetworkInfo.at(6);
                                SecondaryDNS = NetworkInfo.at(7);
                            }
                            else if(DNSList.count(","))
                            {
                                PrimaryDNS = DNSList.section(",", 0, 0);
                                SecondaryDNS = DNSList.section(",", 1, 1);
                            }
                            else
                            {
                                PrimaryDNS = DNSList;
                                SecondaryDNS = DNSList.section(",",1,1);
                            }
                        }
                    }

                    if(line.contains("dhcp-server-identifier"))
                    {
                        dhcpServerIdentifier = line.simplified().section(" ", 2, 2).remove(";");
                        qDebug()<<"dhcpServerIdentifier value:-"<<dhcpServerIdentifier;
                    }

                    if(line.contains(" domain-name "))
                    {
                        Domain = line.simplified().section(" ", 2, 2).remove(";").remove("\"");
                        QString ColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
                        writeTable("SysConf", ColumnType, "'Domain', '"+Domain+"'", "AppendNew");
                    }

                    if(line.contains("routers"))
                    {
                        if(line.count(","))
                            Router = line.simplified().section(" ", 2, 2).remove(";").section(",", 0, 0);
                        else
                            Router = line.simplified().section(" ", 2, 2).remove(";");
                    }
                    if(line.contains("vms-ip"))
                    {
                        QString strLine = line.simplified().section(" ", 2, 2).remove(";").remove("\"");

                        if(strLine.contains(':'))
                        {
                            QUrl url(strLine);
                            strScheme = url.scheme();
                            vms_ip = url.host();
                            strPort = QString::number(url.port());

                            if(vms_ip.isEmpty())
                                vms_ip = strScheme;
                            else
                                vms_ip = "\"" + url.host() + "\"";

                            qDebug() << "LCore:ExecuteNetworkSettings::3:: leases vms_ip = " << vms_ip;

                            if(strScheme.contains("http") || strScheme.contains("https"))
                                vms_commtype = "\"" + strScheme.toUpper() + "\"";
                            else
                                vms_commtype = "\"HTTPS\"";

                            qDebug() << "LCore:ExecuteNetworkSettings::3::  leases vms_commtype = " << vms_commtype;

                            if(strPort.toInt() < 0 && vms_commtype.remove("\"").toLower() == "http")
                                vms_port = "\"80\"";
                            else if(strPort.toInt() > 0 && (vms_commtype.remove("\"").toLower() == "http" || vms_commtype.remove("\"").toLower() == "https"))
                                vms_port = "\"" +strPort+ "\"";
                            else if (strPort.toInt() < 0 && vms_commtype.remove("\"").toLower() == "https")
                                vms_port = "\"443\"";

                            qDebug() << "LCore:ExecuteNetworkSettings::3:: leases vms_port = " << vms_port;

                            if(!vms_commtype.contains("\""))
                                vms_commtype = "\"" + vms_commtype + "\"";
                        }

                    }
                    if(line.contains("vms-group"))
                        vms_group = line.simplified().section(" ", 2).remove(";");
                    if(line.contains("vms-interval"))
                        vms_interval = line.simplified().section(" ", 2, 2).remove(";");
                    if(line.contains("ntp-servers"))
                        ntpServers = line.simplified().section(" ", 2, 2).remove(";");
                    if(line.contains("os-conf"))
                    {
                        OSConf = line.simplified().section(" ", 2, 2).remove(";").remove("\"");
                        if(OSConf.startsWith("zc:") || OSConf.startsWith("ZC:"))
                        {
                            OSConf = OSConf.remove("zc:", Qt::CaseInsensitive);
                        }
                    }
                    if(line.contains("os-upgrade"))
                        OSUpgrade = line.simplified().section(" ", 2, 2).remove(";").remove("\"");
                    if(line.contains("os-licmanager"))
                        licManager = line.simplified().section(" ", 2, 2).remove(";").remove("\"");
                    if(line.contains("host-name") && !isUSBPen)
                    {
                        Hostname=line.simplified().section(" ", 2, 2).remove(";").remove("\"");
                        QStringList strHostNameByList = readTable("SysConf", "Property='HostnameBy'", "Value");
                        if(bIsTCS && strHostNameByList.count() && ( strHostNameByList.at(0).toInt() == 0 ) && QFile::exists("/tmp/.updatehostname"))
                        {
                            QString columnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
                            QString columnValues = "'Hostname', '"+Hostname+"'";
                            writeTable(QString("SysConf"), columnType, columnValues, "AppendNew");
                            writeTable("SysConf", columnType, "'HostnameBy', '"+QString::number(0)+"'", "AppendNew");
                        }
                        else if(strHostNameByList.count() && ( strHostNameByList.at(0).toInt() == 1 ) && QFile::exists("/tmp/.updatehostname"))
                        {
                            QString columnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
                            QString columnValues = "'Hostname', '"+Hostname+"'";
                            writeTable(QString("SysConf"), columnType, columnValues, "AppendNew");
                            writeTable("SysConf", columnType, "'HostnameBy', '"+QString::number(1)+"'", "AppendNew");
                        }
                        else if(bIsTCS && !strHostNameByList.count())
                        {
                            QString columnType1 = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
                            QString columnValues1 = "'Hostname', '"+Hostname+"'";
                            writeTable(QString("SysConf"), columnType1, columnValues1, "AppendNew");
                            writeTable("SysConf", columnType1, "'HostnameBy', '"+QString::number(0)+"'", "AppendNew");
                        }
                        else if(!strHostNameByList.count())
                        {
                            QString columnType1 = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
                            QString columnValues1 = "'Hostname', '"+Hostname+"'";
                            writeTable(QString("SysConf"), columnType1, columnValues1, "AppendNew");
                            writeTable("SysConf", columnType1, "'HostnameBy', '"+QString::number(1)+"'", "AppendNew");
                        }
                    }
                    if(line.contains("WSL")) //here code added for web session launcher
                        OSWSL=line.trimmed().section(" ", 2, 2).remove(";");
                }

            }
            if(device != getEthernetDevice())
            {
                //                arguments.clear();
                //                arguments << getEthernetDevice() << "down";
                //                QProcess::execute("ifconfig", arguments);
                ///commented this because we called setgetway function below to switch network priority 16/01/2019
                //                arguments.clear();
                //                arguments << "del" << "default";
                //                QProcess::execute("route", arguments);

                //                arguments.clear();
                //                arguments << "add" << "default" << "gw" << Router << "dev" << device;
                //                QProcess::execute("route", arguments);
            }
        }
        else
        {
            qDebug() << "LCore:ExecuteNetworkSettings::3:: 0 byte";
            IPAddress = SubnetMask = Router = PrimaryDNS = SecondaryDNS = LinkMode = Speed = WakeOn = "";
        }

        qDebug() << "LCore:ExecuteNetworkSettings::3:: End leases = " << vms_ip << vms_group << vms_interval << vms_commtype << vms_host << vms_port;

        QString col_types = "Ip VARCHAR(30), GroupName VARCHAR(30), Interval VARCHAR(30), Commtype VARCHAR(30), Host VARCHAR(30), Port VARCHAR(30)";
        QString col_values = "'"+vms_ip+"', '"+vms_group+"', '"+vms_interval+"', '"+vms_commtype+"', '"+vms_host+"', '"+vms_port+"'";
        if(!vms_ip.isEmpty())
        {
            qDebug() << "LCore:ExecuteNetworkSettings::3:: DHCPParams write = " << col_values;
            writeTable("DHCPParams", col_types, col_values, "");
        }

        //-------------------------------------- VMS ---------------------------------------------
        if(!QFile::exists("/tmp/.chkServer"))
        {
            system("touch /tmp/.chkServer");
            ExecuteVMSSettings();
        }
        //----------------------------------------------------------------------------------------
        //here code added for web session launcher if WSL = 1 then we have to check for websessionlauncher as a host name
        //either or on dhcp scope id.

        QStringList checkWC = readDefaultsValue("WSL");
        if(checkWC.isEmpty() || checkWC.at(0) == "1")
        {
            int nCheckStatus = 0;
            nCheckStatus = WEBLauncherStatus();

            qDebug() << "LCore:ExecuteNetworkSettings::3:: ExecutewebLauncher 1 = " << nCheckStatus;

            if(nCheckStatus == 1)  //websessionlauncher-HTTPS
            {
                OSWSL = "https://wslauncher/wsl";
            }
            else if(nCheckStatus == 2)  //websessionlauncher-HTTP
            {
                OSWSL = "http://wslauncher/wsl";
            }


            if(!OSWSL.isEmpty())
            {
                col_types = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
                col_values = "'WebConnURL', '"+OSWSL+"'";
                writeTable("SysConf", col_types, col_values, "AppendNew");
            }
        }

        if(file.size() != 0 )
        {
            col_types = "OSConf VARCHAR(1000), OSUpgrade VARCHAR(1000)";
            col_values = "'"+OSConf+"', '"+OSUpgrade+"'";
            writeTable("OSParams", col_types, col_values, "");
        }

        col_types = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
        col_values = "'LicManagerIp', '"+licManager+"'";
        writeTable("SysConf", col_types, col_values, "AppendNew");

        if(isTableExists("DateTime"))
            updateTable("DateTime", QStringList() << "NTPViaDHCP='"+ntpServers+"'", "");
        else
        {
            QString ftime; int nChecktimeformat;
            nChecktimeformat = getTimeFormat();
            if(nChecktimeformat)  //12Hr
                ftime = QTime::currentTime().toString("hh:mm:ss AP");
            else
                ftime = QTime::currentTime().toString("hh:mm:ss");       //%H:%M:%S

            col_types = "Type VARCHAR(30), DateType VARCHAR(30), TimeValue VARCHAR(30), NTPViaDHCP VARCHAR(30) , NetworkType VARCHAR(30) , NetworkValue VARCHAR(30) , Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30)";
            col_values = "'Manual', '"+ QDate::currentDate().toString("dd MMM yyyy").append(",").append(QDate::currentDate().toString("dddd"))+"', '"+ftime+"','"+ntpServers+"', '' , '' , 0, 0, 0, '', ''";
            writeTable("DateTime", col_types, col_values, "");
        }

        if(qgetenv("BOARDARCH") == QString("via-arm"))
            QProcess::startDetached("killall", QStringList() << QString("dhclient"));
    }

    qDebug() << "LCore:ExecuteNetworkSettings::3:: Hostname = " << Hostname;
    QStringList strHostNameByList = readTable("SysConf", "Property='HostnameBy'", "Value");

    if(bIsTCS)
    {
        if(!strHostNameByList.count() || strHostNameByList.at(0).toInt() == 0)
        {
            writeHostnameInDHCPConf(Hostname);
        }
    }
    else
    {
        if( isUSBPen || (!strHostNameByList.count()) || (strHostNameByList.count() && ( strHostNameByList.at(0).toInt() == 1 )))
        {
            writeHostnameInDHCPConf(Hostname);
        }
    }


    QStringList strNetworkAccessType;
#ifdef Q_OS_LINUX
    strNetworkAccessType = readTable("SysConf", "Property='NetworkAccessType'", "Value");
#else
    strNetworkAccessType = readTable(retquery(), "SysConf", "Property='NetworkAccessType'", "Value");
#endif
    if(!strNetworkAccessType.isEmpty())     //for first time after restore entris are not available
    {
        if(strNetworkAccessType.at(0).toInt())
            writeDHCP81optionINDns(true);
        else
            writeDHCP81optionINDns(false);
    }

    if(!strHostNameByList.count() || strHostNameByList.at(0).toInt() == 1)
    {
        if(!invokeType)
        {
            QProcess::execute("hostnamectl", QStringList()<< "set-hostname" << Hostname);
        }
    }

    if(device == getEthernetDevice() && qgetenv("BOARDARCH") != "via-arm")
    {
        UpdateEthernetSettings(invokeType);
        QMap<QString, QString> InfoMap = getEthernetInfo();
        Speed = InfoMap.value("Speed");
        WakeOn = InfoMap.value("WakeOn").simplified();
    }

    values = QString::number(NetworkMode)+", '"+IPAddress+"', '"+SubnetMask+"', '"+Router+"', '', '','"+PrimaryDNS+"', '"+SecondaryDNS+"', '"+LinkMode+"', '"+Speed+"','"+WakeOn+"','"+NetworkType+"',"+QString::number(ManualDNSEntry)+",'"+dhcpServerIdentifier+"', 0, '', ''";
    writeTable("NetworkDetails", columnTypeN, values, "NetworkType='"+NetworkType+"'");

    QStringList listAuthenticate = readTable("SysConf", "Property='CurrentLoggedIn'", "Value");
    if(listAuthenticate.count() && listAuthenticate.at(0) == QString("ADS"))
    {
        listAuthenticate = readTable("ADSSettings", "", "Domain");
        if(listAuthenticate.count())
        {
            Domain = listAuthenticate.at(0);
            QString ColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
            writeTable("SysConf", ColumnType, "'Domain', '"+Domain+"'", "AppendNew");
        }
    }

    /**********************RESOLVEFILE*******************************/
    if(NetworkMode)
        addDNSserver(NetworkType);
    /**********************HOSTFILE********************************/
    if(device != getEthernetDevice())
    {
        ///solved issue Error message of duplicate entry is displayed when we change Hostname of TCNameSettings
        /// when tc has internal wifi or dongal connected then we didnot get wifi ip but here by default "127.0.0.1 hostname" is write in /etc/hosts/
        /// so for that if wired is connected then we given priority to wired to write in hosts file

        QNetworkInterface interface = QNetworkInterface::interfaceFromName(getEthernetDevice());
        QList<QNetworkAddressEntry> entries = interface.addressEntries();
        bool status = interface.flags().testFlag(QNetworkInterface::IsRunning);
        if(status)
        {
            if(entries.count() > 0)
            {
                QListIterator<QNetworkAddressEntry> eitr(entries);
                while(eitr.hasNext())
                {
                    QHostAddress hostAddress = eitr.next().ip();
                    if(hostAddress.scopeId().isEmpty() && hostAddress != QHostAddress(QHostAddress::LocalHost) && hostAddress != QHostAddress(QHostAddress::LocalHostIPv6) && hostAddress.protocol() == QAbstractSocket::IPv4Protocol)
                    {
                        QString strIP = hostAddress.toString();
                        if(!strIP.isEmpty())
                        {
                            IPAddress = strIP;
                        }
                    }
                }
            }
        }
    }
    QFile file(HOSTFILE);
    if(file.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&file);

        QStringList ADSSettings;
        QStringList listn;
        listn = readTable("SysConf", "Property='CurrentLoggedIn'", "Value");

        if(listn.count())
        {
            if(listn.first() == QString("ADS"))
                ADSSettings = readTable(QString("ADSSettings"), "");
        }

        qDebug() << "LCore:ExecuteNetworkSettings::3::  ADSSettings Hostname =  " << Hostname;

        if(IPAddress.isEmpty())
        {
            out << "127.0.0.1" << "\t" << "localhost" << "\n";
            if(ADSSettings.isEmpty())
                out << "127.0.0.1" << "\t" << Hostname << "\n";
            else
                out << "127.0.0.1" << "\t" << Hostname << "\t" + Hostname + "." + ADSSettings[2] << "\n";
        }
        else
        {
            out << "127.0.0.1" << "\t" << "localhost" << "\n";

            if(ADSSettings.isEmpty())
                out << IPAddress << "\t" << Hostname << "\n";
            else
                out << IPAddress << "\t" << Hostname << "\t" + Hostname + "." + ADSSettings[2] << "\n";
        }

        QList<QStringList> hosts = readCompleteTable("HostsSettings","");
        for(int i = 0; i < hosts.length(); i++)
            out<<hosts[i][0]<<"\t"<<hosts[i][1]<<"\n";

        file.close();
        sync();

    }

    setGateways(NetworkType, device);

    if(NetworkType == "Ethernet")
        QFile::remove(QString("/tmp/.applyingnetwork"));
    else
        QFile::remove(QString("/tmp/.applyingwifi"));

    // ------

    QStringList processlist = readTable("ProcessInfo", "Process='Network "+NetworkType+"'", "PID");
    if(!processlist.isEmpty())
    {
        qDebug() << "LCore:ExecuteNetworkSettings::3:: list =  " << processlist;
        if(processlist.first().toInt() != getpid())
            kill(processlist.first().toInt(), SIGUSR2);
    }

    if(!IPAddress.isEmpty())
    {
        int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);

        if(status != 0)
            mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

        QFile filen(QString(VMSNETWORKIPFILE));
        if(filen.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            qDebug() << "LCore:ExecuteNetworkSettings::3::  &&&& writting File &&&&&&";
            QTextStream out(&filen);
            out << IPAddress << "\n";
            filen.close();
        }

        if(status != 0)
            mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
    }

    if(qgetenv("BOARDARCH") != QString("via-arm"))
        updateResolvConf("connect");    // Added by prashant

    if(!invokeType)
        executeResolveIpScript();

    QStringList ips = getavailableIP();
    qDebug()<<"Available IP:--"<<ips;

    if(!ips.isEmpty() && QFile::exists(AFTERNETWORKSCRIPT))
    {
        QProcess *proc = new QProcess();
        proc->start(QString(AFTERNETWORKSCRIPT));
        sync();
    }

    if(QFile::exists(QString("/sda1/data/.ADSDetailsFile")))
    {
        ::sleep(2);
        backupDomain(QString("WRITE"));
    }
    qDebug() << "LCore:ExecuteNetworkSettings::3:: End";
}

//for adding dns server in required file
//for adding dns server in required file
void LCore::addDNSserver(const QString& strDevice)
{
    qDebug() << "LCore:addDNSserver::3:: Start";
    qDebug() << "LCore:addDNSserver::3:: args : strDevice = " << strDevice;

    QStringList strListNetworkType;
    strListNetworkType << QString("Ethernet") << QString("Wireless");

    QList<QStringList> strListNetworkData;
    foreach(const QString& strNetworkType, strListNetworkType)
    {
        QStringList strListNetworkValues = readTable("NetworkDetails","NetworkType='"+strNetworkType+"'");

        if(strListNetworkValues.count())
            strListNetworkData.append(strListNetworkValues);
    }

    QString Domain;
    QStringList strListServers;
    QStringList list = readTable("SysConf", "Property='Domain'", "Value");
    if(list.size())
        Domain = list.at(0);

    QStringList strListDns = readTable("NetworkSettings","Property='DNS'","Value");
    if(strListDns.count())
        strListServers = strListDns.at(0).split(",");

    QFile file(RESOLVEFILE);
    if(file.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        //sujeet
        QTextStream out(&file);
        QStringList strListServersDNSSuffix;
        QStringList strListDnsSuffix = readTable("NetworkSettings","Property='DNSSuffix'","Value");

        if(strListDnsSuffix.count())
            strListServersDNSSuffix = strListDnsSuffix.at(0).split(",");

        QStringList serverList;
        for(int i=0;i<strListServersDNSSuffix.count();i++)
        {
            serverList << strListServersDNSSuffix.at(i);
            serverList.append(" ");
        }
        QString finalList ,final ;
        for(int j =0;j<serverList.count();j++)
            final.append(serverList.at(j));
        finalList.append(QString("search ").append(final));

        if(final.length()>1)
            out << finalList << "\n";
        //

        if(strListDnsSuffix.count())
        {
            if(strListDnsSuffix.at(0)=="")
                out << "domain " << Domain << "\n";
            else
                out << "#domain " << Domain << "\n";
        }
        else
            out << "domain " << Domain << "\n";

        if(strListNetworkData.count())
        {
            foreach(QStringList strListNetwork, strListNetworkData)
            {
                if(strListNetwork.count() >= 7 && strListNetwork.at(6).length() && isValidIP(strListNetwork.at(6).trimmed()))  //added to remove '...' in /etc/resolve.conf by ritesh
                {
                    out << "nameserver " << strListNetwork.at(6) << "\n";
                }
                if(strListNetwork.count() >= 8 && strListNetwork.at(7).length() && isValidIP(strListNetwork.at(7).trimmed()))  // added to remove '...' in /etc/resolve.conf by ritesh
                {
                    out << "nameserver " << strListNetwork.at(7) << "\n";
                }
            }
        }

        for(int i=0; i < strListServers.count(); i++)
        {
            if(strListServers.at(i).length())
                out << "nameserver " << strListServers.at(i) << "\n";
        }

        file.close();
    }
    sync();
    qDebug() << "LCore:addDNSserver::3:: End";
}


void LCore::WriteWfclient()
{
    qDebug() << "LCore:WriteWfclient::3:: Start";

    if(!isTableExists("ICAGLOBAL"))
        return;

    QStringList conn = readTable("ICAGLOBAL", "");

    QString wfclient_file = WFCLIENT_INI_FILE;

    QString strDirName = NEWHOMEPATH(strConnectionLaunchPath)+".ICAClient/";
    QDir dir1(strDirName);
    if(!dir1.exists())
    {
        dir1.mkdir(strDirName);
    }

    QFile inifile(wfclient_file);
    if (!inifile.open(QIODevice::WriteOnly | QIODevice::Text))
        return;
    else
    {
        QTextStream out(&inifile);
        out << ";********************************************************************\n;\n";
        out << ";       wfclient.ini - Client workstation configurations for\n";
        out << ";       Citrix ICA Client for Unix" << "\n;\n";
        out << ";       Copyright 1994-2006, 2009 Citrix Systems, Inc. All rights reserved.\n;\n";
        out << ";********************************************************************\n\n";
        out << "[WFClient]\n";
        out << "AudioBandwidthLimit=1\n";
        out << "H264Enabled=True\n";
        out << "PopupOnExit=False\n";
        out << "MinimizeOnUse=False\n";
        out << "UpdatesAllowed=True\n";
        out << "UseBrowserSettings=0\n";
        out << "NoWindowManager=False\n";
        out << "Version = 2\n";
        out << "DisableXRender=True\n\n";

        QStringList KeyboardDesc ;
        KeyboardDesc << "Automatic (User Profile)" << "Data General International" << "Digital" << "Hewlett Packard" << "IBM" << "LINUX" << "NETBSD" << "NCD" << "SCO" << "Silicon Graphics" << "Sun";
        QString typeentry, filename = "automatic.kbd";

        if(conn.at(0) == QString("Local Keyboard").simplified()) { }
        else
            out << "KeyboardLayout=" << conn.at(0) << "\n";

        switch(KeyboardDesc.indexOf(conn.at(1)))  // Keyboard Client Type
        {
        case 0:
            filename = "automatic.kbd";
            break;
        case 1:
            filename = "dg.kbd";
            break;
        case 2:
            switch(conn.at(2).toInt())  //  Keyboard Client List
            {
            case 0:
                typeentry = "LK401";
                filename = "dec401.kbd";
                break;
            case 1:
                typeentry = "PCXAL";
                filename = "decpcx.kbd";
                break;
            }
            break;
        case 3:
            switch(conn.at(2).toInt())
            {
            case 0:
                typeentry = "ITF";
                filename = "hpitf.kbd";
                break;
            case 1:
                typeentry = "101 key";
                filename = "hp101.kbd";
                break;
            case 2:
                typeentry = "PS/2";
                filename = "hpps2.kbd";
                break;
            }
            break;
        case 4:
            filename = "ibm.kbd";
            break;
        case 5:
            switch(conn.at(2).toInt())
            {
            case 0:
                typeentry = "Standard";
                filename = "linux.kbd";
                break;
            case 1:
                typeentry = "Japanese KDE";
                filename = "linux-ja.kbd";
                break;
            }
            break;
        case 6:
            filename = "netbsd.kbd";
            break;
        case 7:
            switch(conn.at(2).toInt())
            {
            case 0:
                typeentry = "N-101";
                filename = "ncdn-101.kbd";
                break;
            case 1:
                typeentry = "Standard 102";
                filename = "ncdn-102.kbd";
                break;
            }
            break;
        case 8:
            switch(conn.at(2).toInt())
            {
            case 0:
                typeentry = "Open Server 5";
                filename = "scoos5.kbd";
                break;
            case 1:
                typeentry = "Unixware 2";
                filename = "scouw2.kbd";
                break;
            }
            break;
        case 9:
            switch(conn.at(2).toInt())
            {
            case 0:
                typeentry = "INDY";
                filename = "sgindy.kbd";
                break;
            case 1:
                typeentry = "Generic (Indigo)";
                filename = "sg.kbd";
                break;
            }
            break;
        case 10:
            switch(conn.at(2).toInt())
            {
            case 0:
                typeentry = "Type 6 (USB)";
                filename = "sparc6usb.kbd";
                break;
            case 1:
                typeentry = "Type 6";
                filename = "sparc5.kbd";
                break;
            case 2:
                typeentry = "Type 5";
                filename = "sparc5.kbd";
                break;
            case 3:
                typeentry = "Type 4";
                filename = "sparc4.kbd";
                break;
            case 4:
                typeentry = "Type 3";
                filename = "sparc3.kbd";
                break;
            }
            break;
        }

        out << "KeyboardMappingFile=" << filename << "\n";
        out << "KeyboardDescription=" << conn.at(1) << " " << typeentry << "\n";
        out << "KeyboardType=" << conn.at(3) << "\n"; // Keyboard Server Type

        if(conn.at(4).toInt())
            out << "DisableSound=False" << "\n";
        else
            out << "DisableSound=True" << "\n";


        QStringList kbd_shortcuts;
        kbd_shortcuts << "Translated" << "Direct in fullscreen desktop only" << "Direct";
        switch(kbd_shortcuts.indexOf(conn.at(6)))
        {
        case 0:
            out << "KeyPassthroughEscapeShift=" << conn.at(7) << "\n";
            out << "KeyPassthroughEscapeChar=" << conn.at(8) << "\n";
            out << "TransparentKeyPassthrough=Local" << "\n";
            break;
        case 1:
            out << "KeyPassthroughEscapeShift=" << conn.at(7) << "\n";
            out << "KeyPassthroughEscapeChar=" << conn.at(8) << "\n";
            out << "TransparentKeyPassthrough=FullScreenOnly" << "\n";
            break;
        case 2:
            out << "KeyPassthroughEscapeShift=" << conn.at(7) << "\n";
            out << "KeyPassthroughEscapeChar=" << conn.at(8) << "\n";
            if(getOSDetails(QString(OSBUILD_FILE)).contains("AXA", Qt::CaseInsensitive))
                out << "BypassSetLED=True" << "\n";
            out << "TransparentKeyPassthrough=Remote" << "\n";
            break;
        }
        out << "CREnabled=True" << "\n";
        QStringList NetworkProtocol;
        NetworkProtocol << "TCP/IP + HTTP" << "TCP/IP" << "SSL/TLS + HTTPS";
        switch(NetworkProtocol.indexOf(conn.at(16))) // Network Protocol
        {
        case 0:
            out << "BrowserProtocol=HTTPonTCP" << "\n"; //changes made on 16/09/2014 interchanges Values of Network Protocol
            out << "SSLEnable=Off" << "\n";
            break;
        case 1:
            out << "BrowserProtocol=UDP" << "\n";   //changes made on 16/09/2014 interchanges Values of Network Protocol
            out << "SSLEnable=Off" << "\n";
            break;
        case 2:
            out << "BrowserProtocol=HTTPonTCP" << "\n";
            out << "SSLEnable=On" << "\n";
            if(!conn.at(17).length())   // Gateway Address
                out << "SSLProxyHost=*" << "\n";
            else
            {
                QString com = conn.at(17);
                com.append(conn.at(18).length()?conn.at(18):"443"); // Gateway Port
                out << "SSLProxyHost=" << com << "\n";
            }
            break;
        }

        out << "BrowserTimeout=5000" << "\n";
        out << "CDMAllowed=On" << "\n";
        out << "ClientManagement=On" << "\n";
        out <<"ClientComm=On" << "\n";

        QString shift_index, char_index;
        QStringList keys, keys1, keys2;
        keys << "Alt+F1" << "Alt+F2" << "Alt+F3" << "Alt+F4" << "Alt+F5" << "Alt+F6" << "Alt+F7" << "Alt+F8" << "Alt+F9" << "Alt+F10" << "Alt+F11" << "Alt+F12" << "Alt+Tab" << "Alt+Shift+Tab" << "Toggle Speed";
        keys1 << "None" << "Shift" << "Ctrl" << "Alt" << "Alt+Ctrl" << "Alt+Shift" << "Ctrl+Shift";
        keys2 << "None" << "F1" << "F2" << "F3" << "F4" << "F5" << "F6" << "F7" << "F8" << "F9" << "F10" << "F11" << "F12" << "Tab" << "Minus" << "Plus" ;

        shift_index = conn.at(9);
        char_index  = conn.at(10);
        for(int i=keys.length()-1; i>=0; i--)
        {
            out << "Hotkey" << i+1 << "Shift=" << shift_index.section(":",i,i) << "\n";// keys1.at(shift_index.section(":",i,i).toInt())
        }
        out << "\n";

        for(int i=keys.length()-1; i>=0; i--)
        {
            QString cKey = char_index.section(":",i,i);
            if(cKey == "-")         cKey="Minus";
            else if(cKey == "+")    cKey="Plus";
            out << "Hotkey" << i+1 << "Char=" << cKey << "\n";// keys2.at(char_index.section(":",i,i).toInt())
        }
        out << "\n";


        if(conn.at(15) == "Off")    // FontSmoothing
            out << "FontSmoothingType=0" << "\n";
        else if(conn.at(15) == "Standard")
            out << "FontSmoothingType=2" << "\n";
        else if(conn.at(15) == "Clear Type")
            out << "FontSmoothingType=3" << "\n";


        if(conn.at(19).length())    // Primary
        {
            out << "HttpBrowserAddress=" << conn.at(19) << "\n";
            out << "TcpBrowserAddress=" << conn.at(19) << "\n";
        }
        else
        {
            out << "HttpBrowserAddress=-----" << "\n";
            out << "TcpBrowserAddress=-----" << "\n";
        }
        out << "HttpBrowserAddress2=-----" << "\n";
        out << "HttpBrowserAddress3=-----" << "\n";
        out << "HttpBrowserAddress4=-----" << "\n";
        out << "HttpBrowserAddress5=-----" << "\n";

        out << "TcpBrowserAddress2=-----" << "\n";
        out << "TcpBrowserAddress3=-----" << "\n";
        out << "TcpBrowserAddress4=-----" << "\n";
        out << "TcpBrowserAddress5=-----" << "\n";

        if(conn.at(20).length())    // Backup1
        {
            out << "HttpBrowserAddress6=" << conn.at(20) << "\n";
            out << "TcpBrowserAddress6=" << conn.at(20) << "\n";
        }
        else
        {
            out << "HttpBrowserAddress6=-----" << "\n";
            out << "TcpBrowserAddress6=-----" << "\n";
        }
        out << "HttpBrowserAddress7=-----" << "\n";
        out << "HttpBrowserAddress8=-----" << "\n";
        out << "HttpBrowserAddress9=-----" << "\n";
        out << "HttpBrowserAddress10=-----" << "\n";

        out << "TcpBrowserAddress7=-----" << "\n";
        out << "TcpBrowserAddress8=-----" << "\n";
        out << "TcpBrowserAddress9=-----" << "\n";
        out << "TcpBrowserAddress10=-----" << "\n";

        if(conn.at(21).length())    // Backup2
        {
            out << "HttpBrowserAddress11=" << conn.at(21) << "\n";
            out << "TcpBrowserAddress11=" << conn.at(21) << "\n";
        }
        else
        {
            out << "HttpBrowserAddress12=-----" << "\n";
            out << "TcpBrowserAddress12=-----" << "\n";
        }

        bool bsmbFlag = 0;
        bool bnfsFlag = 0;
        bool busbFlag = 0;
        bool bcdromFlag = 0;
        bool bmobStorage = 0;

        if(isTableExists("SysConf","Property='SMB'"))
        {
            QStringList  SMBDrive = readTable("SysConf","Property='SMB'", "Value");
            if(SMBDrive.at(0).toInt())
                bsmbFlag = 1;
        }
        if(isTableExists("SysConf","Property='NFS'"))
        {
            QStringList  NFSDrive = readTable("SysConf","Property='NFS'", "Value");
            if(NFSDrive.at(0).toInt())
                bnfsFlag = 1;
        }
        if(isTableExists("USB"))
        {
            QStringList USBDrive = readTable("USB", "", "Enable");
            if(USBDrive.at(0).toInt())
                busbFlag = 1;
        }
        if(isTableExists("CDROM"))
        {
            QStringList CDROMDrive = readTable("CDROM", "", "Enable");
            if(CDROMDrive.at(0).toInt())
                bcdromFlag = 1;
        }
        if(isTableExists("MobileStorage"))
        {
            QStringList MobileStorageDrive = readTable("MobileStorage", "", "Enable");
            if(MobileStorageDrive.at(0).toInt())
                bmobStorage = 1;
        }

        if(conn.at(22).toInt()) // Enable Drive Mapping
        {
            qDebug() << "LCore:WriteWfclient::3:: EnableDriveMapping";

            if(conn.at(24).toInt() && (bsmbFlag || bnfsFlag || busbFlag || bcdromFlag || bmobStorage))
            {
                QString SelectedDrive;
                QString DrivePermission;

                SelectedDrive = conn.at(25).trimmed();
                if(conn.at(26).contains("Read Write"))
                    DrivePermission = "0";
                else
                    DrivePermission = "1";
                out << "DrivePath" << SelectedDrive << "=/media\n";
                out << "DriveEnabled" << SelectedDrive << "=Yes" << "\n";
                out << "DriveReadAccess" << SelectedDrive << "=0" << "\n";
                out << "DriveWriteAccess" << SelectedDrive << "=" << DrivePermission.toInt() << "\n";

            }
            else
            {
                qDebug() << "LCore:WriteWfclient::3:: Map All disk on different letter";

                if( conn.at(27).toInt() && bsmbFlag)
                {
                    out << "DrivePath" << conn.at(29) << "=/media/smb\n";
                    out << "DriveEnabled" << conn.at(29) << "=Yes" << "\n";
                    out << "DriveReadAccess" << conn.at(29) << "=0" << "\n";
                    out << "DriveWriteAccess" << conn.at(29) << "=" << !conn.at(28).toInt() << "\n";
                }
                if(conn.at(30).toInt() && bnfsFlag)
                {
                    out << "DrivePath" << conn.at(32) << "=/media/nfs\n";
                    out << "DriveEnabled" << conn.at(32) << "=Yes" << "\n";
                    out << "DriveReadAccess" << conn.at(32) << "=0" << "\n";
                    out << "DriveWriteAccess" << conn.at(32) << "=" << !conn.at(31).toInt() << "\n";
                }
                if( conn.at(33).toInt() && busbFlag)
                {
                    out << "DrivePath" << conn.at(35) << "=/media/usb\n";
                    out << "DriveEnabled" << conn.at(35) << "=Yes" << "\n";
                    out << "DriveReadAccess" << conn.at(35) << "=0" << "\n";
                    out << "DriveWriteAccess" << conn.at(35) << "=" << !conn.at(34).toInt() << "\n";
                }
                if(conn.at(36).toInt() && bcdromFlag)
                {
                    out << "DrivePath" << conn.at(38) << "=/media/cdrom\n";
                    out << "DriveEnabled" << conn.at(38) << "=Yes" << "\n";
                    out << "DriveReadAccess" << conn.at(38) << "=0" << "\n";
                    out << "DriveWriteAccess" << conn.at(38) << "=" << !conn.at(37).toInt() << "\n";
                }
                if(conn.at(61).toInt() && bmobStorage)
                {
                    out << "DrivePath" << conn.at(65) << "=/media/mobilestorage\n";
                    out << "DriveEnabled" << conn.at(65) << "=Yes" << "\n";
                    out << "DriveReadAccess" << conn.at(65) << "=0" << "\n";
                    out << "DriveWriteAccess" << conn.at(65) << "=" << !conn.at(62).toInt() << "\n";
                }

                if(conn.at(57).toInt()) // Enable Root Mapping
                {
                    qDebug() << "LCore:WriteWfclient::3:: inside enable root mapping";
                    QDir dir("/root");
                    dir.setFilter(QDir::Dirs | QDir::NoDot | QDir::NoDotDot);
                    QFileInfoList list = dir.entryInfoList();
                    QString strRootDir;

                    if(list.count() && conn.at(59).simplified().length())
                        strRootDir = "/root/"+conn.at(59).simplified();

                    qDebug() << "LCore:WriteWfclient::3:: strRootDir :" << strRootDir;

                    QDir Mapdir(strRootDir);
                    if(Mapdir.exists())
                    {
                        out << "DrivePath" << conn.at(58) << "="+strRootDir << "\n";
                        out << "DriveEnabled" << conn.at(58) << "=Yes" << "\n";
                        out << "DriveReadAccess" << conn.at(58) << "=0" << "\n";
                        out << "DriveWriteAccess" << conn.at(58) << "=" << !conn.at(60).toInt() << "\n";
                    }
                    else
                        qDebug() << "LCore:WriteWfclient::3:: dir not exists";
                }
            }

            if(isTableExists("PhilipsSpeech"))
            {
                QStringList strlistPhilipsSpeech = readTable("PhilipsSpeech","");
                if(strlistPhilipsSpeech.count() && strlistPhilipsSpeech.at(0).toInt() == 1 && strlistPhilipsSpeech.at(4).toInt() == 1)
                {
                    QString strDPMLetter = strlistPhilipsSpeech.at(1).trimmed();
                    QString strSALetter = strlistPhilipsSpeech.at(2).trimmed();

                    out <<"\n";
                    out << QString("DrivePath%1=/tmp/PhilipsDPM").arg(strDPMLetter) << "\n";
                    out << QString("DriveEnabled%1=Yes").arg(strDPMLetter) << "\n";
                    out << QString("DriveReadAccess%1=0").arg(strDPMLetter) << "\n";
                    out << QString("DriveWriteAccess%1=0").arg(strDPMLetter) << "\n";

                    out << QString("DrivePath%1=/tmp/PhilipsSpeechAir").arg(strSALetter) << "\n";
                    out << QString("DriveEnabled%1=Yes").arg(strSALetter) << "\n";
                    out << QString("DriveReadAccess%1=0").arg(strSALetter) << "\n";
                    out << QString("DriveWriteAccess%1=0").arg(strSALetter) << "\n";
                }
            }
        }

        if(conn.at(23).toInt()) // Enable Dynamic Mapping
            out << "DynamicCDM=On"  << "\n";
        else
            out << "DynamicCDM=Off"  << "\n";

        // commented for NorthWestern university client To does not write comport entry in wfclient.ini file.
        //        QString portList;
        //        if(conn.at(39).length())    // COM Port List
        //        {
        //            portList = conn.at(39);
        //            out << "LastComPortNum=" << portList.count(":") << "\n";
        //            for(int i=0; i<portList.count(":"); i++)
        //            {
        //                out << "ComPort" << i+1 << "=" << portList.section(":", i, i) << "\n";
        //            }
        //            out << "\n";
        //        }

        if (conn.at(40).toInt())    // Enable Printer mapping
        {
            QFileInfo cupsdFile("/usr/sbin/cupsd");
            if(cupsdFile.exists())
            {
                QString printer;
                QStringList mapCitrix;
                printer = GetDefaultPrinter();
                if(printer.simplified().length())
                    mapCitrix = readTable("PrinterSettings","PrinterName='"+printer+"'", "MapCitrix");
                if(mapCitrix.count())
                {
                    if(mapCitrix.at(0).toInt() == 0)
                        printer.clear();
                }
                else
                    printer.clear();

                if(printer.trimmed().length() || conn.at(42).trimmed().length())
                {
                    out << "ClientPrinter=On" << "\n";
                    out << "ClientPrinterQueue=On" << "\n";
                }
                else
                {
                    out << "ClientPrinter=Off" << "\n";
                    out << "ClientPrinterQueue=Off" << "\n";
                }

                if(printer.simplified().length())
                    out << "DefaultPrinter=" << printer << "\n";

                if(conn.at(42).size())  // printer list
                {
                    out << "ClientPrinterList="; // Printer List

                    QStringList printerRedirected = conn.at(42).split(":");
                    QStringList printerList = GetPrinterList();
                    QString printers;

                    for(int i = 0; i < printerRedirected.length(); i++)
                    {
                        for(int j = 0; j < printerList.length(); j++)
                        {
                            if(printerRedirected[i] == printerList[j])
                            {
                                printers.append(printerRedirected[i]).append(";");

                                QString search;
                                QStringList win_driver = readTable("PrinterSettings", "PrinterName='"+printerRedirected[i]+"'", "WinDriverName");
                                if(win_driver.count())
                                {
                                    if(win_driver.at(0).length())
                                    {
                                        search = win_driver.at(0);
                                    }
                                    else
                                    {
                                        search = "Citrix Universal Printer";
                                    }
                                }

                                printers.append("wd="+search).append(":");
                                break;
                            }
                        }
                    }
                    printers.chop(1);
                    out << printers << "\n";
                }
            }
        }
        else
        {
            out << "ClientPrinter=Off" << "\n";
            out << "ClientPrinterQueue=Off" << "\n";
            out << "DefaultPrinter=On" << "\n";
        }

        if(conn.at(43).contains("Enable")) // enable auto reconnect
        {
            out << "ICAKeepAliveEnabled=True" << "\n";
            out << "TransportReconnectEnabled=True" << "\n";
        }
        else
        {
            out << "ICAKeepAliveEnabled=False" << "\n";
            out << "TransportReconnectEnabled=False" << "\n";
        }

        out << "TransportReconnectRetries=" << conn.at(44) << "\n";
        out << "TransportReconnectDelay=" << conn.at(45) << "\n";

        if(conn.at(46).toInt()) // Firewall Address
            out << "UseAlternateAddress=1" << "\n";
        else
            out << "UseAlternateAddress=0" << "\n";

        QStringList proxyType;
        proxyType << "None ( Direct Connection )" << "Use Browser Settings" << "Secure (HTTPS)" << "SOCKS" << "Automatically Detect Proxy";
        switch(proxyType.indexOf(conn.at(47))) // Proxy Type
        {
        case 0:
            out << "ProxyType=None" << "\n";
            break;
        case 1:
            out << "ProxyType=Auto" << "\n";
            break;
        case 2:
            out << "ProxyType=Secure" << "\n";
            out << "ProxyHost=" << conn.at(48) << ":" << conn.at(50) << "\n";   // Address, Port
            out << "ProxyUsername=" << conn.at(49) << "\n";
            out << "ProxyPassword=" << conn.at(51) << "\n";
            break;
        case 3:
            out << "ProxyType=Socks" << "\n";
            out << "ProxyHost=" << conn.at(48) << ":" << conn.at(50) << "\n";
            out << "ProxyUsername=" << conn.at(49) << "\n";
            out << "ProxyPassword=" << conn.at(51) << "\n";
            break;
        case 4:
            out << "ProxyType=Wpad" << "\n";
            break;
        }

        if(conn.at(5).toInt())
            out << "AllowAudioInput=True" << "\n";
        else
            out << "AllowAudioInput=False" << "\n";

        out << "HDXWebCamDelayType=0" << "\n";
        out << "HDXWebCamEnabled=True" << "\n";

        QStringList  listValues = readTable("PNAgentGlobal", "");
        if(listValues.count() && listValues.at(3)== "1")
            out << "HDXFlashUseFlashRemoting=Never" << "\n";
        else
            out << "HDXFlashUseFlashRemoting=Always" << "\n";

        /// out << "HDXFlashUseFlashRemoting=Always" << "\n";

        out << "IgnoreErrors=9,15" << "\n";
        out << "IgnoreXErrors=55.0/9,60.0/13" << "\n";

        if(qgetenv("BOARDARCH") == "via-arm")
        {
            out << "\n";
            out << "SpeedScreenMMAVideoEnabled=On" << "\n";
            out << "SpeedScreenMMAAudioEnabled=On" << "\n\n";
        }

        QList<QStringList> strlist_services;
        strlist_services = readCompleteTable(QString("Services"), "");
        if(strlist_services.count())
        {
            for(int i=0 ; i<strlist_services.count() ; i++)
            {
                if(strlist_services.at(i).contains("Philips-SpeechMike"))
                {
                    out << "\n";
                    out << "DrivePathP = /tmp/PhilipsDPM" <<"\n";
                    out <<"DriveEnabledP = Yes" <<"\n";
                    out <<"DriveReadAccessP = 0"<<"\n";
                    out <<"DriveWriteAccessP = 0"<<"\n";
                    out <<"DrivePathS = /tmp/PhilipsSpeechAir"<<"\n";
                    out <<"DriveEnabledS = Yes"<<"\n";
                    out <<"DriveReadAccessS = 0"<<"\n";
                    out <<"DriveWriteAccessS = 0"<<"\n";
                }
            }
        }

        QStringList  listPNAgentGlobal = readTable("PNAgentGlobal", "");
        if(listPNAgentGlobal.count() && listPNAgentGlobal.at(5) == "1")
            out << "HDXOverUDP=On" << "\n";
        else
            out << "HDXOverUDP=Off" << "\n";

        out << "\n[Thinwire3.0]\n";

        QStringList wincolor;
        wincolor << "16" << "256" << "32 Thousand" << "16 Million" << "Automatic";
        switch(wincolor.indexOf(conn.at(11))) // Window color
        {
        case 0: // 16
            out << "DesiredColor=1" << "\n";
            break;
        case 1: // 256
            out << "DesiredColor=2" << "\n";
        {
            if(conn.at(12) == "Shared-Approximate Colors")
                out << "ApproximateColors=Yes" << "\n";
            else
                out << "ApproximateColors=No" << "\n";
        }
            break;
        case 2: // 32 Thousand
            out << "DesiredColor=4" << "\n";
            break;
        case 3: // 16 Million
            out << "DesiredColor=8" << "\n";
            break;
        case 4: // Automatic
            out << "DesiredColor=15" << "\n";
            break;
        default:
            break;
        }

        QStringList window_screen;
        window_screen << "Fixed Size" << "Screen percentage" << "Fullscreen";

        switch(window_screen.indexOf(conn.at(13))) // Window Screen
        {
        case 0: // Fixed Size
            out << "WinSetting=1" << "\n";
            out << "DesiredVRES=" << conn.at(14).section("x",1,1) << "\n";
            out << "DesiredHRES=" << conn.at(14).section("x",0,0) << "\n";
            break;
        case 1: // Screen percentage
            out << "WinSetting=2" << "\n";
            out << "ScreenPercent=" << conn.at(14).section("%",0,0) << "\n";
            break;
        case 2: // Fullscreen
            out << "WinSetting=1" << "\n";
            out << "NoWindowManager=True" << "\n";
            out << "UseFullScreen=Yes" << "\n";
            break;
        default:
            break;
        }

        if(conn.at(52).toInt())    // Use Server Redraw
            out << "UseServerRedraw=Yes" << "\n";
        else
            out << "UseServerRedraw=No" << "\n";

        if(conn.at(53).toInt())    // Allow Backing Store
            out << "AllowBackingStore=Yes" << "\n";
        else
            out << "AllowBackingStore=No" << "\n";

        if(conn.at(54).length())   // Cache Size
            out << "PersistentCacheSize=" << conn.at(54) << "\n";

        if(conn.at(55).length())   // Cache Directory
            out << "PersistentCachePath=" << conn.at(55) << "\n";

        if(conn.at(56).length())   // Minimum Cache
            out << "PersistentCacheMinBitmap=" << conn.at(56) <<"\n";

        out<<"TWIEmulateSystray=False";

        inifile.close();
        sync();

    }
    qDebug() << "LCore:WriteWfclient::3::End";
}

/********************* Description : getKeyboardList *************************
For Keyboard layouts pass arg as 'layout'
For Keyboard varianta pass arg as 'varianta'
******************************************************************************/
QStringList LCore::getKeyboardList(const QString& arg)           //Aash 08-07-2013
{
    qDebug() << "LCore:getKeyboardList::3:: Start.";
    qDebug() << "LCore:getKeyboardList::3:: args : arg = " << arg;

    QStringList ListOfKbdLayouts, ListOfKbdVariants;
    QFile file(QString(KEYBOARD_LAYOUT_FILE));
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return QStringList("");
    int check = 1;
    QTextStream in(&file);
    while (!in.atEnd())
    {
        QString line = in.readLine();
        line = line.simplified();

        if(line.startsWith("! variant"))
            check = 1;
        if(line.startsWith("! variant"))
            check = 2;
        if(line.startsWith("! option"))
            check = 3;

        if(check==0 && !line.isEmpty())
            ListOfKbdLayouts += line;

        if(check==2 && !line.isEmpty())
            ListOfKbdVariants += line;

        if(line.startsWith("! layout"))
            check = 0;
    }

    if(arg == "layouts")
    {
        qDebug() << "LCore:getKeyboardList::3:: return ListOfKbdLayouts = " << ListOfKbdLayouts;
        return ListOfKbdLayouts;
    }
    else
    {
        qDebug() << "LCore:getKeyboardList::3:: return ListOfKbdVariants = " << ListOfKbdVariants;
        return ListOfKbdVariants;
    }
}

QStringList LCore::ListEthernetInterfaces()
{
    qDebug() << "LCore:ListEthernetInterfaces::3:: Start.";
    QStringList InterfaceList;
    InterfaceList.clear();
    QDir dir("/sys/class/net");
    dir.setFilter(QDir::AllDirs);
    QStringList list = dir.entryList();

    for(int i = 0; i < list.size(); i++)
    {
	QString strDevicePath = list.at(i);
	QString strDevice = strDevicePath.section('/', -1, -1);
	if(strDevice.startsWith(QString("eth")) == true)
            InterfaceList.append(list.at(i));
    }

    if(InterfaceList.isEmpty() == true)
    {
	InterfaceList << QString("eth0");
    }

    qDebug() << "LCore:ListEthernetInterfaces::3:: return InterfaceList = " << InterfaceList;
    return InterfaceList;
}

//for listing available wireless interface for communicating with that
QStringList LCore::ListWirelessInterfaces()
{
    qDebug() << "LCore:ListWirelessInterfaces::3:: Start.";
    QStringList InterfaceList;
    InterfaceList.clear();
    QDir dir("/sys/class/net");
    dir.setFilter(QDir::AllDirs);
    QStringList list = dir.entryList();

    for(int i = 0; i < list.size(); i++)
    {
        if(dir.exists(list.at(i) + "/wireless"))
            InterfaceList.append(list.at(i));
    }
    qDebug() << "LCore:ListWirelessInterfaces::3:: return InterfaceList = " << InterfaceList;
    return InterfaceList;
}

void LCore::ModifyXorgFileForScreenMcD(const QStringList& data, int nAccel)
{
    qDebug() << "LCore:ModifyXorgFileForScreenMcD::3:: Start.";
    qDebug() << "LCore:ModifyXorgFileForScreenMcD::3:: args : data = " << data << " nAccel = " << nAccel;

    QFile file(QString(MCDXORGCONFFILE));
    if(file.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        if(!data.isEmpty())
        {
            QTextStream out(&file);

            out << "Section \"ServerLayout\"" << "\n";
            out << "\tIdentifier\t\"Default Layout\"" << "\n";
            out << "\tScreen\t\"Default Screen\"" << "\n";
            out << "\tInputDevice\t\"Mouse\"" << "\n";
            out << "\tInputDevice\t\"Keyboard\"" << "\n";
            out << "\tOption\t\"AutoAddDevices\"\t\"false\"" << "\n";
            out << "\tOption\t\"AllowEmptyInput\"\t\"False\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Files\"" << "\n";
            out << "\tRgbPath\t\"/usr/local/share/X11/rgb\"" << "\n";
            out << "\tModulePath\t\"/usr/lib/xorg/modules\"" << "\n";
            out << "\tFontPath\t\"/usr/share/fonts/X11/misc/\"" << "\n";
            out << "\tFontPath\t\"/usr/share/fonts/X11/TTF/\"" << "\n";
            out << "\tFontPath\t\"/usr/share/fonts/X11/OTF\"" << "\n";
            out << "\tFontPath\t\"/usr/share/fonts/X11/Type1/\"" << "\n";
            out << "\tFontPath\t\"/usr/share/fonts/X11/100dpi/\"" << "\n";
            out << "\tFontPath\t\"/usr/share/fonts/X11/75dpi/\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"InputDevice\"" << "\n";
            out << "\tIdentifier\t\"Keyboard\"" << "\n";
            out << "\tDriver\t\"kbd\"" << "\n";
            out << "\tOption\t\"XkbRules\"\t\"xorg\"" << "\n";
            out << "\tOption\t\"XkbModel\"\t\"pc105\"" << "\n";
            out << "\tOption\t\"XkbLayout\"\t\"cn\"" << "\n";
            out << "\tEndSection" << "\n\n";

            out << "Section \"InputDevice\"" << "\n";
            out << "\tIdentifier\t\"Mouse\"" << "\n";
            out << "\tDriver\t\"mouse\"" << "\n";
            out << "\tOption\t\"CorePointer\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Monitor\"" << "\n";
            out << "\tIdentifier\t\"CRT\"" << "\n";
            out << "\tOption\t\"Enable\"\t\"true\"" << "\n";

            QString rotation;
            if(data.at(3) == "Inverted")
                rotation = "inverted";
            else if(data.at(3) == "Clockwise")
                rotation = "right";
            else if(data.at(3) == "Anti-clockwise")
                rotation = "left";
            else
                rotation = "normal";

            out << "\tOption\t\"Rotate\"\t\"" + rotation + "\"\n";
            out << "\tOption\t\"PreferredMode\"\t\"" + data.at(2) + "\"\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Monitor\"" << "\n";
            out << "\tIdentifier\t\"LCD\"" << "\n";
            out << "\tOption\t\"Ignore\"\t\"true\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Monitor\"" << "\n";
            out << "\tIdentifier\t\"DVI\"" << "\n";
            out << "\tOption\t\"Enable\"\t\"true\"" << "\n";

            QStringList listValues = readTable(QString("SysConf"), QString("Property='ConverterValue'"),"Value");
            int nConverterValue = 1;
            if(listValues.count())
                nConverterValue = listValues.at(0).toInt();

            if(nConverterValue)
                out << "\tOption\t\"Type\"\t\"Internal\"" << "\n";
            else
                out << "\tOption\t\"Type\"\t\"External\"" << "\n";
            out << "\tOption\t\"DIPort\"\t\"DVP0\"" << "\n";

            QString rotationDual;
            if(data.at(10) == "Inverted")
                rotationDual = "inverted";
            else if(data.at(10) == "Clockwise")
                rotationDual = "right";
            else if(data.at(10) == "Anti-clockwise")
                rotationDual = "left";
            else
                rotationDual = "normal";

            if(data.at(6) == "independent" || data.at(6) == "extended")
                out << "\tOption\t\"Rotate\"\t\"" + rotationDual + "\"\n";
            else
                out << "\tOption\t\"Rotate\"\t\"" + rotation + "\"\n";

            if(data.at(6) == "independent" || data.at(6) == "extended")
                out << "\tOption\t\"PreferredMode\"\t\"" + data.at(9) + "\"\n";
            else
                out << "\tOption\t\"PreferredMode\"\t\"" + data.at(2) + "\"\n";

            QString screenPosition;
            if(data.at(7) == "above")
                screenPosition = "above";
            else if(data.at(7) == "below")
                screenPosition = "below";
            else if(data.at(7) == "right")
                screenPosition = "rightof";
            else
                screenPosition = "leftof";

            if(data.at(6) == "extended")
                out << "\tOption\t\"" + screenPosition + "\"\t\"CRT\"\n";

            out << "EndSection" << "\n\n";

            out << "Section \"Monitor\"" << "\n";
            out << "\tIdentifier\t\"TV\"" << "\n";
            out << "\tOption\t\"Ignore\"\t\"true\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Monitor\"" << "\n";
            out << "\tIdentifier\t\"HDMI\"" << "\n";
            out << "\tOption\t\"Ignore\"\t\"true\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Monitor\"" << "\n";
            out << "\tIdentifier\t\"CRT-2\"" << "\n";
            out << "\t#Option\t\"Ignore\"\t\"true\"" << "\n";
            out << "\tOption\t\"Enable\"\t\"true\"" << "\n";
            out << "\tOption\t\"Type\"\t\"External\"" << "\n";
            out << "\tOption\t\"DIPort\"\t\"DVP0\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Monitor\"" << "\n";
            out << "\tIdentifier\t\"LCD-2\"" << "\n";
            out << "\tOption\t\"Ignore\"\t\"true\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Monitor\"" << "\n";
            out << "\tIdentifier\t\"DVI-2\"" << "\n";
            out << "\tOption\t\"Ignore\"\t\"true\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Monitor\"" << "\n";
            out << "\tIdentifier\t\"TV-2\"" << "\n";
            out << "\tOption\t\"Ignore\"\t\"true\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Device\"" << "\n";
            out << "\tDriver\t\""+ data.at(0) +"\"" << "\n";
            out << "\tVendorName\t\"VIA Tech\"" << "\n";
            out << "\tBoardName\t\"via\"" << "\n";
            out << "\tIdentifier\t\"Configured Video Device\"" << "\n";
            out << "\tOption\t\"MigrationHeuristic\" \"greedy\"" << "\n";
            if(data.at(0) == "pvr" || data.at(0) == "via" || data.at(0) == "radeon")
            {
                if(nAccel)
                    out << "\tOption\t\"Accel\"\t\"true\"\n";
                else
                    out << "\tOption\t\"Accel\"\t\"false\"\n";
            }
            out << "EndSection" << "\n\n";

            out << "Section \"Screen\"" << "\n";
            out << "\tDefaultDepth\t" + data.at(1) + "\n";
            out << "\tSubSection \"Display\"" << "\n";
            if(data.at(6) == "extended")
            {
                QString strFirstRes = data.at(2);
                QString strSecondRes = data.at(9);

                int nFirstWidth = strFirstRes.section('x', 0, 0).toInt();
                int nFirstHeight = strFirstRes.section('x', 1, 1).toInt();
                int nSecondWidth = strSecondRes.section('x', 0, 0).toInt();
                int nSecondHeight = strSecondRes.section('x', 1, 1).toInt();

                out << QString("\t\tVirtual %1 %2").arg(QString::number(nFirstWidth+nSecondWidth), QString::number(nFirstHeight+nSecondHeight)) << "\n";
            }
            out << "\t\tDepth\t" + data.at(1) + "\n";
            out << "\tEndSubSection" << "\n";
            out << "\tIdentifier\t\"Default Screen\"" << "\n";
            out << "\tDevice\t\"Configured Video Device\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Module\"" << "\n";
            out << "\tLoad\t\"glx\"" << "\n";
            out << "\tLoad\t\"dri\"" << "\n";
            out << "\tLoad\t\"extmod\"" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"DRI\"" << "\n";
            out << "\tGroup\t0" << "\n";
            out << "\tMode\t0666" << "\n";
            out << "EndSection" << "\n\n";

            out << "Section \"Extensions\"" << "\n";
            out << "\tOption\t\"Composite\"\t\"Enable\"" << "\n";
            out << "EndSection" << "\n\n";
        }
        file.close();
        sync();
    }
    qDebug() << "LCore:ModifyXorgFileForScreenMcD::3:: End.";
}

void LCore::ModifyXorgFileForScreen()
{
    qDebug() << "LCore:ModifyXorgFileForScreen::3:: Start.";

    QStringList strMultiDisplay = readDefaultsValue("EnableMultiDisplay");
    if(strMultiDisplay.isEmpty() || !strMultiDisplay.at(0).toInt())
    {
        ModifyXorgFileForScreenOLD();
        return;
    }

    if(qgetenv("BOARDARCH") == "via-arm")
    {
        //        driverConfirmation();

        if(qgetenv("BOARDTYPE") == "jseries")
            writeXORGForARM();
        else
            ModifyXorgForArm();
        return;
    }

    if(isTableExists(QString("MultipleDisplay")))
    {
        int strAccelValue = 0;
        QStringList listAcceleration = readTable("SysConf", "Property='Acceleration'", "Value");
        if(listAcceleration.count())
            strAccelValue = QString(listAcceleration.at(0)).toInt();

        QList <QStringList> strPrimaryDisplayDataList = readCompleteTable(QString("MultipleDisplay"), "");

        QStringList lines;
        if(!strPrimaryDisplayDataList.isEmpty())
        {
            QStringList strPrimaryDisplayData = strPrimaryDisplayDataList.at(0);

            QStringList strDriverList = getCardDriverMap().values();

            bool bDisplayLinkCheck = false;

            if(strDriverList.count() > 1)
            {
                bDisplayLinkCheck = true;
            }

            //======================================================
            QString line;
            // =================== screen section =====================
            line = "Section \"Screen\"";
            lines += line;

            line = "\tIdentifier\t\"Screen0\"";
            lines += line;

            line = "\tMonitor\t\"Monitor1\"";
            lines += line;

            line = "\tSubSection \"Display\"";
            lines += line;
            line = "\t\tModes\t\"" + strPrimaryDisplayData.at(3) + "\"";
            lines += line;
            line = "\tEndSubSection";
            lines += line;
            line  = "EndSection";
            lines += line;
            lines += "\n";
            // =========================================================

            // =================== Module section ======================
            for(int i = 0; i < strDriverList.count(); i++)
            {
                if( strDriverList.at(i) == "pvr")
                {
                    line = "Section \"Module\"";
                    lines += line;

                    line = "\tDisable \"dri\"";
                    lines += line;

                    line = "\tDisable \"dri2\"";
                    lines += line;

                    line = "\tDisable \"glx\"";
                    lines += line;

                    line  = "EndSection";
                    lines += line;
                    lines += "\n";
                }

                bool bmodeDrivercheck = false;
                //==========================================================

                // =================== Device section =====================
                line = "Section \"Device\"";
                lines += line;

                line = "\tIdentifier\t\"Card"+QString::number(i)+"\"";
                lines += line;

                if(getOSDetails(QString(SDA1OSBUILD)).contains("EAD", Qt::CaseInsensitive))
                    line = "\tDriver\t\"" + strDriverList.at(i) + "\"";
                else
                {
                    if(QFile::exists(QString("/usr/lib/xorg/modules/drivers/modesetting_drv.so")) && !bDisplayLinkCheck )   // for VM  GV-OS image
                    {
                        bmodeDrivercheck = true;
                        line = "\tDriver      \"modesetting\"";
                    }
                    else
                        line = "\tDriver\t\"" + strDriverList.at(i) + "\"";
                }

                lines += line;

                if(!bmodeDrivercheck) //if  drive=modesetting then not to write these parameter as told by prashat sir  Sat Jan  5 10:15:25 IST 2019
                {
                    if(strDriverList.at(i) == "pvr" || strDriverList.at(i) == "via" || strDriverList.at(i) == "radeon")
                    {
                        if(strDriverList.at(i) != "radeon")
                        {
                            if(strAccelValue)
                                line = "\tOption\t\"Accel\"\t\"true\"";
                            else
                                line = "\tOption\t\"Accel\"\t\"false\"";
                            lines += line;

                            line = "\tOption\t\"DRIDisableVSync\"\t\"false\"";
                            lines += line;

                            line = "\tOption\t\"SoftEXA\"\t\"off\"";
                            lines += line;

                            line = "\tOption\t\"FlipChain\"\t\"on\"";
                            lines += line;

                            line = "\tVideoRam\t4096";
                            lines += line;
                        }
                        else
                        {
                            line = "\tOption\t\"Accel\"\t\"true\"";
                            lines += line;

                            line = "\tOption\t\"AccelMethod\"\t\"EXA\"";
                            lines += line;

                            line = "\tOption\t\"ColorTiling\"\t\"on\"";
                            lines += line;

                            line = "\tOption\t\"EnablePageFlip\"\t\"on\"";
                            lines += line;

                            line = "\tVideoRam\t4096";
                            lines += line;

                            line = "\tOption\t\"AGPFastWrite\"\t\"on\"";
                            lines += line;
                        }
                    }

                    if(strDriverList.at(0) == "intel" && (getOSDetails(QString(OSBUILD_FILE)).contains("DS", Qt::CaseInsensitive) || getCPUname().contains("N3050") || (getCPUname().contains("N3000") || isLM600(getLenovoMT()))))  ///
                    {
                        line = "\tOption\t\"NOAccel\"\t\"false\"";
                        lines += line;

                        line = "\tOption\t\"AccelMethod\"\t\"SNA\"";
                        lines += line;

                        line = "\tOption\t\"SwapbuffersWait\"\t\"true\"";
                        lines += line;

                        line = "\tOption\t\"TearFree\"\t\"true\"";
                        lines += line;

                        line = "\tOption\t\"PageFlip\"\t\"true\"";
                        lines += line;

                        line = "\tOption\t\"Tiling\"\t\"true\"";
                        lines += line;
                        if(getCPUname().contains("N3000") || isLM600(getLenovoMT()))
                        {
                            line = "\tOption\t\"DRI\"\t\"true\"";
                            lines += line;
                        }
                    }

                    if(getVGAcard().contains("Nvdia", Qt::CaseInsensitive) ||  getVGAcard().contains("NVIDIA", Qt::CaseInsensitive) || getVGAcard().contains("radeon", Qt::CaseInsensitive) || getVGAcard().contains("Stoney", Qt::CaseInsensitive) || getVGAcard().contains("Carrizo", Qt::CaseInsensitive) || getVGAcard().contains("Baffin", Qt::CaseInsensitive) || getVGAcard().contains("98e4", Qt::CaseInsensitive) || getVGAcard().contains("15d8", Qt::CaseInsensitive) || getVGAcard().contains("Picasso", Qt::CaseInsensitive) || getVGAcard().contains("Barcelo", Qt::CaseInsensitive) || getVGAcard().contains("15e7", Qt::CaseInsensitive) )
                    {
                        if(!getVGAcard().contains("radeon", Qt::CaseInsensitive))
                        {
                            line = "\tOption\t\"EnablePageFlip\"\t\"on\"";
                            lines += line;
                        }

                        line = "\tOption\t\"TearFree\"\t\"on\"";
                        lines += line;

                        line = "\tOption\t\"AccelMethod\"\t\"glamor\"";
                        lines += line;

                        QStringList strListShadowPrimaryOff = readDefaultsValue("ShadowPrimaryOff");
                        if((!strListShadowPrimaryOff.isEmpty() && strListShadowPrimaryOff.at(0) == "1") || getVGAcard().contains("15d8", Qt::CaseInsensitive) || getVGAcard().contains("Picasso", Qt::CaseInsensitive) ||  getVGAcard().contains("Stoney", Qt::CaseInsensitive) || getVGAcard().contains("98e4", Qt::CaseInsensitive))
                        {
                            line = "\tOption\t\"ShadowPrimary\"\t\"off\"";
                            lines += line;
                        }
                        else
                        {
                            line = "\tOption\t\"ShadowPrimary\"\t\"on\"";
                            lines += line;
                        }
                    }

                    QString strBoardSeries;
                    strBoardSeries=getVGAcard().trimmed();
                    //if ( strDriverList.at(i) == "modesetting" && (strBoardSeries.contains("Z36xxx") || strBoardSeries.contains("Z37xxx")))
                    if (strDriverList.at(0) == "intel" && (strBoardSeries.contains("Z36xxx") || strBoardSeries.contains("Z37xxx")))
                    {
                        line = "\tOption\t\"AccelMethod\"\t\"uxa\"";
                        lines += line;

                        line = "\tOption\t\"TearFree\"\t\"true\"";
                        lines += line;

                        line = "\tOption\t\"TripleBuffer\"\t\"true\"";
                        lines += line;
                    }
                }

                line  = "EndSection";
                lines += line;
                lines += "\n";
                // =========================================================

                if(strDriverList.at(i) == "radeon")    /// Added  Extensions section fot radeon driver on 24 Jan 2017
                {
                    line = "Section \"Extensions\"";
                    lines += line;

                    line ="\tOption\t\"Composite\"\t\"Enable\"";
                    lines += line;

                    line ="\tOption\t\"RENDER\"\t\"Enable\"";
                    lines += line;

                    line  = "EndSection";
                    lines += line;
                    lines += "\n";
                }

                // =========================================================
                if((strDriverList.at(i) == "intel" && (getCPUname().contains("N3000") || isLM600(getLenovoMT()))) || (strDriverList.at(i) == "radeon"))
                {
                    line = "Section \"DRI\"";
                    lines += line;

                    if(strDriverList.at(i) == "radeon")    /// Added Group parameter for radeon driver on 24 Jan 2017
                    {
                        line = "\tGroup\t\"Video\"";
                        lines += line;
                    }

                    line = "\tMode\t0666";
                    lines += line;
                    line  = "EndSection";
                    lines += line;
                    lines += "\n";
                }
            }
        }

        QFile file(XORGCONF_FILE);
        if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
            return;

        QTextStream out(&file);
        for (int i = 0; i < lines.size(); ++i)
            out << lines.at(i) << "\n";

        file.close();
        sync();
    }
    else
        changeDisplayDriver();
    qDebug() << "LCore:ModifyXorgFileForScreen::3:: End.";

}

QStringList LCore::getCardCount(void)
{
    qDebug()<<"QStringList LCore::getCardCount::start";
    QDir d("/sys/class/drm/");
    QStringList strlist;
    QFileInfoList listinfo = d.entryInfoList(QDir::AllDirs);

    for(int i = 0,j=0; i < listinfo.count(); i++)
    {
        QString strFileName = listinfo.at(i).fileName();
        if(strFileName == QString("card"+QString::number(j)))
        {
            strlist.append(strFileName);
            j++;
        }
    }

    qDebug()<<"QStringList LCore::getCardCount::returns::strlist" << strlist;
    qDebug()<<"QStringList LCore::getCardCount::End";
    return strlist;
}

// cppcheck-suppress unusedFunction
QStringList LCore::getDriverName()
{
    qDebug()<<"QStringList LCore::getDriverName::3::start";
    system("lspci -k | egrep \"VGA|Display|driver\" >> /tmp/driverlist");
    QStringList strlistDriver;

    QFile File(QString("/tmp/driverlist"));
    if(File.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&File);
        while (!in.atEnd())
        {
            QString line = in.readLine();

            if(line.contains(" controller:"))
            {
                QString strLine = in.readLine().trimmed();
                QString strDriver;
                qDebug()<<"strlline"<<strLine;

                strDriver = strLine.section("Kernel driver in use:",1,1).trimmed();
                qDebug()<<"before"<<strDriver;
                if(line.contains("Intel"))
                    strDriver = "intel";

                qDebug()<<"strDriver:"<<strDriver;

                strlistDriver.append(strDriver);
            }
        }
        File.close();
        system("rm /tmp/driverlist");
    }

    qDebug()<<"QStringList LCore::getDriverName::3::listdriver"<<strlistDriver;
    qDebug()<<"QStringList LCore::getDriverName::3::end";
    return strlistDriver;
}

QMap<QString,QString> LCore::getCardDriverMap()
{
    qDebug()<<"LCore::getCardDriverMap::3::start";
    QMap<QString,QString> strCardDriverMap;
    QStringList strCardList = getCardCount();
    if(!strCardList.isEmpty())
    {
        int nCount = strCardList.count();
        QProcess *proc = new QProcess;

        for(int i=0; i<nCount; i++)
        {
            proc->start("ls", QStringList() << QString("/sys/class/drm/card%1/device/driver/module/drivers/").arg(QString::number(i)));
            proc->waitForFinished(-1);

            if(proc->readAllStandardError().isEmpty())
            {
                QString strOutPut = proc->readAllStandardOutput();
                if(strOutPut.contains("pci:"))
                {
                    QString strDriver = strOutPut.section(":",1,1).trimmed();

                    if(strDriver == "i915")
                        strDriver = "intel";

                    strCardDriverMap.insert(QString("card"+QString::number(i)), strDriver );
                }
            }
        }

        qDebug()<<"LCore::getCardDriverMap::3::card driver map::"<<strCardDriverMap;
        qDebug()<<"LCore::getCardDriverMap::3::end";
        delete proc;
    }
    return strCardDriverMap;
}

// cppcheck-suppress unusedFunction
void LCore::ExecuteMultiMonitorSettings()
{
    qDebug() << "LCore:ExecuteMultiMonitorSettings::3:: Start.";
    system("rm -f /tmp/xrandrout");

    QString strPrimary;
    QList<QStringList> strlistMonitor = readCompleteTable(QString("MultipleDisplay"),"");
    QMap<QString,QString> mapDefaultname,mapSetMonitor,mapCloneResolution;

    if(!strlistMonitor.isEmpty())
    {
        QList<QStringList> listClone,listExtended;
        QMap<QString,QString> MapResolution;
        QString strDefaultPrimary,strDefaultStatus;
        foreach(const QStringList& strlistScreen, strlistMonitor)
        {
            MapResolution.insert(strlistScreen.at(9),strlistScreen.at(0));
            mapSetMonitor.insert(strlistScreen.at(0),strlistScreen.at(10));
            mapCloneResolution.insert(strlistScreen.at(0),strlistScreen.at(3));
            if(strlistScreen.at(17) == "0" && strlistScreen.at(18) == "0")
                strPrimary = strlistScreen.at(9);
            qDebug()<<"LCore:ExecuteMultiMonitorSettings::3::primary:"<<strPrimary;

            if(strlistScreen.at(7) == "clone")
                listClone.append(strlistScreen);
            else if(strlistScreen.at(7) == "extended")
                listExtended.append(strlistScreen);

            if(strlistScreen.at(6) == "2")
            {
                strDefaultPrimary = strlistScreen.at(0);
                strDefaultStatus = strlistScreen.at(14);
            }
            mapDefaultname.insert(strlistScreen.at(0),strlistScreen.at(9));
        }

        QStringList args;
        QStringList strlistcmd;
        foreach(QStringList strlistTemp, listExtended)
        {
            args.clear();
            if(strlistTemp.at(14) == "enable") //if we set auto after setting reoslution then it sets maximum resolution
            {
                args << "--output" << strlistTemp.at(9);
                args.append("--auto");
                qDebug()<<"LCore:ExecuteMultiMonitorSettings::3::args"<<args;
                setMultiMonitor(args);
            }

            if(strlistTemp.at(17) == "0" && strlistTemp.at(18) == "0")
            {
                QStringList strlist2;
                strlist2.append("--output");
                strlist2.append(strlistTemp.at(9));
                strlist2.append("--pos");
                strlist2.append("0x0");
                strlist2.append("--mode");
                strlist2.append(strlistTemp.at(3));
                qDebug()<<"LCore:ExecuteMultiMonitorSettings::3::strlist2::"<<strlist2;
                QProcess *proc = new QProcess();
                proc->start("xrandr.orig",strlist2);
                proc->waitForFinished(-1);
                delete proc;
            }
            else
            {
                QString strMonitor = strlistTemp.at(9);
                QString strPosition = MapResolution.key(strlistTemp.at(10));
                QString strSetMonitor = mapSetMonitor.value(strlistTemp.at(0));
                QString strPositionClone = mapSetMonitor.value(strSetMonitor);

                if(strPositionClone == strlistTemp.at(0))
                {
                    strPosition   = strPrimary;
                }

                QString strSetPosition;
                QString strPosition1 = strlistTemp.at(8).trimmed();
                qDebug()<<"strPosition:::::"<<strPosition1;
                if(strPosition1 == "Right of")
                    strSetPosition = "--right-of";
                else if(strPosition1 == "Left of")
                    strSetPosition = "--left-of";
                else if(strPosition1 == "Above")
                    strSetPosition = "--above";
                else if(strPosition1 == "Below")
                    strSetPosition = "--below";

                strlistcmd << "--output";
                strlistcmd << strMonitor;

                if(!strSetPosition.isEmpty())
                    strlistcmd.append(strSetPosition);
                if(!strPosition.isEmpty())
                    strlistcmd.append(strPosition);

                strlistcmd.append("--mode");
                strlistcmd.append(strlistTemp.at(3));
                strlistcmd.append("-r");
                strlistcmd.append(strlistTemp.at(5));
            }
        }
        
        QMap<QString,QString> mapPosition = mapMonitorPosition();
        foreach(QStringList strlist , listClone)
        {
            args.clear();
            if(strlist.at(14) == "enable") //if we set auto after setting reoslution then it sets maximum resolution
            {
                args << "--output" << strlist.at(9);
                args.append("--auto");
                setMultiMonitor(args);
            }

            QStringList strlistTemp;
            strlistTemp.append("--output");
            strlistTemp.append(strlist.at(9));
            QString strSetMonitor = mapDefaultname.value(strlist.at(10));
            qDebug()<<"setMonitor::defualtname::::"<<strSetMonitor;
            strlistTemp.append("--mode");
            qDebug()<<"strlistTemp"<<strlistTemp;
            QString strResolution = mapCloneResolution.value(strlist.at(10));
            strlistTemp.append(strResolution);
            QString strRefeshrate = getDefaultRefreshrate(strSetMonitor,strResolution);
            strlistTemp.append("-r");
            strlistTemp.append(strRefeshrate);
            strlistTemp.append("--same-as");
            strlistTemp.append(strSetMonitor);
            strlistcmd.append(strlistTemp);
        }

        qDebug()<<"LCore:ExecuteMultiMonitorSettings::3::strlistcmd::"<<strlistcmd;
        QProcess *proc = new QProcess;
        proc->start("xrandr.orig", strlistcmd);
        proc->waitForFinished(-1);

        foreach(const QStringList& strlistScreen, strlistMonitor)
        {
            args.clear();
            args << "--output" << strlistScreen.at(9);

            if(strlistScreen.at(6) == "2" && strlistScreen.at(14) == "enable")
                args.append("--primary");

            args.append("--brightness");
            args.append(strlistScreen.at(15));
            args.append("--gamma");

            QString strR = strlistScreen.at(16).section(",",0,0);
            QString strG = strlistScreen.at(16).section(",",1,1);
            QString strB = strlistScreen.at(16).section(",",2,2);
            QString strGamma = strR+":"+strG+":"+strB;
            args.append(strGamma);
            QString strRotate = strlistScreen.at(4);
            QString strRotation;

            if(strRotate == "Inverted")
                strRotation = "inverted";
            else if(strRotate == "Clockwise")
                strRotation = "right";
            else if(strRotate == "Anti-clockwise")
                strRotation = "left";
            else if(strRotate == "Custom")
                strRotation = "Custom";
            else
                strRotation = "normal";

            args << "--rotate" << strRotation;
            qDebug()<<"LCore:ExecuteMultiMonitorSettings::3::args::"<<args;
            setMultiMonitor(args);
            args.clear();

            if(strlistScreen.at(14) == "disable")
            {
                args << "--output" << strlistScreen.at(9);
                args.append("--off");
                setMultiMonitor(args);
            }
        }
        if(strDefaultStatus == "disable")
        {
            QProcess *proc1 = new QProcess;
            QStringList strlist;
            strlist.append("--listmonitors");
            proc1->start("xrandr.orig",strlist);
            proc1->waitForFinished(-1);

            if(proc1->readAllStandardError().isEmpty())
            {
                while(!proc1->atEnd())
                {
                    QString strline = proc1->readLine();
                    if(strline.contains("0:"))
                    {
                        updateTable(QString("MultipleDisplay"),QStringList()<<"PrimaryDisplay=0","Monitor='"+strDefaultPrimary+"'");
                        QString strSecondPrimary = strline.section(" ",5,5);
                        QString str = mapDefaultname.key(strSecondPrimary.trimmed());
                        updateTable(QString("MultipleDisplay"),QStringList()<<"PrimaryDisplay=2","Monitor='"+str+"'");
                        QStringList strlistTemp;
                        strlistTemp.append("--output");
                        strlistTemp.append(str);
                        strlistTemp.append("--primary");
                        qDebug()<<"LCore:ExecuteMultiMonitorSettings::3::strlistTemp::"<<strlistTemp;
                        proc->start("xrandr.oring",strlistTemp);
                        break;
                    }
                }
            }
        }
    }
    qDebug() << "LCore:ExecuteMultiMonitorSettings::3:: End.";
}

QMap<QString,QString> LCore::mapMonitorPosition(void)
{
    qDebug()<<"LCore::mapMonitorPosition::3::start";
    QMap<QString,QString> map;
    QProcess *proc = new QProcess;
    proc->start("xrandr.orig");
    proc->waitForFinished(-1);

    if(proc->readAllStandardError().isEmpty())
    {
        while(!proc->atEnd())
        {
            QString strline = proc->readLine();
            if(strline.contains(" connected"))
            {
                QString strMonitor = strline.section(" connected ",0,0);
                QString strTemp = strline.section(" ",2,2);
                QString strX = strTemp.section("+",1,1);
                QString strY = strTemp.section("+",2,2);
                QString strPosition = strX+"x"+strY;
                qDebug()<<"Monitor"<<strMonitor<<"Position"<<strPosition;
                map.insert(strMonitor,strPosition);
            }
        }
    }

    qDebug()<<"LCore::mapMonitorPosition::3::return map::"<<map;
    qDebug()<<"LCore::mapMonitorPosition::3::End";
    return map;
}

// cppcheck-suppress unusedFunction
void LCore::ExecuteSecondDisplaySettings()
{
    qDebug() << "LCore:ExecuteSecondDisplaySettings::3:: Start.";

    if(isTableExists(QString("DisplaySettings")))
    {
        QStringList data = readTable(QString("DisplaySettings"), "");
        if(!data.isEmpty())
        {
            {
                int nDisplayCount = 0;
                QString output1,output2,output3,output4;
                QProcess *proc = new QProcess();
                proc->start("xrandr.orig");
                proc->waitForFinished(-1);
                while(!proc->atEnd())
                {
                    QString line = QString(proc->readLine());
                    QString strOutput = line.section(' ', 0, 0);
                    QString strStatus = line.section(' ', 1, 1);
                    QString strPrimary = line.section(' ', 2, 2);

                    if(strStatus == QString("connected"))
                    {
                        if(strPrimary == QString("primary"))
                            output1 = strOutput;
                        else if(output2.isEmpty() == true)
                            output2 = strOutput;
                        else if(output3.isEmpty() == true)
                            output3 = strOutput;
                        else if(output4.isEmpty() == true)
                            output4 = strOutput;

                        nDisplayCount++;
                    }
                }
                delete proc;

                QStringList strListOutput;
                strListOutput << output1 << output2 << output3 << output4;

                if(output1.isEmpty() && qgetenv("BOARDARCH") == "via-arm")
                    output1 = "DVI-I";

                if(output1.isEmpty() && qgetenv("OSPROJECT") == "McD")
                    output1 = "CRT";

                QString rotation;
                if(data.at(10) == "Inverted")
                    rotation = "inverted";
                else if(data.at(10) == "Clockwise")
                    rotation = "right";
                else if(data.at(10) == "Anti-clockwise")
                    rotation = "left";
                else
                    rotation = "normal";

                QString screenPosition;
                if(data.at(7) == "above")
                    screenPosition = "--above";
                else if(data.at(7) == "below")
                    screenPosition = "--below";
                else if(data.at(7) == "right")
                    screenPosition = "--right-of";
                else
                    screenPosition = "--left-of";

                QProcess *setDisplayProc = new QProcess();
                QString program = "xrandr.orig";

                if(data.at(6) == "extended")
                {
                    QFile dispfile("/root/multipleDisplay.sh");
                    if(dispfile.open(QIODevice::WriteOnly | QIODevice::Text) == true)
                    {
                        QString args1;

                        QTextStream dispout(&dispfile);
                        dispout << "#!/bin/bash \n";

                        if(nDisplayCount == 2)
                        {
                            args1 ="xrandr.orig --output "+ output2 +" "+ screenPosition +" "+ output1 +" "+ "--output" +" "+ output2 +" "+ "--rotate" +" "+ rotation +" "+ "--mode" +" "+ data.at(9) +" "+ "-r" +" "+ data.at(11);
                            dispout << args1 << "\n";
                        }
                        else if(nDisplayCount == 3)
                        {
                            QPair <QString , QString> pairHighestResRate = getHighestResolution(3);
                            args1 ="xrandr.orig --output "+ output3 +" --rotate "+ rotation +" --mode "+ pairHighestResRate.first +" -r "+ pairHighestResRate.second;
                            dispout << args1 << "\n";
                            args1 ="xrandr.orig --output "+ output2 +" --rotate "+ rotation +" --mode "+ data.at(9) +" -r "+ data.at(11);
                            dispout << args1 << "\n";

                            args1 ="xrandr.orig --output "+ output2 +" "+ screenPosition +" "+ output1;
                            dispout << args1 << "\n";
                            args1 ="xrandr.orig --output "+ output3 +" "+ screenPosition +" "+ output2;
                            dispout << args1 << "\n";
                        }
                        else
                        {
                            args1 ="xrandr.orig --output "+ output4 +" "+ screenPosition +" "+ output2 ;
                            dispout << args1 << "\n";
                            args1 ="xrandr.orig --output "+ output1 +" "+ screenPosition +" "+ output4 ;
                            dispout << args1 << "\n";
                            args1 ="xrandr.orig --output "+ output3 +" "+ screenPosition +" "+ output1 ;
                            dispout << args1 << "\n";
                            args1 ="xrandr.orig --output "+ output2 +" --rotate "+ rotation +" --mode "+ data.at(9) +" -r "+ data.at(11);
                            dispout << args1 << "\n";
                            QPair <QString , QString> pairHighestResRate = getHighestResolution(3);
                            args1 ="xrandr.orig --output "+ output3 +" --rotate "+ rotation +" --mode "+ pairHighestResRate.first +" -r "+ pairHighestResRate.second;
                            dispout << args1 << "\n";
                            pairHighestResRate = getHighestResolution(4);
                            args1 ="xrandr.orig --output "+ output4 +" --rotate "+ rotation +" --mode "+ pairHighestResRate.first +" -r "+ pairHighestResRate.second;
                            dispout << args1 << "\n";
                        }
                    }

                    dispfile.close();
                    dispfile.setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::ExeUser | QFile::ReadGroup | QFile::ExeGroup | QFile::ReadOther | QFile::ExeOther);
                    system("/root/multipleDisplay.sh");
                    system("cp -f /root/multipleDisplay.sh /opt/multipleDisplay.sh; rm /root/multipleDisplay.sh");
                }
                else if(data.at(6) == "clone")
                {
                    QString protation;
                    if(data.at(3) == "Inverted")
                        protation = "inverted";
                    else if(data.at(3) == "Clockwise")
                        protation = "right";
                    else if(data.at(3) == "Anti-clockwise")
                        protation = "left";
                    else
                        protation = "normal";

                    QFile wfile("/root/multipleDisplay.sh");
                    int nScreenCount = getScreenCount();
                    if(wfile.open(QIODevice::WriteOnly | QIODevice::Text))
                    {
                        QTextStream out(&wfile);
                        out << "#!/bin/bash \n";
                        for(int i = 2; i <= nScreenCount; i++)
                        {
                            QString arguments = "xrandr --output " + strListOutput.at(i-1) + " --same-as " + output1 + " --rotate " + protation + " --scale 1.25x1.25 ";
                            QString argument2 = "xrandr --output " + strListOutput.at(i-1) + " --same-as " + output1 + " --rotate " + protation + " --scale 1x1 ";

                            QPair <QString , QString> pairHighestResRate = getHighestResolution(i);
                            if(i == 2)
                            {
                                arguments.append("--mode " + data.at(2) + " -r " + data.at(4));
                                argument2.append("--mode " + data.at(2) + " -r " + data.at(4));
                            }
                            else
                            {
                                arguments.append("--mode " + pairHighestResRate.first + " -r " + pairHighestResRate.second);
                                argument2.append("--mode " + pairHighestResRate.first + " -r " + pairHighestResRate.second);
                            }

                            qDebug() << "LCore:ExecuteSecondDisplaySettings::3:: arguments= ", arguments;
                            qDebug() << "LCore:ExecuteSecondDisplaySettings::3:: argument2= ", argument2;
                            out << arguments;
                            out << "\n";
                            out << argument2;
                            out << "\n";
                        }

                    }

                    wfile.close();
                    wfile.setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::ExeUser | QFile::ReadGroup | QFile::ExeGroup | QFile::ReadOther | QFile::ExeOther);
                    system("/root/multipleDisplay.sh");
                    system("cp -f /root/multipleDisplay.sh /opt/multipleDisplay.sh; rm /root/multipleDisplay.sh");
                }

                QStringList args;
                args << "--output" << output2;
                if(data.at(6) == "independent")
                    args << "--rotate" << rotation << "--mode" << data.at(9) << "-r" << data.at(11);

                qDebug() << "LCore:ExecuteSecondDisplaySettings::3:: Args = " << args;


                if(data.at(6) != "clone" && data.at(6) != "extended")
                {
                    setDisplayProc->start(program, args);
                    setDisplayProc->waitForFinished(-1);
                    setDisplayProc->deleteLater();
                }
               qDebug() << "LCore:ExecuteSecondDisplaySettings::3:: command :" << program << args;
            }
        }
    }

    ModifyXorgFileForScreen();
    qDebug() << "LCore:ExecuteSecondDisplaySettings::3:: End.";
}

// cppcheck-suppress unusedFunction
void LCore::ExecuteDisplaySettings()
{
    qDebug() << "LCore:ExecuteDisplaySettings::3:: Start.";

    system("rm -f /tmp/xrandrout; xrandr > /tmp/xrandrout");
    if(isTableExists(QString("DisplaySettings")))
    {
        QStringList data = readTable(QString("DisplaySettings"), "");
        if(!data.isEmpty())
        {

            QStringList strListOutput, strlistCommands;

            QString output1 = getDisplayDevice("Device1");
            QString output2 = getDisplayDevice("Device2");
            QString output3 = getDisplayDevice("Device3");
            QString output4 = getDisplayDevice("Device4");

            strListOutput << output1 << output2 << output3 << output4;

            /// for swaping between Scrren 1 & Screen2 as primary by ritesh on 3rd March 2017

            QString rotation;
            if(data.at(3) == "Inverted")
                rotation = "inverted";
            else if(data.at(3) == "Clockwise")
                rotation = "right";
            else if(data.at(3) == "Anti-clockwise")
                rotation = "left";
            else
                rotation = "normal";

            QProcess *setDisplayProc = new QProcess();
            QString program = "xrandr";
            QStringList args;
            args << "--output" << strListOutput.at(0) << "--pos 0x0";

            args << "--rotate" << rotation;

            args << "--mode" << data.at(2) << "-r" << data.at(4);

            qDebug() << "LCore:ExecuteDisplaySettings::3:: args= "<< args;
            setDisplayProc->start(program, args);
            setDisplayProc->waitForFinished(-1);

            strlistCommands << QString(program+" "+args.join(" "));

            int nScreenCount = getScreenCount();
            if(data.at(6) != "independent")
            {
                QStringList args1;
                for(int i = 2; i <= nScreenCount; i++)
                {
                    args1.clear();
                    args1 << "--output" << strListOutput.at(i-1);
                    args1 << "--rotate" << data.at(10);

                    QPair <QString , QString> pairHighestResRate = getHighestResolution(i);
                    if(i == 2) // its a second Display
                    {
                        args1 << "--mode" << data.at(9) << "-r" << data.at(11);
                    }
                    else
                    {
                        args1 << "--mode" << pairHighestResRate.first << "-r" << pairHighestResRate.second;
                    }

                    qDebug() << "LCore:ExecuteDisplaySettings::3:: args= "<< args;
                    setDisplayProc->start(program, args1);
                    setDisplayProc->waitForFinished(-1);
                  
                    strlistCommands << QString(program+" "+args1.join(" "));
                }
            }

            setDisplayProc->deleteLater();
            system("rm -f /tmp/xrandrout; xrandr > /tmp/xrandrout");

            // This sync and sleep is needed for proper command execution.
            if(isTableExists("TouchScreen"))
            {
                sync();
                //  sleep(2);
                ExecuteTouchScreenAfterDisplaySettings();
            }

            QFile dispfile("/root/firstDisplay.sh");
            if(dispfile.open(QIODevice::WriteOnly | QIODevice::Text) == true)
            {
                QTextStream dispout(&dispfile);
                dispout << "#!/bin/bash \n";
                foreach(const QString& strData, strlistCommands)
                {
                  dispout << strData << "\n";
                }
            }
            dispfile.close();
            dispfile.setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::ExeUser | QFile::ReadGroup | QFile::ExeGroup | QFile::ReadOther | QFile::ExeOther);
            system("cp -f /root/firstDisplay.sh /opt/firstDisplay.sh; rm /root/firstDisplay.sh");
        }
    }

    ModifyXorgFileForScreen();
    qDebug() << "LCore:ExecuteDisplaySettings::3:: End.";
}

// cppcheck-suppress unusedFunction
QStringList LCore::getPosition(const QString& strPosition, const QString& strResolution, const QString& strDefault)
{
    qDebug()<<"LCore::getPosition::3::start";
    qDebug()<<"strResolution"<<strResolution;
    int nXD = strDefault.section("x",0,0).toInt();
    int nYD = strDefault.section("x",1,1).toInt();
    int nX = strResolution.section("x",0,0).toInt();
    int nY = strResolution.section("x",1,1).toInt();
    int x = 0, y = 0;

    if(strPosition == "Right of")
    {
        qDebug()<<"Right";
        x = nX;
        y = nYD ;
    }
    else if(strPosition == "Left of")
    {
        qDebug()<<"left";
        x = -nX;
        y = nYD;
    }
    else if(strPosition == "Above")
    {
        qDebug()<<"above";
        x = nXD;
        y = -nY;
    }
    else if(strPosition == "Below")
    {
        qDebug()<<"below";
        x = nXD;
        y = nY;
    }

    qDebug()<<"LCore::SetPosition::x:"<<x;
    qDebug()<<"LCore::SetPosition::y:"<<y;

    QStringList strlistResolution;
    strlistResolution.append(QString::number(x));
    strlistResolution.append(QString::number(y));

    qDebug()<<"LCore::getPosition::3::End";
    return strlistResolution;
}

// cppcheck-suppress unusedFunction
void LCore::setMonitorPosition(const QString& strMonitor, int nX, int nY)
{
    qDebug()<<"LCore::setMonitorPosition::3::start";
    QString cmd1 = "xrandr.orig --output "+strMonitor+" --pos "+QString::number(nX)+"x"+QString::number(nY);
    qDebug()<<"cmd1"<<cmd1;
    qDebug()<<"LCore::setMonitorPosition::3::End";
}


void LCore::setMultiMonitor(QStringList strlistArg)
{
    qDebug()<<"LCore::setMultiMonitor::3::start";
    QProcess *setDisplayProc = new QProcess();
    setDisplayProc->start("xrandr.orig", strlistArg);
    setDisplayProc->waitForFinished(-1);
    setDisplayProc->deleteLater();
    qDebug()<<"LCore::setMultiMonitor::3::End";
}

QString LCore::getDisplayDevice(const QString& device)
{
    qDebug() << "LCore:getDisplayDevice::3:: Start.";
    qDebug() << "LCore:getDisplayDevice::3:: args : device = " << device;

    QString output1,output2,output3,output4;
    QProcess *proc = new QProcess();
    proc->start("xrandr.orig");
    proc->waitForFinished(-1);
    while(!proc->atEnd())
    {
        QString line = QString(proc->readLine());
        QString strOutput = line.section(' ', 0, 0);
        QString strStatus = line.section(' ', 1, 1);
        QString strPrimary = line.section(' ', 2, 2);

        if(strStatus == QString("connected"))
        {
            if(strPrimary == QString("primary"))
                output1 = strOutput;
            else if(output2.isEmpty() == true)
                output2 = strOutput;
            else if(output3.isEmpty() == true)
                output3 = strOutput;
            else if(output4.isEmpty() == true)
                output4 = strOutput;
        }
    }
    delete proc;

    QString strReturnDevice;

    if(device == "Device1")
    {
        strReturnDevice = output1;
    }
    else if(device == "Device2")
    {
        strReturnDevice = output2;
    }
    else if(device == "Device3")
    {
        strReturnDevice = output3;
    }
    else if(device == "Device4")
    {
        strReturnDevice = output4;
    }

    return strReturnDevice;
}

// cppcheck-suppress unusedFunction
void LCore::UpdateDB(int opcode)
{
    qDebug() << "LCore:UpdateDB::3:: Start.";
    qDebug() << "LCore:UpdateDB::3:: args : opcode = " << opcode;

    if(opcode==0)
    {
        if(isTableExists("ConnectionTable"))
        {
            updateTable("ConnectionTable", QStringList("Status=\"\""), "");
            updateTable("ConnectionTable", QStringList("PID=\"\""), "");
        }

        QDir dir1(QString(PNAGENT_LIST_DIR));
        dir1.setFilter(QDir::Files);
        QFileInfoList list1 = dir1.entryInfoList();
        for (int i = 0; i < list1.size(); ++i)
        {
            QFileInfo fileInfo = list1.at(i);
            qDebug() << "LCore:UpdateDB::3:: "<< QFile::remove(QString(PNAGENT_LIST_DIR)+fileInfo.fileName());
        }

        QDir dir2(QString(CLIENT2X_DIR));
        dir2.setFilter(QDir::Files);
        QFileInfoList list2 = dir2.entryInfoList();
        for (int i = 0; i < list2.size(); ++i)
        {
            QFileInfo fileInfo = list2.at(i);
            qDebug() << "LCore:UpdateDB::3:: " << QFile::remove(QString(CLIENT2X_DIR)+fileInfo.fileName());
        }

        if(isTableExists("DesktopWidget"))
        {
            QStringList connections = readTable("DesktopWidget", "", "Path");
            for(int i = 0; i < connections.count(); i++)
            {
                if(connections.at(i).contains(':'))
                    deleteEntry("DesktopWidget", "Path='"+connections.at(i)+"'");
            }
        }

        if(isTableExists("PNAgent"))
        {
            QStringList pna_connections = readTable("PNAgent", "", "Name");
            for(int i=0; i<pna_connections.size(); i++)
            {
                qDebug() << "LCore:UpdateDB::3:: pna_connections : " << pna_connections << ": " << QFile::exists(MENU_FILE);
                LaunchPNAgentAppsOnMenu( pna_connections.at(i), 0);
            }
            QProcess::execute("sync");
        }

        if(isTableExists("Client2x"))
        {
            QStringList xclient_connections = readTable("Client2x", "", "Name");
            for(int i=0; i<xclient_connections.size(); i++)
            {
                Launch2XClientAppsOnMenu(xclient_connections.at(i),0);
            }
        }

        if(qgetenv("BOARDARCH") != "via-arm")
        {
            /************************ For VPN ************************/
            QDir dir(QString(PPP_DIR));
            dir.setFilter(QDir::Files);
            QFileInfoList list = dir.entryInfoList();
            for(int i = 0; i < list.size(); ++i)
            {
                QFileInfo fileInfo = list.at(i);
                QString filename = QString(PPP_DIR) + fileInfo.fileName();
                QFile file(filename);
                if(file.exists() && (filename.contains("chap") || filename.contains("pap") || filename.contains("mschap") || filename.contains("mschap-v2")))
                {
                    file.remove();
                }
            }

            /**********************************************************/
        }

        if(isTableExists("LogsTable"))
            updateTable("LogsTable", QStringList() << "Status='Disconnected'", "");

        if(isTableExists("UserLogs"))
            updateTable("UserLogs", QStringList() << "Status='Disconnected'", "");

    }
    else
    {
        if(checkLink("xfreerdp"))
        {
            QFile file(FREERDP_KEYMAP_FILE);
            if(!file.open(QIODevice::WriteOnly | QIODevice::Text))
                return;
            QTextStream out(&file);
            bool bLayoutFound = false;
            QString line;
            QProcess procKbd;
            procKbd.start("xfreerdp", QStringList("--kbd-list"));
            procKbd.waitForFinished(-1);

            while(!procKbd.atEnd())
            {
                if((line = procKbd.readLine()).contains("Keyboard Layouts"))
                {
                    bLayoutFound = true;
                    break;
                }
            }

            if(!bLayoutFound)
            {
                procKbd.start("xfreerdp", QStringList("/kbd-list"));
                procKbd.waitForFinished(-1);

                while(!procKbd.atEnd())
                {
                    if((line = procKbd.readLine()).contains("Keyboard Layouts"))
                        break;
                }
            }

            while(!procKbd.atEnd())
            {
                line = procKbd.readLine();
                if(line.left(1) != "0")
                    break;
                out << line;
            }
            file.close();
            sync();
        }
    }
    qDebug() << "LCore:UpdateDB::3:: End.";
}

// cppcheck-suppress unusedFunction
QString LCore::convertSizeToHumanReadable(QString size)
{
    qDebug() << "LCore:convertSizeToHumanReadable::3:: Start.";
    double totalSize = 0;
    totalSize = size.toInt();
    QString sizeType = QString(" KB");
    if(totalSize > 1024)
    {
        totalSize = totalSize/1024;
        sizeType = QString(" MB");
        if(totalSize > 1024)
        {
            totalSize = totalSize/1024;
            sizeType = QString(" GB");
            if(totalSize > 1024)
            {
                totalSize = totalSize/1024;
                sizeType = QString(" TB");
            }
        }
    }
    qDebug() << "LCore:convertSizeToHumanReadable::3:: End.";
    return QString::number(totalSize, 'f', 2) + sizeType;
}

// cppcheck-suppress unusedFunction
void LCore::ExecuteJetDirectSettings()
{
    qDebug() << "LCore:ExecuteJetDirectSettings::3:: Start.";

    QDir dir("/dev/usb"); ///Changes done so that JetDirect and avialable port(/dev/sda/lp) synchronization --Varsha
    dir.setFilter(QDir::NoDotAndDotDot | QDir::System);
    QFileInfoList  list = dir.entryInfoList();
    QStringList lp_Port;
    QString strFileName;
    for (int i = 0; i < list.size(); ++i)
    {
        QFileInfo fileInfo = list.at(i);
        strFileName.append(fileInfo.filePath()+",");
    }

    int ji=0;
    for(ji=0; ji<4; ji++)
    {
        QString str="/dev/usb/lp"+QString::number(ji);
        if(strstr(strFileName.toLatin1().constData(),str.toLatin1().constData()))
        {
            lp_Port.append(str);
        }
        else
        {
            lp_Port.append("NON");
        }
    }

    QProcess::execute("kill -9 `ps ax | grep -v grep | grep printsrv | awk '{print $1}'`");
    QProcess::execute("kill -9 `ps ax | grep -v grep | grep p910nd | awk '{print $1}'`");

    QList<QStringList> values = readCompleteTable("JDSettings","");

    if(!values.isEmpty())
    {
        for(int i=0;i<values.count();i++)
        {
            QString dev;
            if(values.at(i).at(1).startsWith("COM"))
            {
                int num = values.at(i).at(1).right(1).toInt();
                dev = "/dev/ttyS"+QString::number(num-1);
            }
            else if(values.at(i).at(1).startsWith("LPT"))
            {
                int num = values.at(i).at(1).right(1).toInt();
                dev = "/dev/lp"+QString::number(num-1);
            }
            else if(values.at(i).at(1).startsWith("USB"))
            {
                int USBnum = values.at(i).at(1).right(1).toInt();
                bool notFindPort= true;
                for(int k=USBnum-1; k<4; k++)
                {
                    if(!lp_Port.at(k).contains("NON"))
                    {
                        dev = lp_Port.at(k);
                        lp_Port.replace(k,"NON");
                        notFindPort = false;
                        break;
                    }
                }
                if(notFindPort)
                {
                    dev = "/dev/usb/lp0";
                    lp_Port.replace(0,"NON");
                    lp_Port.replace(1,"/dev/usb/lp1");
                    lp_Port.replace(2,"/dev/usb/lp2");
                    lp_Port.replace(3,"/dev/usb/lp3");
                }
            }
            qDebug()<<"LCore:ExecuteJetDirectSettings::3:: p910nd " <<"-f" << dev <<values.at(i).at(2);
            QProcess::startDetached(QString("p910nd"), QStringList() <<"-f" << dev << values.at(i).at(2));

        }
    }
    qDebug() << "LCore:ExecuteJetDirectSettings::3:: End.";
}

//for updating network speed, wake on lan values to database
void LCore::UpdateEthernetSettings(int invokeType)
{
    qDebug() << "LCore:UpdateEthernetSettings::3:: Start.";

    QStringList list = readTable("NetworkDetails", "NetworkType='Ethernet'");
    QString LinkMode, WakeOn;
    if(!list.isEmpty() && isTableExists("NetworkDetails"))
    {
        LinkMode = list.at(8);
        WakeOn = list.at(10);
    }
    else
    {
        LinkMode = "Auto select";
        WakeOn = "g";
    }

    QStringList arguments;
    if(LinkMode == "Auto select")
        arguments << "-s" << getEthernetDevice() << "autoneg" << "on";
    else
    {
        arguments << "-s" << getEthernetDevice() << "speed" << LinkMode.section(" ", 0, 0) << LinkMode.section("-", 1, 1).toLower() << LinkMode.section(" ", 2, 2).section("-",0 ,0).toLower();
        QMap<QString, QString> InfoMap = getEthernetInfo();
        if(InfoMap.value("LinkMode").contains("Auto select"))
            arguments << "autoneg" << "off";
    }
    qDebug() << "LCore:UpdateEthernetSettings::3:: link modes : " << QProcess::execute("ethtool", arguments) << arguments;

    arguments.clear();
    arguments << "-s" << getEthernetDevice() << "wol" << WakeOn;
    qDebug() << "LCore:UpdateEthernetSettings::3:: wol" << QProcess::execute("ethtool", arguments);

    if(invokeType)
        ::sleep(2);
    QMap<QString, QString> InfoMap = getEthernetInfo();
    QString Speed = InfoMap.value("Speed");
    updateTable("NetworkDetails", QStringList("Speed='"+Speed+"'"),"NetworkType='Ethernet'");
    qDebug() << "LCore:UpdateEthernetSettings::3:: End.";
}

int sendClientMessage(Display *disp, Window win, char *msg, unsigned long data0, unsigned long data1, unsigned long data2, unsigned long data3, unsigned long data4)
{
    XEvent event;
    long mask = SubstructureRedirectMask | SubstructureNotifyMask;

    event.xclient.type = ClientMessage;
    event.xclient.serial = 0;
    event.xclient.send_event = True;
    event.xclient.message_type = XInternAtom(disp, msg, False);
    event.xclient.window = win;
    event.xclient.format = 32;
    event.xclient.data.l[0] = data0;
    event.xclient.data.l[1] = data1;
    event.xclient.data.l[2] = data2;
    event.xclient.data.l[3] = data3;
    event.xclient.data.l[4] = data4;

    if(XSendEvent(disp, DefaultRootWindow(disp), False, mask, &event))
        return EXIT_SUCCESS;
    else
        return EXIT_FAILURE;
}

// cppcheck-suppress unusedFunction
bool LCore::raiseWindow(QString execName)
{
    qDebug() << "LCore:raiseWindow::3:: Start.";
    qDebug() << "LCore:raiseWindow::3:: args : execName = " << execName;

    if(execName == "RDesktop"){
        execName = "RDP";
    }

#ifdef Q_OS_WIN32
    return false
        #endif

            LCore lcoreobj;
    QStringList values = lcoreobj.readTable("ProcessInfo", "Process='"+execName+"'", "WID");
    if(!values.count())
        values.append("0");
    bool raiseWin = false;
    WId windowID = (WId) values.first().toLongLong();

    Display *m_pDisplay = QX11Info::display();
    Window rootWindow = DefaultRootWindow(m_pDisplay);

    Atom a = XInternAtom(m_pDisplay, "_NET_CLIENT_LIST", true);
    Atom actualType;
    int format;
    unsigned long numItems, bytesAfter;
    unsigned char *data = 0;
    int status = XGetWindowProperty(m_pDisplay, rootWindow, a, 0L, (~0L), false, AnyPropertyType, &actualType, &format, &numItems, &bytesAfter, &data);

    if(status >= Success && numItems)
    {
#ifdef QT_ARCH_I386
        quint32 *array = (quint32*) data;
        quint32 k;
#endif

#ifdef QT_ARCH_X86_64
        quint64 *array = (quint64*) data;
        quint64 k;
#endif
        for (k = 0; k < numItems; k++)
        {
            Window w = (Window) array[k];
            if(windowID == w)
            {
                sendClientMessage(m_pDisplay, w, "_NET_ACTIVE_WINDOW", 0, 0, 0, 0, 0);
                XMapRaised(m_pDisplay, w);
                raiseWin = true;
                const char *pid_string = getenv("XALF_LAUNCH_PID");
                if(pid_string)
                {
                    long int launch_pid = atol (pid_string);
                    if(launch_pid > 1)
                        kill(launch_pid, SIGUSR1);
                }

                break;
            }
        }
        XFree(data);
    }
    qDebug() << "LCore:raiseWindow::3:: return raiseWin = " << raiseWin;
    return raiseWin;
}

QValidator* LCore::SetValidation(const QString& name)
{
    qDebug() << "LCore:SetValidation::3:: Start.";
    QValidator *valid = NULL;

    if(QFile::exists(QString(IGNOREMASK)))
        return valid;

    if(name == "numeric")
    {
        QRegExp rx(NUMERIC);
        valid = new QRegExpValidator(rx, 0);
    }

    if(name == "alphanumeric")
    {
        QRegExp rx(ALPHA_NUMERIC);
        valid = new QRegExpValidator(rx, 0);
    }

    if(name== "hostname")
    {
        QRegExp rx("[0-9a-zA-Z-_.!$%^*@:]+");
        valid = new QRegExpValidator(rx, 0);
    }

    if(name == "name")
    {
        QRegExp rx("[0-9a-zA-Z ]+");
        valid = new QRegExpValidator(rx, 0);
    }

    if(name == "x11name")
    {
        QRegExp rx("[0-9a-zA-Z-./]+");
        valid = new QRegExpValidator(rx, 0);
    }

    if(name == "domain")
    {
        QRegExp rx("[0-9a-zA-Z.@_-#]+");
        valid = new QRegExpValidator(rx, 0);
    }

    if(name == "mac")
    {
        QRegExp rx("[0-9a-fA-F]+");
        valid = new QRegExpValidator(rx, 0);
    }

    if(name == "PolicyName")
    {
        QRegExp rx("[0-9a-zA-Z-_#*]+");
        valid = new QRegExpValidator(rx, 0);
    }

    if(name=="TCHostName")
    {
        QRegExp rx("[0-9a-zA-Z- ]+");
        valid = new QRegExpValidator(rx, 0);
    }

    qDebug() << "LCore:SetValidation::3:: return valid = " << valid;
    return valid;
}


bool LCore::isValidIP(QString strIP)    //Nikhil Parte
{
    struct sockaddr_in sa;
    int result = inet_pton(AF_INET, strIP.toLatin1(), &(sa.sin_addr));
    return result != 0;
}

//for getting connected wireless essid
// cppcheck-suppress unusedFunction
QString LCore::getWirelessESSID()
{
    QStringList list  = ListWirelessInterfaces();
    if(list.count())
    {
        QProcess proc;
        proc.start("iwconfig", QStringList(list.at(0)));
        proc.waitForFinished(-1);
        while (!proc.atEnd())
        {
            QString line = proc.readLine();
            if(line.contains("ESSID:"))
            {
                // line = wlan0     IEEE 802.11  ESSID:"OPPO F11 " Pro"

                QString strESSID = line.section("\"", 1, -1).trimmed(); // OPPO F11 " Pro"
                strESSID.chop(1); // OPPO F11 " Pro

                return QString::fromUtf8(strESSID.toLatin1().constData());
            }
        }
    }
    return "";
}

/* server_ip = server ip address,
   port = server port  ICA=1494,
   mode = tcp/udp (blank for tcp)
*/

int LCore::CheckServerExist(QString server_ip, QString port, QString mode, int nRetry)
{
    qDebug() << "LCore:CheckServerExist::3:: Start";
    int nCounter = 0;
    if(!(server_ip.section(":",1,1)==NULL))
    {
        port = server_ip.section(":",1,1);
        server_ip = server_ip.section(":",0,0);
    }

    QString strWaitTime = "2";
    QStringList strlistWaitTime = readDefaultsValue("NCWaitTime");

    if(strlistWaitTime.count() && strlistWaitTime.at(0).isEmpty() == false)
    {
        strWaitTime = strlistWaitTime.at(0);
    }

    do
    {
        QStringList args;
        int count = port.split(",").count();
        while(count > 0)
        {
            args.clear();
            args << "-z" << "-w" << strWaitTime;
            if(mode.contains("udp"))
                args << "-u";
            args << server_ip << port.section(",",count-1, count-1);
            QProcess nc_proc;
            nc_proc.start("nc", args);
            nc_proc.waitForFinished(-1);
            qDebug() << "LCore:CheckServerExist::3:: nc " << args;
            qDebug() << "LCore:CheckServerExist::3: Exit Status : " << nc_proc.exitCode();
            if(nc_proc.exitCode() == 0)
            {
                return 1;
            }
            count--;
        }
        qDebug() << "LCore:CheckServerExist::3:: nRetry = "<<nRetry;
        qDebug() << "LCore:CheckServerExist::3:: nCounter = "<<nCounter;
        ::sleep(2);

    }while(nRetry != nCounter++);

    qDebug() << "LCore:CheckServerExist::3:: End .";
    return 0;
}


//============================== Date-Time =====================================
void LCore::readDateTime()
{
    qDebug() << "LCore:readDateTime::3:: Start.";
    QStringList ips = getavailableIP();
    QStringList readlist = readTable(QString("DateTime"), "");
    if(readlist.count())
    {
        if(readlist[0] == "Network" && !ips.isEmpty())
        {
            setNTPDate();
        }
        else if(!QFile::exists("/tmp/.USBPEN"))
        {
            QString strBoardSeries;
            QString strFdate, strFtime;
            strBoardSeries=getVGAcard().trimmed();
            if (strBoardSeries.contains("Z36xxx") || strBoardSeries.contains("Z37xxx")) //This is common for X86-67Series Board
            {
                QProcess process;
                QString line;
                QStringList listArguments;
                if(getCPUname().contains("Z3735F") || getCPUname().contains("N2808") || getCPUname().contains("N3350"))
                    listArguments.append("--directisa");
                listArguments.append("-r");
                process.start("hwclock", listArguments);
                process.waitForFinished(-1);
                while(!process.atEnd())
                    line = process.readLine().simplified();
                //        strFdate = line.section("-", 0, 0).simplified().section(" ", 1, 3);
                //        strFtime = line.section("-", 0, 0).simplified().section(" ", 4, 6);
                QString strYear = line.section("-",0,0).section(" ", 4, 4);
                strFdate = line.section("-",0,0).section(" ", 1, 2).append(" ").append(strYear);
                strFtime = line.section("-", 0, 0).section(" ", 3, 3);
            }
            else
            {
                QProcess process;
                QStringList arguments;
                QString line;
                arguments << "+%d %b %Y - %r";
                process.start("date", arguments);
                process.waitForFinished(-1);
                while(!process.atEnd())
                    line = process.readLine().simplified();

                strFdate = line.section("-", 0, 0).simplified();
                strFtime = line.section("-", -1, -1).simplified();

            }
            setDateTime(strFdate, strFtime);
        }

    }
    qDebug() << "LCore:readDateTime::3:: End.";
}

int LCore::setDateTime(const QString& fdate, const QString& ftime)
{
    if(QFile::exists("/tmp/.USBPEN"))
        return 0;

    qDebug() << "LCore:setDateTime::3:: Start.";
    qDebug() << "LCore:setDateTime::3:: args : fdate = " << fdate << " ftime = " << ftime;

    QString str_CurrentDate;
    QStringList values;
    values = readTable("DateTime", "");
    if(values.count())
    {
        str_CurrentDate = values.at(1).section(",",0,0) +" "+ values.at(2);
    }

    qDebug() << "LCore:setDateTime::3:: fromString  strSetDate = " << values.at(1).section(",",0,0)  << "***"<< str_CurrentDate;

    int invalidate = 0;
    QProcess proc;

    proc.start("date -d \"" + fdate + " " + ftime + "\" +\"%Y-%m-%d %H:%M:%S\"");
    proc.waitForFinished(-1);
    QString strFormat = QString(proc.readAllStandardOutput()).simplified();
    qDebug() << "LCore:setDateTime::3:: strFormat = " << strFormat;

    QString hwDateCommand = "hwclock ";
    if(getCPUname().contains("Z3735F") || getCPUname().contains("N2808") ||  getCPUname().contains("N3350"))
        hwDateCommand.append("--directisa ");
    hwDateCommand.append("--set --date=\""+ strFormat +"\"");

    qDebug() << "LCore:setDateTime::3:: hwDateCommand = " << hwDateCommand;
    proc.start(hwDateCommand);
    proc.waitForFinished(-1);
    QString strProcOutput = QString(proc.readAllStandardError());
    qDebug() << "LCore:setDateTime::3:: strProcOutput = " << strProcOutput;

    if(strProcOutput.contains("invalid date"))
        invalidate = 0;
    else
    {

        QProcess::startDetached("xset dpms force on");
        ExecutePowerSettings(); //added for keeping dpms off in case of monitor settings are "never"
        QStringList listArguments;
        if(getCPUname().contains("Z3735F") || getCPUname().contains("N2808") ||  getCPUname().contains("N3350"))
            listArguments.append("--directisa");
        listArguments.append("-s");
        QProcess::execute("hwclock", listArguments);
        qDebug() << "LCore:setDateTime::3:: fromString = "  << str_CurrentDate;
        invalidate = 1;
    }

    //tejashree

    QString strSetDate =  QDateTime::currentDateTime().toString("dd MMM yyyy hh:mm:ss AP");
    qDebug() << "LCore:setDateTime::3:: fromString  strSetDate "  << QDateTime::fromString(strSetDate, "dd MMM yyyy hh:mm:ss AP")<< "----" << QDateTime::fromString(str_CurrentDate, "dd MMM yyyy hh:mm:ss AP");

    if(QDateTime::fromString(strSetDate, "dd MMM yyyy hh:mm:ss AP").operator <(QDateTime::fromString(str_CurrentDate, "dd MMM yyyy hh:mm:ss AP")))
    {
        qDebug() << "LCore:setDateTime::3:: fromString  strSetDate = "  << strSetDate << "----" << str_CurrentDate;
        QProcess::execute("killall /usr/os-bin/VMSSigHandler");
        QProcess::startDetached(QString("/usr/os-bin/VMSSigHandler"));
        system("rm /root/.vmstask*");
    }
    qDebug() << "LCore:setDateTime::3:: return = " << invalidate;
    return invalidate;
}

void LCore::setNTPDate()
{
    qDebug() << "LCore:setNTPDate::3:: Start.";
    QStringList readlist = readTable(QString("DateTime"), "");
    if(readlist.count())
    {
        if(readlist[0] == "Network") //&& (readlist[1] == "NTPServer")
        {
            QString ntpvalue;
            if(readlist[4] == QString("NTPServer"))
                ntpvalue = readlist[5];
            else
                ntpvalue = readlist[3];

            changeNTPServerToConf(ntpvalue);
            QProcess ntpd;
            ntpd.start("ntpd", QStringList()<<"-gq");
            ntpd.waitForFinished(20000);
            qDebug()<<"output="<<ntpd.readAllStandardOutput();
            qDebug()<<"error="<<ntpd.readAllStandardError();

            QString command = "ntpdate -u " +ntpvalue ;
            qDebug()  << "LCore:setNTPDate::3::  command " << command;
            int nStatus = system(command.toLatin1());
            qDebug()  << "LCore:setNTPDate::3::  command output " << QString::number(nStatus);
            QStringList strDSTList = readTable(QString("DaylightSavingTime"), "", "AutoSyncInterval");

            if(!QFile::exists("/tmp/.USBPEN") && (!nStatus  && (!strDSTList.isEmpty() && strDSTList.at(0).toInt() != 1)))
            {
                QStringList strTimeZoneInfo = readTable(QString("TimeZone"), "");
                QString strContinent, strRegion;
                if(!strTimeZoneInfo.isEmpty())
                {
                    strContinent = strTimeZoneInfo.at(0);
                    strRegion = strTimeZoneInfo.at(1);
                }
                else
                {
                    QStringList strTimeZoneList = readDummyTimeZoneFile();
                    if(!strTimeZoneList.isEmpty())
                    {
                        strContinent = strTimeZoneList.at(0);
                        strRegion = strTimeZoneList.at(1);
                    }
                }

                if(!strContinent.isEmpty() && !strRegion.isEmpty())
                {
                    int nInDST = isInDST(strContinent, strRegion);

                    if(nInDST)
                    {
                        QDateTime currentDateTime = QDateTime::currentDateTime();
                        QDateTime newDateTime =  currentDateTime.addSecs(-3600);
                        QLocale locale("en_US");
                        QString strFdate = locale.toString(newDateTime.date(), "dd MMM yyyy");
                        QString strFtime;

                        if(getTimeFormat()) //12Hr
                            strFtime = locale.toString(newDateTime.time(), "hh:mm:ss  AP");
                        else
                            strFtime = locale.toString(newDateTime.time(), "hh:mm:ss");

                        setDateTime(strFdate, strFtime);
                    }
                }
            }

            QStringList listArguments;
            if(getCPUname().contains("Z3735F") || getCPUname().contains("N2808") ||  getCPUname().contains("N3350"))
                listArguments.append("--directisa");
            listArguments.append("-w");
            QProcess::startDetached("hwclock", listArguments);
        }
    }
    qDebug() << "LCore:setNTPDate::3:: End.";
}

void LCore::setTimeZone()
{
    qDebug() << "LCore:setTimeZone::3:: Start.";

    QString strCounty, strRegion ,defaultname, path;
    bool bIsTCS = false;
    QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
    if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
        bIsTCS = true;

    bool bIsBEL = false;
    QStringList  strlistCheckBEL = readDefaultsValue("BELEnable");
    if(strlistCheckBEL.count() && strlistCheckBEL.at(0).toInt())
    {
        bIsBEL = true;
    }

   bool  bIsDominose = false;
   QStringList  strlistCheckDominose = readDefaultsValue("EnableDMN");
   if(strlistCheckDominose.count() && strlistCheckDominose.at(0).toInt())
   {
       bIsDominose = true;
   }
    QStringList listValues = readTable("SysConf", "Property='Language'", "Value");
    if(listValues.count())
    {
        QStringList NetworkTimeZoneList =  readTable("sysconf",  QString("Property='NetworkTimeZone'"), "Value");
        if(!NetworkTimeZoneList.isEmpty())
        {
            defaultname = NetworkTimeZoneList.at(0);
            strCounty  = defaultname.section("/", 0,0);
            strRegion = defaultname.section("/", 1,1);
        }
        else
        {
            QStringList strDefaultTimeZone = readDefaultsValue("defaultTimeZone");

            if(!strDefaultTimeZone.isEmpty() && !strDefaultTimeZone.at(0).isEmpty())
            {
                defaultname = strDefaultTimeZone.at(0);
                strCounty = strDefaultTimeZone.at(0).section( "/", 0, 0);
                strRegion = strDefaultTimeZone.at(0).section( "/", 1);
            }
            else
            {
                if(listValues.at(0) == QString("English"))
                {

                    if(bIsTCS || bIsDominose || bIsBEL)
                    {
                        defaultname = "Asia/Kolkata";
                        strCounty = "Asia";
                        strRegion = "Kolkata";
                    }
                    else
                    {
                        defaultname = "America/New_York";
                        strCounty = "America";
                        strRegion = "New_York";
                    }
                }
                else if(listValues.at(0) == QString("German"))
                {
                    defaultname = "Europe/Berlin";
                    strCounty = "Europe";
                    strRegion = "Berlin";
                }
                else if(listValues.at(0) == QString("French"))
                {
                    defaultname = "Europe/Paris";
                    strCounty = "Europe";
                    strRegion =  "Paris";
                }
                else if(listValues.at(0) == QString("Spanish"))
                {
                    defaultname = "Europe/Madrid";
                    strCounty = "Europe";
                    strRegion =  "Madrid";
                }
                else if(listValues.at(0) == "Chinese")
                {
                    defaultname = "Asia/Shanghai";
                    strCounty = "Asia";
                    strRegion =   "Shanghai";
                }
                else if(listValues.at(0) == "Japanese")
                {
                    defaultname = "Asia/Tokyo";
                    strCounty = "Asia" ;
                    strRegion = "Tokyo" ;
                }
            }
        }
    }
    else
    {
        if(bIsTCS || bIsDominose || bIsBEL)
        {
            QStringList NetworkTimeZoneList =  readTable("sysconf",  QString("Property='NetworkTimeZone'"), "Value");
            if(!NetworkTimeZoneList.isEmpty())
            {
                defaultname = NetworkTimeZoneList.at(0);
                strCounty  = defaultname.section("/", 0,0);
                strRegion = defaultname.section("/", 1,1);
            }
            else
            {
                defaultname = "Asia/Kolkata";
                strCounty = "Asia";
                strRegion = "Kolkata";
            }
        }
        else
        {
            QStringList NetworkTimeZoneList =  readTable("sysconf",  QString("Property='NetworkTimeZone'"), "Value");
            if(!NetworkTimeZoneList.isEmpty())
            {
                defaultname = NetworkTimeZoneList.at(0);
                strCounty  = defaultname.section("/", 0,0);
                strRegion = defaultname.section("/", 1,1);
            }
            else
            {
                QStringList strDefaultTimeZone = readDefaultsValue("defaultTimeZone");

                if(!strDefaultTimeZone.isEmpty() && !strDefaultTimeZone.at(0).isEmpty())
                {
                    defaultname  = strDefaultTimeZone.at(0);
                    strCounty = strDefaultTimeZone.at(0).section( "/", 0, 0);
                    strRegion = strDefaultTimeZone.at(0).section( "/", 1);
                }
                else
                {
                    defaultname = "America/New_York";
                    strCounty = "America";
                    strRegion = "New_York";
                }
            }
        }
    }

    QStringList strTimeZoneList = readDummyTimeZoneFile(false);
    QStringList strDefaultTimeZone = readDefaultsValue("defaultTimeZone");
    QList<QStringList> readlist = readCompleteTable("TimeZone", "");

    if(readlist.count() && readlist[0][2] == "1")
    {
        path = QString(TIMEZONE_PATH) +readlist[0][0]+ "/" + readlist[0][1];
        defaultname = readlist[0][0]+ "/" + readlist[0][1];
        unlink(LOCALTIME_PATH);
        symlink(path.toLatin1(), LOCALTIME_PATH);
        saveTimezone(defaultname);
    }
    else if(!strTimeZoneList.isEmpty() && strTimeZoneList.count() > 2)
    {
        path = QString(TIMEZONE_PATH) +strTimeZoneList.at(0)+ "/" + strTimeZoneList.at(1);
        defaultname = strTimeZoneList.at(0)+ "/" + strTimeZoneList.at(1);
        unlink(LOCALTIME_PATH);
        symlink(path.toLatin1(), LOCALTIME_PATH);
        saveTimezone(defaultname);
        readDummyTimeZoneFile(true);
    }
    else if(!strDefaultTimeZone.isEmpty() && !strDefaultTimeZone.at(0).isEmpty())
    {
        strCounty = strDefaultTimeZone.at(0).section( "/", 0, 0);
        strRegion = strDefaultTimeZone.at(0).section( "/", 1);

        path = QString(TIMEZONE_PATH) +strDefaultTimeZone.at(0);
        defaultname = strDefaultTimeZone.at(0);
        unlink(LOCALTIME_PATH);
        symlink(path.toLatin1(), LOCALTIME_PATH);
        saveTimezone(defaultname);

        QStringList strTimeZoneListN;
        strTimeZoneListN << strCounty  << strRegion << "1" << "" << "" << getTimeZoneOffSet(defaultname) << "";
        fillDummyTimeZoneFile(strTimeZoneListN);
        readDummyTimeZoneFile(true);
    }
    else
    {
        if(QFile::exists(DOWNLOADPATH))
            QFile::remove(DOWNLOADPATH);

        QString columnType = " Continent VARCHAR(50), Region VARCHAR(50), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30)";
        QString columnValues = "'"+strCounty+"','"+strRegion+"', 0, 0, 0, '', '' ";
        writeTable(QString("TimeZone"), columnType, columnValues, "");

        path = QString(TIMEZONE_PATH) +defaultname;
        unlink(LOCALTIME_PATH);
        symlink(path.toLatin1(), LOCALTIME_PATH);
        saveTimezone(defaultname);
    }
    qDebug() << "LCore:setTimeZone::3:: End.";
}

void LCore::saveTimezone(QString zonename)
{
    qDebug() << "LCore:saveTimezone::3:: Start.";
    QFile timezonefile(TIMEZONEFILE);

    bool bIsTCS = false;
    QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
    if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
        bIsTCS = true;

    if(timezonefile.exists())
        timezonefile.remove();

    if (!timezonefile.open(QIODevice::WriteOnly | QIODevice::Text))
        return;

    QTextStream out(&timezonefile);
    out << zonename.remove(" ") << "\n";
    timezonefile.close();
    sync();

    if(!isTableExists("TimeZone"))
    {
        QString strCounty,  strRegion;
        QStringList strTimeZoneList = readDummyTimeZoneFile();
        if(!strTimeZoneList.isEmpty())
        {
            strCounty = strTimeZoneList.at(0);
            strRegion = strTimeZoneList.at(1);
        }
        else
        {
            QStringList strDefaultTimeZone = readDefaultsValue("defaultTimeZone");

            if(!strDefaultTimeZone.isEmpty() && !strDefaultTimeZone.at(0).isEmpty())
            {
                strCounty = strDefaultTimeZone.at(0).section( "/", 0, 0);
                strRegion = strDefaultTimeZone.at(0).section( "/", 1);
            }
            else
            {
                QStringList listValues = readTable("SysConf", "Property='Language'", "Value");
                if(listValues.count())
                {
                    if(listValues.at(0) == QString("English"))
                    {
                        if(bIsTCS)
                        {
                            strCounty = "Asia";
                            strRegion = "Kolkata";
                        }
                        else
                        {
                            strCounty = "America";
                            strRegion = "New_York";
                        }
                    }
                    else if(listValues.at(0) == QString("German"))
                    {
                        strCounty = "Europe";
                        strRegion = "Berlin";
                    }
                    else if(listValues.at(0) == QString("French"))
                    {
                        strCounty = "Europe";
                        strRegion =  "Paris";
                    }
                    else if(listValues.at(0) == QString("Spanish"))
                    {
                        strCounty = "Europe";
                        strRegion =  "Madrid";
                    }
                    else if(listValues.at(0) == "Chinese")
                    {
                        strCounty = "Asia";
                        strRegion =   "Shanghai";
                    }
                    else if(listValues.at(0) == "Japanese")
                    {
                        strCounty = "Asia" ;
                        strRegion = "Tokyo" ;
                    }
                }
                else
                {
                    if(bIsTCS)
                    {
                        strCounty = "Asia";
                        strRegion = "Kolkata";
                    }
                    else
                    {
                        strCounty = "America";
                        strRegion = "New_York";
                    }
                }
            }
        }

        QString columnType = " Continent VARCHAR(50), Region VARCHAR(50), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30)";
        QString columnValues = "'"+strCounty+"','"+strRegion+"', 0, 0, 0, '', '' ";
        writeTable(QString("TimeZone"), columnType, columnValues, "");
    }
    QString strOffSet = getTimeZoneOffSet(zonename);
    updateTable("TimeZone", QStringList()<<"Extra4='"+strOffSet.trimmed()+"'", "");
    qDebug() << "LCore:saveTimezone::3:: End.";
}

//============================== ScreenSaver =====================================
void LCore::ScreenSaver()/*(int option, int CHKB_Screensaver, int CB_Mode, QString CB_Slideshowmode, int SB_Interval, QString CB_Mount, int SB_Timeout, QString LE_Password)*/
{
    qDebug() << "LCore:ScreenSaver::3:: Start.";

    QStringList readlist = readTable(QString("ScreenSaver"), "");

    if(readlist.count())
    {
        if(readlist[0].toInt() == 0)
        {
            QProcess::startDetached("killall -9 xslideshow");
            QProcess::startDetached("killall -9 xautolock");
            QProcess::startDetached("killall -9 xlock");
            QFile::remove(SSAVER_FILE);
            QFile::remove(SSHOW_FILE);
            QFile::remove(SSEND_FILE);
            return;
        }
        QFile fileSSHOW(SSHOW_FILE);
        if(fileSSHOW.open(QIODevice::WriteOnly) == false)
        {
            qDebug() << "Failed to create startCmd file => " << SSHOW_FILE;
            return;
        }
        QTextStream outSSHOW(&fileSSHOW);
        outSSHOW << "#!/bin/sh" << "\n" << "\n";


        if(readlist[0].toInt() == 1)
        {
            QProcess::startDetached("killall -9 xautolock");  //checking xautolock is running if yes kill

            outSSHOW << "if [ -f /tmp/.pulserunning ]; then" << "\n";
            outSSHOW << "\techo \"Pulse is running\"" << "\n";
            outSSHOW << "\tkillall -9 xlock" << "\n";
            outSSHOW << "\texit 1" << "\n";
            outSSHOW << "fi" << "\n" << "\n";
        }

        QString command;

        if(readlist[4] == "Slideshow") /*Slideshow*/
        {
            if(readlist[8] == QString(SCREENSAVER_PATH)) //QString(DUMMYSCREENSAVER_PATH))
            {
                QString strDummy = QString(DUMMYSCREENSAVER_PATH);
                command = "xslideshow -full -override " +strDummy;
            }
            else
            {
                command = "xslideshow -full -override -animate " +readlist[5]+ " -interval " +readlist[6]+" ";
                if(readlist[8].contains(", "))
                    command.append("\"" + readlist[8] + "\"");
                else
                    command.append(readlist[8]);

                if(getOSDetails(QString(OSBUILD_FILE)).contains("CTH", Qt::CaseInsensitive))
                {
                    if(readlist[8].contains("LocalStorage"))
                    {
                        QString imgname ="cotiviti.jpg";
                        command.append("/");
                        command.append(imgname);
                        qDebug()<<"LCore:ScreenSaver::3:: complte path = "<<command;
                    }
                }
                qDebug()<<"LCore:ScreenSaver::3:: complte path 1 = "<<command;
            }

            /*QFile file(SSHOW_FILE);
            if(file.open(QIODevice::WriteOnly))
            {
                QTextStream out(&file);
                out << "#!/bin/sh" << "\n" << "\n";
                out << command << "\n";
                file.close();
                sync();
            }
            system("chmod 755 " +QString(SSHOW_FILE).toLatin1());*/

            outSSHOW << command << "\n";

        }


        fileSSHOW.close();
        sync();
        system("chmod 755 " +QString(SSHOW_FILE).toLatin1());

        if(readlist[0].toInt() == 2 || readlist[0].toInt() == 1)
        {
            command.clear();
            //command = "xlock -nolock -mousemotion";
            command = "xlock -nolock -mousemotion -startCmd ";
            command.append(SSHOW_FILE);
        }

        if(readlist[4] == "Classic")
            command.append(" -bitmap "+QString(SCREENSAVER_PATH)+" -count 1 -mode image -delay 500000");
        else if(readlist[4] == "Blank Screen")
            command.append(" -mode blank");
        else if(readlist[4] == "Standard")
            command.append(" -bitmap "+QString(SCREENSAVER_PATH)+" -mode image -delay 500000");
        else if(readlist[4] == "Slideshow")
        {
            /*
             * For Slideshow, /usr/os-bin/xlock command will be used which is developed in qt
             * This xlock is developed bcox of issue of /usr/bin/xlock on amdgpu board
             * xlock goes on defunct mode on amdgpu board if we keep screensaver for longer duration
             */
            //command.append(" -mode run -startCmd ");

            command.clear();
            command = "/usr/os-bin/xlock ";
            command.append(SSHOW_FILE);
        }

        if(readlist[0].toInt() == 1)  //1=Active
        {
            int nShowLockScreen = readlist[9].toInt();
            QStringList  strlistCheckBEL = readDefaultsValue("BELEnable");
            if(strlistCheckBEL.count() && strlistCheckBEL.at(0).toInt())
            {
                nShowLockScreen = 0;
            } 
            QFile file(SSAVER_FILE);
            if (file.open(QIODevice::WriteOnly))
            {
                QTextStream out(&file);
                out << "#!/bin/sh" << "\n" << "\n";
                out << "if [ -f /tmp/.pulserunning ]; then" << "\n";
                out << "\t" << "exit" << "\n";
                out << "fi" << "\n";
                out << "/usr/os-bin/Logger Start ScreenSaver & 2>/dev/null" << "\n\n";

                if(nShowLockScreen == 1)
                {
                    out << "if [ -f /tmp/.loggedIn ]; then" << "\n";
                    out << "wmctrl -k on" << "\n";
                    out << "/usr/os-bin/OS_Desktop --hideTaskBar"<< "\n";
                    out << "touch /tmp/.hidetaskbar"<< "\n";
                    out << "killall -USR1 icewm"<< "\n\n";
                    out << "fi" << "\n";
                }
                out << command << "\n";
                out << "retval=$?" << "\n";
                out << "kill -9 `ps ax | grep xlock | grep -v grep | awk '{print $1}'`" << "\n";
                if(readlist[4] == "Slideshow")
                    out << "kill -9 `ps ax | grep xslideshow | grep -v grep | awk '{print $1}'`" << "\n";

                out << "\n";
                out << "/usr/os-bin/Logger Stop ScreenSaver & 2>/dev/null" << "\n";

                if(nShowLockScreen == 1)
                {
                    out << "rm -f /tmp/.hidetaskbar" << "\n\n";

                    /*
                        Added checkbox in screensaver on which it will show screensaver lock
                        below code is regarding that
                    */

                    out << "[ \"$retval\" = \"0\" ] && LockScreen screensaver"<<"\n\n";
                    out << "if [ -f /tmp/.loggedIn ]; then" << "\n";
                    out << "/usr/os-bin/OS_Desktop --showTaskBar"<< "\n";
                    out << "fi" << "\n";
                }

                file.close();
                sync();
            }
            system("chmod 755 " +QString(SSAVER_FILE).toLatin1());
            command.clear();
            command = "xautolock -time " +readlist[3]+ " -locker ";
            command.append(SSAVER_FILE);
            command.append(" -nocloseerr");
        }
        else
        {
            QFile file(SSEND_FILE);
            if (file.open(QIODevice::WriteOnly))
            {
                QTextStream out(&file);
                out << "#!/bin/sh" << "\n" << "\n";
                out << "kill -9 `ps ax | grep xslideshow | grep -v grep | awk '{print $1}'`" << "\n";
                file.close();
                sync();
            }
            system("chmod 755 " +QString(SSEND_FILE).toLatin1());
            command.append(" -endCmd ");
            command.append(SSEND_FILE);
        }

        if(readlist[0].toInt() == 1)
        {
            if(readlist[2].isEmpty())  //at the end
                QProcess::execute("killall -9 xautolock");
        }

        qDebug() << "LCore:ScreenSaver::3:: command = " << command;
        QProcess::startDetached(command);

        if(readlist[0].toInt() == 2)
        {
            QSqlQuery query;
            QString qry = "UPDATE ScreenSaver SET Option=0 WHERE Option=2";
            if(query.exec(qry))
                qDebug() << "LCore:ScreenSaver::3:: Update successfully" << query.lastQuery();
        }
    }
    qDebug() << "LCore:ScreenSaver::3:: End.";
}

// cppcheck-suppress unusedFunction
QStringList LCore::getMountedDirectories(const QString& mountPoint)
{
    qDebug() << "LCore:getMountedDirectories::3:: Start.";
    qDebug() << "LCore:getMountedDirectories::3:: args : mountPoint = " << mountPoint;
    QStringList dirpath;
    if(mountPoint == QString("SMB"))
        dirpath.append(getDirectoryContent(SMB_PATH));
    else if(mountPoint == QString("NFS"))
        dirpath.append(getDirectoryContent(NFS_PATH));
    else if(mountPoint == QString("USB"))
        dirpath.append(getDirectoryContent(USB_PATH));
    else if (mountPoint == QString("/home/myuser/"))
        dirpath.append(getDirectoryContent(HOME_MYUSER_PATH));
    else if (mountPoint == QString("MobileStorage"))
        dirpath.append(getDirectoryContent(MOBILESTORAGE_PATH));

    qDebug() << "LCore:getMountedDirectories::3:: return dirpath = " << dirpath;
    return dirpath;
}

QStringList LCore::getDirectoryContent(QString path)
{
    qDebug() << "LCore:getDirectoryContent::3:: Start.";
    QStringList dirlist;
    QDir dir(path);
    dir.setFilter(QDir::AllDirs | QDir::NoDotAndDotDot);
    QFileInfoList list = dir.entryInfoList();
    for(int i = 0; i < list.size(); ++i)
    {
        QFileInfo fileInfo = list.at(i);
        dirlist.append(fileInfo.filePath());
    }

    if(!list.count())
        dirlist << QStringList();

    qDebug() << "LCore:getDirectoryContent::3:: return dirlist = " << dirlist;
    return dirlist;
}

// cppcheck-suppress unusedFunction
QStringList LCore::setKeyboardSettings()
{
    qDebug() << "LCore:setKeyboardSettings::3:: Start.";

    QStringList ListOfKbdLayouts, ListOfKbdVariants, list;
    ListOfKbdLayouts = getKeyboardList("layouts");
    ListOfKbdVariants = getKeyboardList("variant");

    if(isTableExists(QString("KeyboardSettings")))
    {
        QStringList keyboardSettings = readTable(QString("KeyboardSettings"), "");
        if(!keyboardSettings.isEmpty())
        {
            QString layoutName;
            for (int i = 0; i < ListOfKbdLayouts.size(); ++i)
            {
                if(ListOfKbdLayouts.at(i).startsWith(keyboardSettings.at(0)))
                {
                    layoutName = ListOfKbdLayouts.at(i).section(" ",1,ListOfKbdLayouts.at(i).count(" "));
                    break;
                }
            }

            QString variant;
            for (int i = 0; i < ListOfKbdVariants.size(); ++i)
            {
                if(ListOfKbdVariants.at(i).startsWith(keyboardSettings.at(1)) && ListOfKbdVariants.at(i).section(" ",1,1) == keyboardSettings.at(0) + ":")
                {
                    variant = ListOfKbdVariants.at(i).section(" ",2,ListOfKbdVariants.at(i).count(" "));
                    break;
                }
            }
            layoutName = layoutName.section('(',0,0).simplified(); //Language
//            if(!layoutName.length())
//                layoutName = layoutName;
            variant = variant.section('(',0,0).simplified();    //country
//            if(!variant.length())
//                variant = variant;
            list << layoutName << variant;
        }
    }

    qDebug() << "LCore:setKeyboardSettings::3:: return list = " << list;
    return list;
}

//============================== NFS =====================================
// cppcheck-suppress unusedFunction
void LCore::createNFSDrive()
{
    qDebug() << "LCore:createNFSDrive::3:: Start.";

    if(isTableExists("NFS"))
    {
        bool isEnabled = getNFS_SMB_Enable_Disable_status("NFS");
        if(isEnabled == false)
        {
            return;
        }

        QList<QStringList> readlist = readCompleteTable(QString("NFS"), "");
        foreach(QStringList values, readlist)
        {
            QString folderPath = QString(NFS_PATH)+values.at(0).simplified();
            if(!checkFolderExits(folderPath))
            {
                if((CheckServerExist(values.at(1), QString(NFS_PORT), "")) && values.at(5)=="0")
                {
                    ExecuteNFSCommand(setPermissionOfNFS(values.at(4)), values.at(1), values.at(2), values.at(0));
                }
            }
        }
    }
    qDebug() << "LCore:createNFSDrive::3:: End.";
}

int LCore::ExecuteNFSCommand(const QString& permission, const QString& IP, const QString& Path, const QString& Name)
{
    qDebug() << "LCore:ExecuteNFSCommand::3:: Start.";
    qDebug() << "LCore:ExecuteNFSCommand::3:: args : permission = " << permission << " IP = " << permission
             << " path = " << Path << " Name = " << Name ;

//    IP = getIPFromHostName(IP);// commented this because NFS doesn't get mount-- prajakta/Nikhil sir

    int status = 1;
    //if(IP.contains(QRegExp("[0-9.]+")))
    {
        QString mountname = QString(NFS_PATH)+Name.simplified();
        QDir dir;
        if(dir.mkpath(mountname))
        {
            QString nfs_comm;
            /// Added 'nodev' option to remove vulnerability
            nfs_comm = "mount " +permission+ " -o nolock,nodev \"" +IP+ ":" +Path.simplified()+ "\" "+mountname;
            qDebug() << "LCore:ExecuteNFSCommand::3:: nfs command = " << nfs_comm;
            QProcess proc;
            proc.start(nfs_comm.toLatin1());
            proc.waitForFinished(-1);
            status = proc.exitCode();

            qDebug() << "LCore:ExecuteNFSCommand::3:: status = " << status;
        }
    }
    qDebug() << "LCore:ExecuteNFSCommand::3:: return status = " << status;
    return status;
}

QString LCore::setPermissionOfNFS(const QString& ReadOnly)
{
    qDebug() << "LCore:setPermissionOfNFS::3:: Start.";
    QString per;
    if(ReadOnly == "0")
        per = "-w";
    else if(ReadOnly == "1")
        per = "-r";

    qDebug() << "LCore:setPermissionOfNFS::3:: return per = " << per;
    return per;
}

// cppcheck-suppress unusedFunction
int LCore::umountDirectory(QString path)
{
    qDebug() << "LCore:umountDirectory::3:: Start.";
    char *umountPath = strdup(path.toStdString().c_str());
    int retVal = umount(umountPath);
    if(!retVal)
    {
        QDir dir;
        dir.rmpath(umountPath);
    }
    free(umountPath);

    qDebug() << "LCore:umountDirectory::3:: return retval = " << retVal;
    return retVal;
}

// cppcheck-suppress unusedFunction
bool LCore::deviceIsMounted(const QString& path, const QString& name)
{
    qDebug() << "LCore:deviceIsMounted::3:: Start.";
    qDebug() << "LCore:deviceIsMounted::3:: args : path = " << path << " name = " << name;

    bool mounted = false;

    QFile file("/proc/mounts");
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        QString line = in.readLine();
        while(!line.isNull())
        {
            QString mountPath = line.section(' ', 1, 1);
            if(mountPath == QString(path+name))
            {
                mounted = true;
                break;
            }
            line = in.readLine();
        }
        file.close();
    }

    qDebug() << "LCore:deviceIsMounted::3:: return mounted = " << mounted;
    return mounted;
}

int LCore::getNFS_SMB_Enable_Disable_status(const QString& drivename)
{
    qDebug() << "LCore:getNFS_SMB_Enable_Disable_status::3:: Start.";
    qDebug() << "LCore:getNFS_SMB_Enable_Disable_status::3:: args : drivename = " << drivename;
    int status = 0;

    if(isTableExists("SysConf"))
    {
        QStringList datalist = readTable("SysConf", "Property='"+ drivename +"'", "Value");
        if(datalist.count())
            status = datalist.at(0).toInt();
    }

    qDebug() << "LCore:getNFS_SMB_Enable_Disable_status::3:: return status = " << status;
    return status;
}

// cppcheck-suppress unusedFunction
QString LCore::getIPFromHostName(QString hostname)
{
    qDebug() << "LCore:getIPFromHostName::3:: Start.";
    QList<QStringList> IPList = readCompleteTable("HostsSettings","");
    QString IPAddress = hostname;

    for(int i = 0; i < IPList.length(); i++)
    {
        if(!IPList[i][1].compare(hostname))
            IPAddress = IPList[i][0];
    }

    qDebug() << "LCore:getIPFromHostName::3:: return IPAddress = " << IPAddress;
    return IPAddress;
}

// cppcheck-suppress unusedFunction
int LCore::getPermission(const QString& tablename, const QString& name)
{
    qDebug() << "LCore:getPermission::3:: Start.";
    qDebug() << "LCore:getPermission::3:: args : tablename = " << tablename << " name = " << name;
    int status = 0;
    if(isTableExists(tablename))   //table exist
    {
        QStringList readonlylist = readTable(tablename, "Name='"+name+"'", "Readonly");
        if(readonlylist.count())
        {
            if(readonlylist.at(0).toInt())
                status = 1;
        }
    }
    qDebug() << "LCore:getPermission::3:: return status = " << status;
    return status;
}

bool LCore::checkFolderExits(QString path )
{
    qDebug() << "LCore:checkFolderExits::3:: Start.";
    qDebug() << "LCore:checkFolderExits::3:: args : path = " << path;
    bool nCheck = false;
    QString cmd1 = "mount";
    QProcess p1;
    p1.start(cmd1);
    p1.waitForFinished(-1);

    while (!p1.atEnd())
    {
        QString line = QString(p1.readLine()).section(" ", 2, 2);
        if(line.contains(path, Qt::CaseSensitive))
        {
            nCheck = true;
            break;
        }
    }
    qDebug() << "LCore:checkFolderExits::3:: return nCheck = " << nCheck;
    return nCheck;
}

// cppcheck-suppress unusedFunction
void LCore::callCredentialDialog(QStringList args)
{
    QProcess::execute(LAUNCHCOMMAND, args);
}

//============================== SMB =====================================
// cppcheck-suppress unusedFunction
void LCore::createSMBDrive()
{
    qDebug() << "LCore:createSMBDrive::3:: Start.";
    if(isTableExists("SMB"))
    {
        bool isEnabled = getNFS_SMB_Enable_Disable_status("SMB");

        if(isEnabled == false)
        {
            return;
        }
        QList<QStringList> readlist = readCompleteTable(QString("SMB"), "");
        foreach(QStringList values, readlist)
        {
            QString folderPath = QString(SMB_PATH)+values.at(0).simplified();
            if(!checkFolderExits(folderPath))
            {
                if((CheckServerExist(values.at(1), QString(SMB_PORT), "")) && values.at(8)=="0")
                {
                    ExecuteSMBCommand(setPermissionOfSMB(values.at(6)), values.at(1), values.at(2), values.at(0), values.at(3), encryptDecryptString(values.at(4),1),values.at(7));
                }
            }
        }
    }
    qDebug() << "LCore:createSMBDrive::3:: End.";
}

int LCore::ExecuteSMBCommand(const QString& permission, const QString& IP, const QString& Sharename, const QString& Name, const QString& Username, const QString& Password, const QString& strDomain)
{
    qDebug() << "LCore:ExecuteSMBCommand::3:: Start.";
    qDebug() << "LCore:ExecuteSMBCommand::3:: args permission = " << permission << " IP = " << IP << " Sharename = " << Sharename
             << " Name = " << Name << " Username = " << Username << " Password = " << Password << " strDomain = " << strDomain;

    int status = 1;
    //    qDebug() << "LCore:ExecuteSMBCommand::3:: Password = " << Password;
    //    if(Password.contains("'"))
    //        Password = Password.replace("'","\\\'");
    //    if(!Password.contains("'"))
    //        Password = "'" + Password + "'";
    //    qDebug() << "LCore:ExecuteSMBCommand::3:: Password = " << Password;

    QDir smbDir(QString(SMB_CREDENTIAL_DIR));

    if(!smbDir.exists())
        smbDir.mkpath(smbDir.path());

    QFile smbFile(QString(SMB_CREDENTIAL_FILE+Name));
    if(smbFile.exists())
        smbFile.remove();

    if(smbFile.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&smbFile);

        if(Username.length() && Password.length())
        {
            out << "username=" << Username << "\n";
            out << "password=" << Password << "\n";
            if(strDomain.length())
                out << "domain=" << strDomain << "\n";
        }
        smbFile.close();
        sync();
    }

    bool bIsTCS = false;
    QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
    if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
        bIsTCS = true;

//    IP = getIPFromHostName(IP);// commented this because NFS doesn't get mount-- prajakta/Nikhil sir

    //if(IP.contains(QRegExp("[0-9.]+")))
    {
        QString mountname = QString(SMB_PATH)+Name.simplified();
        QDir dir;
        if(dir.mkpath(mountname))
        {
            QString smb_comm;
            if(bIsTCS)
                smb_comm = "smbmount \"//"+IP+"/"+Sharename.simplified()+"\" "+mountname+" -o credentials="+SMB_CREDENTIAL_FILE+Name+",vers=3.0," +permission+ ",nounix,file_mode=0755,dir_mode=0755,nodev";
            else
                smb_comm = "smbmount \"//"+IP+"/"+Sharename.simplified()+"\" "+mountname+" -o credentials="+SMB_CREDENTIAL_FILE+Name+",noserverino," +permission+ ",nounix,file_mode=0755,dir_mode=0755,nodev";

            /// Changes file_mode & dir_mode  option as 0755 from 0777 and add nodev option to remove vulnerability
            qDebug() << "LCore:ExecuteSMBCommand::3:: SMB command = " << smb_comm;

            status = system(smb_comm.toLatin1());
            qDebug() << "LCore:ExecuteSMBCommand::3:: status = " <<status;
        }
    }
    qDebug() << "LCore:ExecuteSMBCommand::3:: return status = " << status;
    return status;
}

QString LCore::setPermissionOfSMB(const QString& ReadOnly)
{
    qDebug() << "LCore:setPermissionOfSMB::3:: Start.";
    QString per;
    if(ReadOnly == "0")
        per = "rw";
    else if(ReadOnly == "1")
        per = "ro";

    qDebug() << "LCore:setPermissionOfSMB::3:: return per = " << per;
    return per;
}

// cppcheck-suppress unusedFunction
void LCore::setHostname()
{
    qDebug() << "LCore:setHostname::3:: Start.";
    QStringList list = readTable("SysConf", "Property='Hostname'", "Value");
    if(!list.isEmpty() && isTableExists("SysConf"))
    {
          QProcess::execute("hostnamectl", QStringList() << "set-hostname" << list.at(0));
    }

    qDebug() << "LCore:setHostname::3:: End.";
}

//executed for setting appliance/desktop mode
// cppcheck-suppress unusedFunction
void LCore::setTaskbarproperties()
{
    qDebug() << "LCore:setTaskbarproperties::3:: Start.";
    QMap<QString, QString> propertymap;
    if(QFile::exists(CONFIG_FILE))
    {
        propertymap.insert("ShowTaskBar", "0");
        propertymap.insert("TaskBarShowTray", "0");
        propertymap.insert("TaskBarAtTop","0");
        propertymap.insert("TaskBarShowStartMenu","0");
        propertymap.insert("TaskBarShowShowDesktopButton", "0");
        propertymap.insert("TaskBarShowCPUStatus", "0");
        propertymap.insert("TaskBarShowNetStatus", "0");
        propertymap.insert("TaskBarShowClock", "0");
        propertymap.insert("TaskBarAutoHide", "0");
        //propertymap.insert("DateFormat", "");
        propertymap.insert("TimeFormat","");


        if(getOSDetails(QString(OSBUILD_FILE)).contains("McD", Qt::CaseInsensitive))
            propertymap.insert("TaskBarKeepBelow", "0 # 0/1");

        if(getOSDetails(QString(OSBUILD_FILE)).contains("JHT", Qt::CaseInsensitive))
            propertymap.insert("KeyWinClose", "Alt+F4");
    }
    else
    {
        QStringList propertylist = readTable("TaskbarProperties", "");

        if(!propertylist.isEmpty() && isTableExists("TaskbarProperties"))
        {
            qDebug() << "LCore:setTaskbarproperties::3:: ShowTaskBar = " << propertylist.at(0);
            propertymap.insert("ShowTaskBar", propertylist.at(0));
            propertymap.insert("TaskBarShowTray", propertylist.at(0));
            propertymap.insert("TaskBarAtTop",propertylist.at(1));
            //            if(!listValues.isEmpty() && listValues.at(0) == "Enable" && (strImpriLoggedInStatus.count() && strImpriLoggedInStatus.at(0) == "loggedin"))
            //                propertymap.insert("TaskBarShowStartMenu", "0");
            //            else
            propertymap.insert("TaskBarShowStartMenu",propertylist.at(2));
            propertymap.insert("TaskBarShowShowDesktopButton",propertylist.at(3));
            propertymap.insert("TaskBarShowCPUStatus",propertylist.at(4));
            propertymap.insert("TaskBarShowNetStatus",propertylist.at(5));
            propertymap.insert("TaskBarShowClock", QString::number(getsystemTrayStatus(QString("SystemTrayProperties"), QString("Clock"))));
            propertymap.insert("TaskBarAutoHide", propertylist.at(6));
            // propertymap.insert("DateFormat","\""+propertylist.at(8)+"\"");
            propertymap.insert("TimeFormat","\""+propertylist.at(8)+"\"");


            if(getOSDetails(QString(OSBUILD_FILE)).contains("McD", Qt::CaseInsensitive))
                propertymap.insert("TaskBarKeepBelow", "0 # 0/1");

            if(getOSDetails(QString(OSBUILD_FILE)).contains("JHT", Qt::CaseInsensitive))
                propertymap.insert("KeyWinClose", "Alt+F4");

            QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
            if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
                propertymap.insert("ModSuperIsCtrlAlt", "1 # 0/1");
        }
    }

    writeFile(QString(PREF_FILE), propertymap);
    qDebug() << "LCore:setTaskbarproperties::3:: End.";
}


void LCore::writeFile(QString filename, QMap<QString, QString> propertyMap)
{
    qDebug() << "LCore:writeFile::3:: Start.";
    qDebug() << "LCore:writeFile::3:: args : filename = " << filename << " propertyMap = " << propertyMap;
    bool isUserMode = false;
    QStringList taskbarlist = readTable("TaskbarProperties", "", "Mode");
    if(taskbarlist.count() && taskbarlist.at(0) == "0")
        isUserMode = true;


    QFile file(filename);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    QTextStream in(&file);
    QStringList list;
    while (!in.atEnd())
    {
        QString line = in.readLine();
        if(line.contains("="))
        {
            QString str = line.section("=", 0, 0).remove("#").simplified();
            QMap<QString, QString>::iterator i;
            for (i = propertyMap.begin(); i != propertyMap.end(); ++i)
            {
                if(i.key() == str)
                {
                    if(getOSDetails(QString(OSBUILD_FILE)).contains("McD", Qt::CaseInsensitive))
                    {
                        qDebug() << "LCore:writeFile::3:: key = " << i.key();
                        if(isUserMode && i.key() == "ShowTaskBar")
                            line = "#ShowTaskBar=0";
                        else if (i.key() == "TaskBarKeepBelow")
                            line = isUserMode?("TaskBarKeepBelow=1"):("#TaskBarKeepBelow=0 # 0/1");
                        else if(isUserMode && i.key() == "TaskBarShowNetStatus")
                            line = "#TaskBarShowNetStatus=0" ;
                        else
                        {
                            str.append("="+i.value());
                            line = str;
                        }
                    }
                    else
                    {
                        str.append("="+i.value());
                        line = str;
                    }
                }


            }
        }
        list.append(line);
    }
    file.close();

    if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
        return;
    QTextStream out(&file);
    for(int i = 0; i < list.count(); i++)
        out << list.at(i) << "\n";
    file.close();
    sync();
    qDebug() << "LCore:writeFile::3:: End.";
}

// cppcheck-suppress unusedFunction
void LCore::startCustomService()
{
    qDebug() << "LCore:startCustomService::3:: Start.";
    //    QString strCPUInfo = getCPUname();

    QString strBIQLOutput;
    writeFilesForRemoteShadow();
    writeX11vncOptions();
    QFile optionsFile(QString(SERVICE_OPT_FILE));
    if(!QFileInfo(SERVICE_OPT_FILE).exists())
    {
        if (!optionsFile.open(QIODevice::WriteOnly | QIODevice::Text))
            return;

        QTextStream out(&optionsFile);
        out << "X11VNC_OPTION=\"-forever -xkb -skip_lockkeys -httpdir /usr/share/tightvnc-java -httpport 5800 \"" << "\n";

        //        if(!strCPUInfo.contains("Z3735F") || !strCPUInfo.contains("N2808") ||  !strCPUInfo.contains("N3350"))
        QProcess bIQL;
        bIQL.start("findfs LABEL=\"sukshm\"");
        bIQL.waitForFinished(-1);
        strBIQLOutput = bIQL.readAllStandardOutput().trimmed();
        if(QString(strBIQLOutput).contains(QRegExp("mmcblk", Qt::CaseInsensitive)))
            out << "PULSEAUDIO_OPTION=\"--start -D \"" << "\n";

        optionsFile.close();
        sync();
    }
    else
    {
        int flag=0;
        if (!optionsFile.open(QIODevice::ReadOnly | QIODevice::Text))
            return;

        QTextStream in(&optionsFile);
        while (!in.atEnd()) {
            QString line = in.readLine();
            if(line.contains("export PULSEAUDIO_OPTION"))
            {
                flag = 1;
                break;
            }
        }
        optionsFile.close();
        if(flag == 0)
        {
            if (!optionsFile.open(QIODevice::Append | QIODevice::Text))
                return;

            QTextStream out(&optionsFile);
            //            if(!strCPUInfo.contains("Z3735F") || !strCPUInfo.contains("N2808") || !strCPUInfo.contains("N3350"))
            if(QString(strBIQLOutput).contains(QRegExp("mmcblk", Qt::CaseInsensitive)))
                out << "export PULSEAUDIO_OPTION=\"--start -D \"" << "\n";
            optionsFile.close();
            sync();
        }
    }

    QList<QStringList> serviceList = readCompleteTable(QString("Services"),"");
    for (int i = 0; i < serviceList.size(); ++i)
    {
        if(serviceList[i][0] == "cups" || serviceList[i][0] == "lpd" || serviceList[i][0] == "PulseAudio")
        {}
        else if(serviceList[i][0] == "fcron")
        {
            QString servicePath = SERVICES_PATH + QString("/") +  serviceList[i][0] + " start";
            QProcess::execute(servicePath);
            QProcess::execute(REFRESHFCRON);
        }
        else if(serviceList[i][0] == "rsh")
        {
            QString servicePath = SERVICES_PATH + QString("/xinetd") +" start";
            QProcess::startDetached(servicePath);
        }
        else if(serviceList[i][0] == "FabulaTech")
        {
            QString servicePath = SERVICES_PATH + QString("/FabulaTech") +" restart";
            QProcess::startDetached(servicePath);
        }
        else
        {
            QString servicePath = SERVICES_PATH + QString("/") +  serviceList[i][0] + " start";
            QProcess::startDetached(servicePath);
        }

        if(serviceList[i][0] == "cups")
        {
            QString strEnableCheck;
            if(QFile::exists(LTMTHINPRINTCONFFIlE))
            {
                QFile readThinprintFile(LTMTHINPRINTCONFFIlE);
                if(readThinprintFile.open(QIODevice::ReadOnly|QIODevice::Text))
                {
                    QTextStream in(&readThinprintFile);
                    while (!in.atEnd())
                    {
                        QString strThinprintData = in.readLine();

                        if(strThinprintData.contains("ThinprintEnable"))
                            strEnableCheck = strThinprintData.section("=",1,1).trimmed();

                    }
                }
                readThinprintFile.close();
            }

            QStringList strListEnableThinPrint = readTable("SysConf", "Property='EnableThinPrint'", "Value");
            if(!strListEnableThinPrint.isEmpty())
            {
                strEnableCheck = strListEnableThinPrint.at(0).trimmed();
            }

            modifyThinPrintProperties();


            QProcess::startDetached("/etc/rc.d/ThinPrint",QStringList()<<"stop");
            sync();

            if(strEnableCheck.toInt())
            {
                RESTARTTHINPRINT();
            }
        }
    }

    QStringList strListGenericDisableClipBoard = readTable("SysConf", "Property='GenericDisableClipBoard'", "Value");
    if(!strListGenericDisableClipBoard.isEmpty())
    {
         QProcess::startDetached("/usr/os-bin/block_clipboard", QStringList()<< "start");
    }
    else
    {
         QProcess::startDetached("/usr/os-bin/block_clipboard", QStringList()<< "stop");
    }

    QProcess::execute(REFRESHFCRON);
    qDebug() << "LCore:startCustomService::3:: End.";
}


int LCore::checkPrinters(int pflag) //pflag=0 for USB //pflag=1 for Serial //pflag=2 for parallel
{
    qDebug() << "LCore:checkPrinters::3:: Start.";
    QString cmd;

    if(pflag == 0)
        cmd = "ls /dev/usb/lp* | wc -l";
    else if(pflag == 1)
        cmd = "ls -l /dev/ttyS* | wc -l";
    else if(pflag == 2)
        cmd = "ls -l /dev/lp* | wc -l";

    char line[20];
    memset(line, 0, sizeof(line));

    if(pflag == 0)
    {
        QDir dir("/dev/usb/");
        if(dir.exists())
        {
            dir.setFilter(QDir::Files | QDir::System);
            int flag=0;
            QFileInfoList list = dir.entryInfoList();
            for (int i = 0; i < list.size(); ++i)
            {
                QFileInfo fileInfo = list.at(i);
                QString line1;
                if((line1=fileInfo.fileName()).contains("lp"))
                    ++flag;
            }
            qDebug() << "LCore:checkPrinters::3:: return flag = " << flag ;
            return flag;
        }
    }
    else
    {
        FILE *fp = popen(cmd.toLatin1().data(), "r");
        fgets(line, sizeof(line), fp);
        pclose(fp);
        line[strlen(line)-1] = '\0';

        qDebug() << "LCore:checkPrinters::3:: return atoi(line) = " << atoi(line);
        return atoi(line);
    }

    qDebug() << "LCore:checkPrinters::3:: return 0.";
    return 0;
}

// cppcheck-suppress unusedFunction
void LCore::WritePrintersConf()
{
    qDebug() << "LCore:WritePrintersConf::3:: Start.";

    QList<QStringList> values = readCompleteTable("PrinterSettings", "");

    if(values.count() > 0)
    {
        QString deviceuri, strpwdfromdb;
        QFile printerConf(PRINTERS_CONF);

        if(printerConf.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            //QMap<QString, QString> mapCanonPrinters;
            QMap<QString, QString> mapOtherPrinters;

            bool condition = true;

            QTextStream out(&printerConf);
            for(int i=0; i< values.count(); i++)
            {
                //bool isCanonPrinter = false;
                QString portType = values.at(i).at(2).section(":", 0,0);

                if(portType.startsWith("USB"))
                {
                    if(thlpinfo == NULL)
                    {
                        thlpinfo = new threadgetdevices;
                        thlpinfo->start();

                        while(thlpinfo->isRunning())
                            qApp->processEvents();
                    }

                    int num, numdev;

                    num = portType.section("USB",1,1).toInt();
                    numdev = checkPrinters(0);

                    if(numdev < num)
                    {
                        portType = QString("USB1");
                        updateTable("PrinterSettings", QStringList("PortType='"+portType+"'"), "PrinterName='"+values.at(i).at(0)+"'");
                    }

                    portType = portType+":"+values.at(i).at(2).section(":", 1,1);
                }

                if(qgetenv("BOARDARCH") == "via-arm")
                {
                    if(portType.startsWith("COM") || portType.startsWith("LPT"))
                        condition = false;
                    else
                        condition = true;
                }

                if(condition)
                {
                    deviceuri = values.at(i).at(17);

                    deviceuri = deviceuri.trimmed();

                    if(deviceuri.isEmpty())
                    {
                        bool windrive;
                        if(values.at(i).at(11).isEmpty())
                            windrive = false;
                        else
                            windrive = true;

                        deviceuri = GetDeviceURI(portType, values.at(i).at(3), values.at(i).at(5), values.at(i).at(6), values.at(i).at(4), windrive,values.at(i).at(30));   //for Domain
                        deviceuri = deviceuri.trimmed();
                        updateTable("PrinterSettings", QStringList("DeviceURI='"+deviceuri+"'"), "PrinterName='"+values.at(i).at(0)+"'");
                    }

                    if(deviceuri.isEmpty() == false && values.at(i).at(6).isEmpty() == false)
                    {
                        QString strPlainPWD = encryptDecryptString(values.at(i).at(6),1);
                        strpwdfromdb = strPlainPWD ;
                        QString strlst;
                        strlst = deviceuri.section("@" , -1, -1).prepend(strPlainPWD+"@");
                        deviceuri = deviceuri.section(":", 0, 1).append(":"+strlst);
                    }

                    qDebug() << "LCore:WritePrintersConf::3:: Port type = " << portType;

                    QString product;
                    QStringList filterList;

                    if(values.at(i).at(1) == "1")
                        out << "<DefaultPrinter "+values.at(i).at(0)+">\n"; //line1 printers.conf
                    else
                        out << "<Printer "+values.at(i).at(0)+">\n";

                    out <<  "AuthInfoRequired none" << "\n";

                    QFile printerPPD(ADDED_PPD+values.at(i).at(0)+".ppd");

                    if(printerPPD.open(QIODevice::ReadOnly | QIODevice::Text))
                    {
                        QTextStream in(&printerPPD);
                        QString line;

                        while(!in.atEnd())
                        {
                            line = in.readLine();
                            if(line.contains("AuthInfoRequired username,password"))
                            {
                                out<< "# " << line << "\n";
                            }

                            if(line.startsWith("*ModelName:"))
                            {
                                line = line.section("*ModelName:",1,1);
                                line = line.simplified();
                                line = line.replace("\"","");
                                out << "Info " << line << "\n";  //line2 printers.conf
                                out << "Location" << "\n"; //line3 printers.conf

                                /* if(!isCanonPrinter && line.contains(QString("Canon")))
                                {
                                    isCanonPrinter = true;
                                    mapCanonPrinters.insert(values.at(i).at(0), portType);
                                }*/
                            }

                            if(line.startsWith("*NickName:"))
                            {
                                line = line.section("*NickName:",1,1);
                                line = line.simplified();
                                line = line.replace("\"","");
                                out << "MakeModel " << line << "\n"; //line4 printers.conf

                                /* if(!isCanonPrinter && line.contains(QString("Canon")))
                                {
                                    isCanonPrinter = true;
                                    mapCanonPrinters.insert(values.at(i).at(0), portType);
                                }*/
                            }

                            if(line.startsWith("*Product:"))
                            {
                                line = line.section("*Product:",1,1);
                                line = line.simplified();
                                product = line.replace("\"","");
                            }

                            if(line.startsWith("*cupsFilter:"))
                            {
                                line = line.section("*cupsFilter:",1,1);
                                line = line.simplified();
                                filterList.append(line.replace("\"",""));
                            }
                        }

                        printerPPD.close();
                    }

                    /*if(!isCanonPrinter)
                        mapOtherPrinters.insert(values.at(i).at(0), deviceuri);
                    else if (isCanonPrinter && getOSDetails(OSBUILD_FILE).contains("JHT",Qt::CaseInsensitive))
                        mapOtherPrinters.insert(values.at(i).at(0), deviceuri);*/

                    mapOtherPrinters.insert(values.at(i).at(0), deviceuri);
                    //line5 printers.conf

                    if(portType.startsWith("COM"))
                    {
                        out << "DeviceURI " << deviceuri << "\n";
                        if(values.at(i).at(15) == "1")
                            out << "Option raw 0\n";
                    }
                    else if(portType.startsWith("LPT"))
                    {
                        out << "DeviceURI " << deviceuri << "\n";

                        if(values.at(i).at(15) == "1")
                            out << "Option raw 0\n";
                    }
                    else if(portType.startsWith("USB"))
                    {
                        out << "DeviceURI " << deviceuri << "\n";

                        if(values.at(i).at(15) == "1")
                            out << "Option raw 0\n";
                        /* if(isCanonPrinter)
                        {
                            QString strPrinterNode = QString::number(portType.section(':', 0, 0).section("USB", 1, 1).toInt() - 1);
                            deviceuri = QString("ccp:/var/ccpd/fifo%1").arg(strPrinterNode);

                        }*/

                        out << "DeviceURI " << deviceuri << "\n";
                    }

                    else if(portType.startsWith("SAMBA"))
                    {
                        out << "DeviceURI " << deviceuri << "\n";
                    }
                    else if(portType.startsWith("IPP"))
                    {
                        out << "DeviceURI " << deviceuri << "\n";
                    }
                    else if(portType.startsWith("JDSOCKET"))
                    {
                        out << "DeviceURI " << deviceuri << "\n";
                    }
                    else if(portType.startsWith("LPR"))
                    {
                        out << "DeviceURI " << deviceuri << "\n";
                    }
                    else if(portType.startsWith("Custom Url"))
                    {
                        out << "DeviceURI " << deviceuri << "\n";
                    }

                    out << "State Idle\n";                            //line6 printers.conf
                    out << "product " << product << "\n";             //line7 printers.conf

                    for(int j=0;j<filterList.count(); j++)            //line8 printers.conf
                        out << "Filter " << filterList.at(j) << "\n";

                    out << "Accepting Yes\n";                         //line9 printers.conf

                    if(values.at(i).at(12) == "1")                     //line10 printers.conf
                        out << "Shared Yes\n";
                    else
                        out << "Shared No\n";

                    if(values.at(i).at(18) != "6.00")
                        out << "Option cpi "<< values.at(i).at(18) << "\n";

                    if(values.at(i).at(19) != "10.00")
                        out << "Option lpi "<< values.at(i).at(19) << "\n";

                    if(values.at(i).at(20) != "0")
                        out << "Option page-top "<< values.at(i).at(20) << "\n";

                    if(values.at(i).at(21) != "0")
                        out << "Option page-bottom "<< values.at(i).at(21) << "\n";

                    if(values.at(i).at(22) != "0")
                        out << "Option page-left "<< values.at(i).at(22) << "\n";

                    if(values.at(i).at(23) != "0")
                        out << "Option page-right "<< values.at(i).at(23) << "\n";

                    out << "JobSheets none none\nQuotaPeriod 0\nPageLimit 0\nKLimit 0\n"; //line10 11 12 13 printers.conf
                    out << "OpPolicy default\nErrorPolicy stop-printer\n";                     //line14 15 printers.conf
                    out << "</Printer>\n";
                }
                else
                    removePrinter(values.at(i).at(0));
            }

            printerConf.close();
            sync();

            /*
             While Writing in Printer.conf the data is consider malicious so before writing in Pinter.Conf the cups service was stop
             in Printer,So below command is added to start cups as it was required for lpadmin command.
            */
            system("/etc/rc.d/service/cups restart");

            QString build = OSBuildVersion();
            qDebug() << "LCore:WritePrintersConf::3:: build version" << build << build.contains("int", Qt::CaseInsensitive);
            if(!build.contains("int", Qt::CaseInsensitive))
            {
                QMapIterator<QString, QString> itr(mapOtherPrinters);
                while(itr.hasNext())
                {
                    itr.next();
                    QString strPrinterName = itr.key();
                    QString strDeviceURI = itr.value();

                    QStringList strlistArgs;
                    strlistArgs << QString("-p") << strPrinterName;
                    QString strPPDFile = QString("/etc/cups/ppd/%1.ppd").arg(strPrinterName);
                    if(QFile::exists(strPPDFile))
                        strlistArgs << QString("-P") << strPPDFile;

                    QString strencpsw = strpwdfromdb;

                    if(!strpwdfromdb.isEmpty() && (strpwdfromdb.contains("@")|| strpwdfromdb.contains("%") || strpwdfromdb.contains("/")))
                    {
                        strencpsw.replace("%","%25");
                        strencpsw.replace("@","%40");
                        strencpsw.replace("/","%2f");
                    }
                    else
                    {
                        strencpsw = strpwdfromdb;
                    }

                    if(strDeviceURI.contains(strpwdfromdb))
                        strDeviceURI = strDeviceURI.replace(strpwdfromdb,strencpsw);
//                    else
//                        strDeviceURI = strDeviceURI;

//                    strlistArgs << QString("-v") << strDeviceURI.toLatin1().toPercentEncoding() << QString("-E") << QString("-o") << QString("auth-info-required=none");
                    strlistArgs << QString("-v") << strDeviceURI << QString("-E") << QString("-o") << QString("auth-info-required=none");
                    qDebug() << "strlistArgs: " << strlistArgs.join(" ");
                    qDebug() << "LCore:WritePrintersConf::3:: lpadmin status : " << QProcess::execute(QString("lpadmin"), strlistArgs);
                }

                /*QProcess::execute(QString("killall -9 ccpd captmon2 startcaptstatusui.sh captstatusui"));

                if(mapCanonPrinters.count())
                {
                    if(!QFile::exists("/root/startcaptstatusui.sh"))
                    {
                        QFile file("/root/startcaptstatusui.sh");
                        if(file.open(QIODevice::WriteOnly | QIODevice::Text))
                        {
                            QTextStream out(&file);
                            out << "#!/bin/sh\n\n";
                            out << "export DISPLAY=:0.0\n\n";
                            out << "while [ 1 ]\n";
                            out << "do\n";
                            out << "\tcaptstatusui -P $1 -e\n";
                            out << "\tsleep 1\n";
                            out << "done\n";

                            file.close();
                            file.setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::WriteUser | QFile::ExeUser | QFile::ReadGroup | QFile::WriteGroup | QFile::ExeGroup | QFile::ReadOther | QFile::WriteOther | QFile::ExeOther);
                        }
                    }

                    bool bCupsWasRunning = true;

                    if(system("ps ax | grep cupsd | grep -v grep"))
                    {
                        bCupsWasRunning = false;
                        QProcess::execute(QString("%1/cups").arg(QString(SERVICES_PATH)), QStringList() << QString("start"));
                        ::sleep(0.5);
                    }

                    QDir canonDir;
                    canonDir.mkpath(QString("/var/ccpd"));
                    canonDir.mkpath(QString("/var/captmon"));

                    QMapIterator<QString, QString> itr(mapCanonPrinters);
                    while(itr.hasNext())
                    {
                        itr.next();
                        QString strPrinterName = itr.key();
                        QString strPrinterNode = QString::number(itr.value().section(':', 0, 0).section("USB", 1, 1).toInt() - 1);

                        qDebug() << "LCore:WritePrintersConf::3:: strPrinterName = " << strPrinterName  << " strPrinterNode = "<< strPrinterNode;

                        QStringList strlistArgs;
                        strlistArgs << QString("-x") << strPrinterName;
                        qDebug() << "LCore:WritePrintersConf::3:: ccpdadmin status = " << QProcess::execute(QString("ccpdadmin"), strlistArgs);

                        QString strDeviceNode = QString("/dev/usb/lp%1").arg(strPrinterNode);
                        QString strDeviceFifo = QString("/var/ccpd/fifo%1").arg(strPrinterNode);

                        mkfifo(strDeviceFifo.toLatin1(), 0777);

                        strlistArgs.clear();
                        if(!getOSDetails(OSBUILD_FILE).contains("JHT",Qt::CaseInsensitive))
                        {
                            strlistArgs << QString("-p") << strPrinterName << QString("-P") << QString("/etc/cups/ppd/%1.ppd").arg(strPrinterName) << QString("-v") << QString("ccp:%1").arg(strDeviceFifo) << QString("-E") << QString("-o") << QString("auth-info-required=none") ;
                            strlistArgs << QString("-p") << strPrinterName << QString("-P") << QString("/etc/cups/ppd/%1.ppd").arg(strPrinterName) << QString("-o auth-info-required=none") ;
                            qDebug() << "LCore:WritePrintersConf::3:: lpadmin status = " << QProcess::execute(QString("lpadmin"), strlistArgs);
                        }
                        strlistArgs.clear();
                        strlistArgs << QString("-p") << strPrinterName << QString("-o") << strDeviceNode;
                        qDebug() << "LCore:WritePrintersConf::3:: ccpdadmin status = " << QProcess::execute(QString("ccpdadmin"), strlistArgs);

                        QProcess::startDetached(QString("/root/startcaptstatusui.sh"), QStringList() << strPrinterName);
                    }

                    QProcess::execute(QString("ccpd"));

                    if(!bCupsWasRunning)
                        QProcess::execute(QString("killall -9 cupsd"));
                }*/

            }
            WriteSMBconf();
        }
    }
    else
    {
        QFile printerConf(PRINTERS_CONF);

        if(printerConf.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            printerConf.close();
            sync();
            WriteSMBconf();
        }
    }
    qDebug() << "LCore:WritePrintersConf::3:: End.";
}
void LCore::WriteSMBconf()
{
    qDebug() << "LCore:WriteSMBconf::3:: Start.";

    QList<QStringList> printervalues = readCompleteTable("PrinterSettings", "");
    QStringList usbconfvalues = readTable("USB", "");
    QStringList cdromconfvalues = readTable("CDROM", "");
    QStringList mobilestorageconfvalues = readTable("MobileStorage", "");

    QStringList ADSSettings = readTable(QString("ADSSettings"), "");
    QList<QStringList> listSMBShareValues = readCompleteTable(QString("SMBShare"), QString(""));

    QFile smbconf(SMBCONF_FILE);

    if(smbconf.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&smbconf);
        out << "# Global parameters\n";
        out << "[global]\n";
        out << "    unix charset = ISO-8859-1\n";

        QStringList list = readTable("SysConf", "Property='Hostname'", "Value");
        if(list.size())
            out << "    netbios name = "+list.at(0)+"\n";


        if(!ADSSettings.isEmpty())
        {
            QStringList listValue = readTable("SysConf", "Property='ADSSettingsWorkgroup'", "Value");   /// used for Technova(Taloja) image
            if(listValue.size())
                out << "    workgroup = " + listValue.first()+"\n";
            else
                out << "    workgroup = " + ADSSettings[2].section(".",0,0).toUpper()+"\n";
            out << "    realm = " + ADSSettings[2].toUpper()+"\n";
        }
        else
            out << "    workgroup = WORKGROUP\n";

        if(!ADSSettings.isEmpty())
        {
            out << "    security = ads\n";
            out << "    password server = " + ADSSettings.at(0)+"\n";
        }
        else
        {
            out << "    security = user\n";                //changed from "share" to "user"
        }

        out << "    server string = WORKGROUP\n";

        /// Added configuration parameter for offline ADS  Genpac by ritesh according to Prashant Pokhariya @ 7 Dec 2016
        out << "    winbind enum users = Yes\n";
        out << "    winbind enum groups = Yes\n";
        out << "    winbind use default domain = Yes\n";
        out << "    winbind refresh tickets = Yes\n";
        out << "    winbind offline logon = Yes\n";
        out << "    winbind normalize names = Yes\n";
        out << "    idmap config DOMAIN:range = 10000-999999\n";
        out << "    idmap config DOMAIN:schema_mode = rfc2307\n";
        out << "    idmap config DOMAIN:backend = ad\n";
        out << "    idmap config *:range = 2000-9999\n";
        out << "    idmap config * : backend = tdb\n";
        // ============================================================================ //
        out << "    ldap ssl = No\n";
        out << "    read only = No\n";
        out << "    create mask = 0755\n";
        out << "    directory mask = 0755\n";

        if(qgetenv("BOARDARCH") != "via-arm")
        {
            out << "    client signing = mandatory\n";
            out << "    server signing = mandatory\n";    //added for TCS
            out << "    guest account = nobody\n";        //added for TCS
        }

        QStringList listValues = readTable("SysConf", "Property='SyncPasswordSMB'", "Value");
        if(listValues.count() && listValues.at(0) == "2")
        {
            out << "    map to guest = Bad Password\n";
            out << "    #restrict anonymous = 2\n";
        }
        else
        {
            out << "    map to guest = Never\n";
            out << "    restrict anonymous = 2\n";
        }

        //For TCS Changes related to CIFS to disable SMB1 to  remove vulnerability Discuss with Mr.Pratik najare

        QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
        if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
        {
            out << "    min protocol = SMB2\n";
        }
        //share via SMB
        {
            out << "\n[smb-share]\n";
            out << "    path = /tmp/smb-share\n";
            out << "    read only = No \n";
            out << "    guest ok = Yes \n";
            out << "    public = Yes \n";
            out << "    browseable = Yes \n";
            out << "    writable = Yes \n";
            out << "    create mode = 0700 \n";
        }

        if(QFile::exists("/usr/sbin/cupsd"))
        {
            QDir chkdir;

            if(!chkdir.exists("/var/spool/samba"))
                QProcess::execute("mkdir -p /var/spool/samba; chmod -R 755 /var");

            for(int i=0; i<printervalues.count(); i++)
            {
                if(printervalues.at(i).at(12) == "1")
                {
                    out << "\n["+printervalues.at(i).at(0)+"]\n";
                    out << "    comment = All Printers\n";
                    out << "    path = /var/spool/samba\n";
                    out << "    printing = cups\n";
                    out << "    printer = "+printervalues.at(i).at(0)+"\n";
                    out << "    public = yes\n";
                    out << "    browsable = yes\n";
                    out << "    guest ok = yes\n";
                    out << "    writable = yes\n";
                    out << "    printable = yes\n";
                    out << "    create mode = 0700\n";
                    out << "    print command = /usr/bin/lpr -P%%p -r %%s -v\n";
                    out << "    lpq command = /usr/bin/lpq -P%%p\n";
                    out << "    lprm command = /usr/bin/lprm -P%%p %%j\n";
                    out << "    use client driver = yes\n";
                }
            }
        }

        if(!usbconfvalues.isEmpty())
        {
            if(usbconfvalues.at(0) == "1" && usbconfvalues.at(2) == "1")
            {
                out << "\n[usb]\n";
                out << "    comment = USB Drives\n";
                out << "    path = /media/usb\n";
                out << "    public = yes\n";
                out << "    browseable = yes\n";
                out << "    guest ok = yes\n";
                out << "    writable = yes\n";
                if(usbconfvalues.at(1) == "1")
                    out << "    read only = yes\n";
                else
                    out << "    read only = no\n";
                out << "    create mode = 0755\n";
            }
        }

        if(!cdromconfvalues.isEmpty())
        {
            if(cdromconfvalues.at(0) == "1" && cdromconfvalues.at(2) == "1")
            {
                out << "\n[cdrom]\n";
                out << "    comment = USB Drives\n";
                out << "    path = /media/cdrom\n";
                out << "    public = yes\n";
                out << "    browseable = yes\n";
                out << "    guest ok = yes\n";
                out << "    writable = yes\n";
                out << "    read only = yes\n";
                out << "    create mode = 0755\n";
            }
        }

        if(!mobilestorageconfvalues.isEmpty())
        {
            if(mobilestorageconfvalues.at(0) == "1" && mobilestorageconfvalues.at(2) == "1")
            {
                out << "\n[Mobile-Storage]\n";
                out << "    comment = Mobile-Storage Drives\n";
                out << "    path = /media/mobilestorage\n";
                out << "    public = yes\n";
                out << "    browseable = yes\n";
                out << "    guest ok = yes\n";
                out << "    writable = yes\n";
                if(mobilestorageconfvalues.at(1) == "1")
                    out << "    read only = yes\n";
                else
                    out << "    read only = no\n";
                out << "    create mode = 0755\n";
            }
        }

        if(!listSMBShareValues.isEmpty())
        {
            for(int i = 0; i < listSMBShareValues.count(); i++)
            {
                QString strPath = listSMBShareValues[i].first();
                strPath.replace('/',"-").remove(0,1);
                strPath.append("-share");
                qDebug() << "LCore:WriteSMBconf::3:: path = " << strPath;
                out << "\n["+strPath+"]\n";
                out << "    path = "+listSMBShareValues[i].first()+"\n";
                out << "    public = yes\n";
                out << "    browseable = yes\n";
                out << "    guest ok = yes\n";
                if(listSMBShareValues[i].last().toInt())
                {
                    out << "    writable = yes\n";
                    out << "    read only = no\n";
                }
                else
                {
                    out << "    writable = no\n";
                    out << "    read only = yes\n";
                }
                out << "    create mode = 0755\n";
            }
        }

        smbconf.close();
        sync();

        //writeNSSwitch();
        QProcess::execute("smbcontrol smbd reload-config");
    }
    qDebug() << "LCore:WriteSMBconf::3:: End.";
}

// cppcheck-suppress unusedFunction
void LCore::cupsEnable()
{
    qDebug() << "LCore:cupsEnable::3:: Start.";
    QList<QStringList> pvalues = readCompleteTable("PrinterSettings", "");

    for(int i=0; i<pvalues.count(); i++)
        QProcess::startDetached("cupsenable "+pvalues[i][0]);

    qDebug() << "LCore:cupsEnable::3:: End.";
}

bool LCore::removePrinter(const QString& PrinterName)
{
    qDebug() << "LCore:removePrinter::3:: Start.";
    qDebug() << "LCore:removePrinter::3:: args : PrinterName = " << PrinterName;
    if(readTable("PrinterSettings", "PrinterName='"+PrinterName+"'").at(1) == "1") //Make a printer default b4 deleting a default printer
    {
        if(!readTable("PrinterSettings", "PrinterName!='"+PrinterName+"'").isEmpty())
            updateTable("PrinterSettings", QStringList("DefaultPrinter=1"), "PrinterName='"+
                        readTable("PrinterSettings", "PrinterName!='"+PrinterName+"'").at(0)+"'");
    }

    if(deleteEntry("PrinterSettings", "PrinterName='"+PrinterName+"'") == "Successfull")
    {
        bool found = false;
        QString MappedPrinters;
        QStringList printerlist;

        if(isTableExists("ICAGLOBAL"))
        {
            printerlist = readTable("ICAGLOBAL", "").at(42).split(":");

            for(int i=0; i<printerlist.count(); i++)
            {
                if(printerlist[i] == PrinterName)
                {
                    found = true;
                    printerlist.removeAt(i);
                    break;
                }
            }

            if(found)
            {
                MappedPrinters.clear();
                for(int i=0; i<printerlist.count(); i++)
                {
                    MappedPrinters.append(printerlist[i]);
                    MappedPrinters.append(":");
                }

                MappedPrinters.chop(1);

                updateTable("ICAGLOBAL", QStringList("PrinterList='"+MappedPrinters+"'"), "");
                WriteWfclient();
            }
        }

        if(isTableExists("RDPGlobalSettings"))
        {
            printerlist = readTable("RDPGlobalSettings", "").at(23).split(",");

            for(int i=0; i<printerlist.count(); i++)
            {
                if(printerlist[i] == PrinterName)
                {
                    found = true;
                    printerlist.removeAt(i);
                    break;
                }
            }

            if(found)
            {
                MappedPrinters.clear();
                for(int i=0; i<printerlist.count(); i++)
                {
                    MappedPrinters.append(printerlist[i]);
                    MappedPrinters.append(",");
                }

                MappedPrinters.chop(1);

                updateTable("RDPGlobalSettings", QStringList("CheckedPrinters='"+MappedPrinters+"'"), "");
            }
        }
        qDebug() << "LCore:removePrinter::3:: return true";
        return true;
    }
    qDebug() << "LCore:removePrinter::3:: return false";
    return false;
}

// cppcheck-suppress unusedFunction
int LCore::checkIPConflict(const QString& ip, const QString& DeviceType)
{
    qDebug() << "LCore:checkIPConflict::3:: Start.";
    qDebug() << "LCore:checkIPConflict::3:: args : ip = " << ip << " DeviceType = " << DeviceType;

    QString response;
    QProcess proc_arping;
    QStringList arguments;

    arguments << "-D" << "-I" << DeviceType << "-w" << "1" << ip;
    proc_arping.start("arping", arguments);
    if(proc_arping.waitForFinished())
    {
        QString data = QString(proc_arping.readAll());
        QStringList lines = data.split("\n");
        for (int i = 0; i < lines.size(); ++i)
        {
            QString datan = lines.at(i);
            if(datan.contains("Received"))
                response = datan.section(" ", 1, 1);
        }
    }
    qDebug() << "LCore:checkIPConflict::3:: return response = " << response.toInt();
    return response.toInt();
}

// cppcheck-suppress unusedFunction
void LCore::writeShortcutKeyFile()
{
    qDebug() << "LCore:writeShortcutKeyFile::3:: Start.";

    QStringList defaultsh;

    bool bDisablePrintScreen = false;
    QStringList strPScreen = readDefaultsValue("disablePrintScreen");
    if(!strPScreen.isEmpty() && strPScreen.at(0).toInt())
    {
        bDisablePrintScreen =  true;
    }
    bool bIsTCS = false;
    QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
    if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
    {
        bDisablePrintScreen = true;
        bIsTCS = true;
    }

    bool bIsBEL = false;
    QStringList  strlistCheckBEL = readDefaultsValue("BELEnable");
    if(strlistCheckBEL.count() && strlistCheckBEL.at(0).toInt())
    {
        bIsBEL = true;
    }

    bool bShowKeyboardLayoutInHotplug = false;  // This condition is check becoz on check box value we have show and disble shortcuts for KeyboardLayout.
    if(getsystemTrayStatus(QString("SystemTrayProperties"), QString("KeyboardLayout")) == 1)
    {
        bShowKeyboardLayoutInHotplug = true;
    }

    QStringList strlistDriverName;
    QString strDriver;
    QStringList strMultiDisplay = readDefaultsValue("EnableMultiDisplay");
    if(!strMultiDisplay.isEmpty() && strMultiDisplay.at(0).toInt())
    {
        strlistDriverName = readTable(QString("MultipleDisplay"), "PrimaryDisplay=2" );
        if(!strlistDriverName.isEmpty())
            strDriver = strlistDriverName.at(1);
    }
    else
    {
        strlistDriverName = readTable(QString("DisplaySettings"), "");
        if(!strlistDriverName.isEmpty())
            strDriver = strlistDriverName.at(0);
    }

    if(getOSDetails(QString(SDA1OSBUILD)).contains("EAD"))
        defaultsh<< "Alt+Ctrl+C" << "Alt+Shift+C" << "Alt+Tab" << "Alt+Ctrl+Left" << "Alt+F1" << "Super+L" << "Alt+Ctrl+S" << "Ctrl+F2" << "Ctrl+Shift+H"<<"Print"<<"Ctrl+Alt+Del" << "Ctrl+Shift+T" << "Alt+Ctrl+L" << "Ctrl+Shift+S" << "Ctrl+Shift+G" << "Alt+S";
    else if(bIsTCS)
        defaultsh << "Alt+Ctrl+C" << "Alt+Shift+C" << "Alt+Ctrl+Right" << "Alt+Ctrl+Left" << "Alt+F1" << "Alt+Ctrl+L" << "Alt+Ctrl+S" << "Ctrl+F2" << "Ctrl+Shift+H" << "Ctrl+Shift+T" << "Ctrl+Shift+S" << "Ctrl+Shift+G" << "Alt+S";
    else if(bDisablePrintScreen)
        defaultsh << "Alt+Ctrl+C" << "Alt+Shift+C" << "Alt+Ctrl+Right" << "Alt+Ctrl+Left" << "Alt+F1" << "Super+L" << "Alt+Ctrl+S" << "Ctrl+F2" << "Ctrl+Shift+H" << "Ctrl+Shift+T" << "Alt+Ctrl+L" << "Ctrl+Shift+S" <<"Ctrl+Shift+G" << "Alt+S";
    else if(strDriver == "vesa")    // for vesa driver condition on 23/02/2017
        defaultsh << "Alt+Ctrl+C" << "Alt+Shift+C" << "Alt+Ctrl+Right" << "Alt+Ctrl+Left" << "Alt+F1" << "Super+L" << "Alt+Ctrl+S" << "Ctrl+F2" << "Print" << "Ctrl+Shift+T" << "Alt+Ctrl+L" << "Ctrl+Shift+S" << "Ctrl+Shift+G" << "Alt+S";
    else
        defaultsh << "Alt+Ctrl+C" << "Alt+Shift+C" << "Alt+Ctrl+Right" << "Alt+Ctrl+Left" << "Alt+F1" << "Super+L" << "Alt+Ctrl+S" << "Ctrl+F2" << "Ctrl+Shift+H"<<"Print" << "Ctrl+Shift+T" << "Alt+Ctrl+L" << "Ctrl+Shift+S" << "Ctrl+Shift+G" <<"Alt+S";

    if(bIsBEL)
	defaultsh.removeAll("Super+L");

    if(QFile::exists(CONFIG_FILE))
    {
        QList<QStringList> tableData;
        tableData = readCompleteTable("SystemShortcutKeys", "ConnType !=''");

        for(int i=0;i<tableData.count();i++)
        {
            QStringList strlist;
            strlist << tableData.at(i);
            if(defaultsh.contains(strlist.at(2)))
            {
                deleteEntry("SystemShortcutKeys","ConnType='"+strlist.at(0)+"' AND AppConn= '"+strlist.at(1)+"' ");
            }
        }
        qDebug() << "LCore:writeShortcutKeyFile::3:: return .";
        return;
    }

    /*******************Default Shortcuts ************************/


    QStringList SHvalues = readTable("SystemShortcutKeys", "", "AppConn");

    qDebug() << "LCore:writeShortcutKeyFile::3:: check table = "<< SHvalues;

    QList<QStringList> scValues;
    QStringList tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9,tmp10,tmp11,tmp12, tmp13, tmp14, tmp15, tmp16;
    tmp1 << "" << "Control Center" << "" << "2";
    tmp2 << "" << "Connection Manager" << "" << "2";
    tmp3 << "" << "Switch to next application" << "" << "1";
    tmp4 << "" << "Switch to last application" << "" << "1";
    tmp6 << "" << "Start Menu" << "" << "1";
    if(!bIsBEL)
        tmp5 << "" << "Lock Screen" << "" << "3";
    tmp7 << "" << "Show Info" << "" << "4";
    tmp8 << "" << "scan-wfica" << "" << "5";

    if(strDriver != "vesa") // for vesa driver condition on 23/02/2017
        tmp9 << "" << "S3" << "" << "6";
    if(getOSDetails(QString(SDA1OSBUILD)).contains("EAD", Qt::CaseInsensitive))
        tmp10 << "" << "kill xinit" << "" << "7";
    if(!bDisablePrintScreen)
        tmp11 << ""<<"ScreenCapture"<<""<<"8";

    tmp12 << "" << "Task Manager" << "" << "9";

    if(!bIsTCS)
        tmp13 << "" << "Logout" << "" << "10";

    tmp14 << "" << "Sound" << "" << "11";

    tmp15 <<"" << "SetDefaultKeyboardLayout" << "" <<"12";

    tmp16 <<"" << "SwitchKeyboardLayout" << "" <<"13";

    scValues.clear();
    scValues.insert(0, tmp1);
    scValues.insert(1, tmp2);
    scValues.insert(2, tmp3);
    scValues.insert(3, tmp4);
    scValues.insert(4, tmp6);
    if(!bIsBEL)
        scValues.insert(5, tmp5);
    scValues.insert(6, tmp7);
    scValues.insert(7, tmp8);

    if(strDriver != "vesa") // for vesa driver condition on 23/02/2017
        scValues.insert(8, tmp9);
    if(!bDisablePrintScreen)
        scValues.insert(9, tmp11);
    if(getOSDetails(QString(SDA1OSBUILD)).contains("EAD", Qt::CaseInsensitive))
        scValues.insert(10, tmp10);

    scValues.insert(11,tmp12);

    if(!bIsTCS)
        scValues.insert(12,tmp13);

    scValues.insert(13,tmp14);

    scValues.insert(14,tmp15);
    scValues.insert(15,tmp16);

    if(SHvalues.isEmpty())
    {
        for(int i=0; i<scValues.count(); i++)
        {
            writeTable("SystemShortcutKeys", "ConnType VARCHAR(20), AppConn VARCHAR(200),  KeyCombination VARCHAR(50), Flag INTEGER",
                       "'', '"+scValues[i][1]+"', '"+defaultsh[i]+"', "+scValues[i][3], "AppendNew");
        }
    }
    else
    {
        for(int i=0; i<scValues.count(); i++)
        {
            if(isTableExists("SystemShortcutKeys", "AppConn='"+scValues[i][1]+"'") == 0)
            {
                writeTable("SystemShortcutKeys", "ConnType VARCHAR(20), AppConn VARCHAR(200),  KeyCombination VARCHAR(50), Flag INTEGER",
                           "'', '"+scValues[i][1]+"', '"+defaultsh[i]+"', "+scValues[i][3], "AppendNew");
            }
        }
    }


    qDebug()<< "LCore:writeShortcutKeyFile::3:: /*******************Default Shortcuts **************************/";

    QMap<QString, QString> prefvalues;
    QList<QStringList> shfilecontent;

    QFile shfileout(SHKEY_FILE);

    if(shfileout.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&shfileout);

        shfilecontent = readCompleteTable("SystemShortcutKeys", "");

        int count = 0;

        for(int i=0; i<shfilecontent.count(); i++)
        {
            if(shfilecontent[i][3] == "0" && !shfilecontent[i][2].isEmpty())
            {
                if(shfilecontent[i][0].isEmpty())
                    out << "key \""+shfilecontent[i][2]+"\"\t\txalf -s "+shfilecontent[i][1] << "\n";
                else
                {
                    if(getOSDetails(QString(SDA1OSBUILD)).contains("EAD", Qt::CaseInsensitive))
                    {
                        QStringList BrowserValuse =readTable( "Browser", "Name='"+shfilecontent[i][1]+"'");
                        if(BrowserValuse.count() && shfilecontent[i][0] == "Browser" && BrowserValuse.at(0).simplified() == QString(shfilecontent[i][1])   && BrowserValuse.at(5).simplified() == "Superkiosk" && BrowserValuse.at(15).simplified() =="Firefox" && shfilecontent[i][2]=="Alt+F4")
                        {
                            QFile relauchbrowser("/root/.relaunchbrowser");
                            if(relauchbrowser.open(QIODevice::WriteOnly | QIODevice::Text))
                            {
                                QTextStream outn(&relauchbrowser);
                                outn <<"#!/bin/sh" <<"\n";
                                outn <<"killall firefox"<<"\n";

                                if(BrowserValuse.at(1).trimmed().length())
                                    outn <<"/opt/firefox/firefox -p \""+shfilecontent[i][1]+"\" \""+BrowserValuse.at(1)+"\" & "<<"fpid=$!" <<"\n";
                                else
                                    outn <<"/opt/firefox/firefox -p \""+shfilecontent[i][1]+"\" & "<<"fpid=$!"<<"\n";

                                outn << "sqlite3 /data/sysconf.db \"UPDATE ConnectionTable SET PID='$fpid', Status ='Active' WHERE ConnectionType='"+shfilecontent[i][0]+"' AND ConnectionName='"+shfilecontent[i][1]+"'\""<<"\n";
                                outn <<"kill -10 `pidof TCCenter`"<<"\n";
                                relauchbrowser.close();
                            }
                            relauchbrowser.setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::WriteUser | QFile::ExeUser | QFile::ReadGroup | QFile::ExeGroup | QFile::ReadOther | QFile::ExeOther);
                            out << "key \""+shfilecontent[i][2]+"\"\t\t/root/.relaunchbrowser" << "\n";
                        }
                        else
                            out << "key \""+shfilecontent[i][2]+"\"\t\txalf -s LaunchCommand \""+shfilecontent[i][1]+"\" "+shfilecontent[i][0] << "\n";

                    }
                    else
                    {
                        QString primeKey,strConnName,strConnType;
                        primeKey = " Name='";
                        strConnName = shfilecontent[i][1];
                        primeKey.append(strConnName).append("'");
                        strConnType = shfilecontent[i][0];
                        QStringList  connection_property = readTable( strConnType , primeKey );
                        if(strConnType == "Browser" && connection_property.at(16) == "Secondary")
                            out << "key \""+shfilecontent[i][2]+"\"\t\tLaunchCommand \""+shfilecontent[i][1]+"\" "+shfilecontent[i][0] << "\n";
                        else
                            out << "key \""+shfilecontent[i][2]+"\"\t\txalf -s LaunchCommand \""+shfilecontent[i][1]+"\" "+shfilecontent[i][0] << "\n";
                    }
                }
            }
            else if(shfilecontent[i][3] == "1")
            {
                if(shfilecontent[i][1] == "Switch to next application") //if(!count1)
                    prefvalues.insert("KeySysSwitchNext", shfilecontent[i][2]);
                else if(shfilecontent[i][1] == "Switch to last application") //if(count1 == 1)
                    prefvalues.insert("KeySysSwitchLast", shfilecontent[i][2]);
                else if(shfilecontent[i][1] == "Start Menu")
                    prefvalues.insert("KeySysMenu", shfilecontent[i][2]);
            }
            else if(shfilecontent[i][3] == "2" && !shfilecontent[i][2].isEmpty())
            {
                if(!count)
                    out << "key \""+shfilecontent[i][2]+"\"\t\txalf -l \"Control Center\" -s "+"TCCenter" << "\n";
                else
                    out << "key \""+shfilecontent[i][2]+"\"\t\txalf -l \""+shfilecontent[i][1]+"\" "" -s "+"TCCenter 1" << "\n";
            }
            else if(shfilecontent[i][3] == "3" && !shfilecontent[i][2].isEmpty())
            {
                if(!bIsBEL)
                    out << "key " << "\"" << shfilecontent[i][2] << "\"\t\t"<< "/usr/os-bin/LockScreen user" << "\n";
            }
            else if(shfilecontent[i][3] == "4" && !shfilecontent[i][2].isEmpty())
            {
                out << "key " << "\"" << shfilecontent[i][2] << "\"\t\t"<< "/usr/os-bin/ShowInfo" << "\n";
            }
            else if(shfilecontent[i][3] == "5" && !shfilecontent[i][2].isEmpty())   /// on 30july2016 for PNAgent
            {
                out << "key \""+shfilecontent[i][2]+"\"\t\t\t "+"/usr/os-bin/scan-wfica" << "\n";
            }
            else if(shfilecontent[i][3] == "6" && !shfilecontent[i][2].isEmpty())   /// on 13feb2017 for s3
            {
                QStringList strS3list = readTable("sysconf", "Property='S3'", "Value"); //changes for disabling shortcut if sleep is not avilable in Menu list- varsha
                if(strDriver != "vesa" && strS3list.contains("0")) // for vesa driver condition on 23/02/2017
                    out << "#key \""+shfilecontent[i][2]+"\"\t\t\t "+"/usr/os-bin/s3.sh" << "\n";
                else if(strDriver != "vesa" && strS3list.contains("1"))
                    out << "key \""+shfilecontent[i][2]+"\"\t\t\t "+"/usr/os-bin/s3.sh" << "\n";
            }
            else if(shfilecontent[i][3] == "8")
            {
                //                QStringList strKeyCodeList = readTable("SysConf", "Property='PrintKeyCode'", "Value");
                if(!shfilecontent[i][2].isEmpty() && !bDisablePrintScreen)
                {
                    out << "key " << "\"" << shfilecontent[i][2] << "\"\t\t"<< "/usr/os-bin/MyScreenCapture " << "\n";

                    //                    if(!strKeyCodeList.isEmpty())
                    //                    {
                    //                        if(strKeyCodeList.at(0).contains(",")){
                    //                            QStringList strCodeList =    strKeyCodeList.at(0).split(",");
                    //                            foreach(QString str, strCodeList) {
                    //                                QString strCmd =  QString("xmodmap") + QString(" -e ")+ QString("'"+ str+"'");
                    //                                system(strCmd.toLatin1());
                    //                            }
                    //                        }
                    //                        else{
                    //                            QString strCmd =  QString("xmodmap") + QString(" -e ")+ QString("'"+ strKeyCodeList.at(0)+"'");
                    //                            system(strCmd.toLatin1());
                    //                        }
                    //                    }
                }
                //                else
                //                {
                //                    // Done this because to restrict ScreenCapture in sessions.
                //                    if(!strKeyCodeList.isEmpty())
                //                    {
                //                        if(strKeyCodeList.at(0).contains(",")){
                //                            QStringList strCodeList =    strKeyCodeList.at(0).split(",");
                //                            foreach(QString str, strCodeList) {
                //                                QString strCmd =  QString("xmodmap") + QString(" -e ")+ QString("'"+ str.section("=", 0, 0)+ "="+ "'");
                //                                system(strCmd.toLatin1());
                //                            }
                //                        }
                //                        else{
                //                            QString strCmd =  QString("xmodmap") + QString(" -e ")+ QString("'"+ strKeyCodeList.at(0).section("=", 0, 0)+ "="+ "'");
                //                            system(strCmd.toLatin1());
                //                        }
                //                    }
                //                }
            }
            else if(shfilecontent[i][3] == "9" && !shfilecontent[i][2].isEmpty())
                out << "key " << "\"" << shfilecontent[i][2] << "\"\t\t"<< "/usr/os-bin/TaskManager " << "\n";
            else if(shfilecontent[i][3] == "10" && !shfilecontent[i][2].isEmpty())
            {
                if(!bIsTCS)
                    out << "key " << "\"" << shfilecontent[i][2] << "\"\t\t"<< "/usr/os-bin/OS_Desktop --forcelogout" << "\n";     //27/06/17 -- Mayur --added for forcelogout (for addition in Shortcutkey table)
            }
            else if(shfilecontent[i][3] == "11" && !shfilecontent[i][2].isEmpty())
            {
                QStringList strlistcurrentMode, strlistmoduleList, InstallermoduleList;
                strlistcurrentMode = readTable("SysConf", "Property='CurrentLoggedIn'", "Value");
                strlistmoduleList = readTable(QString("UserAccess"),"ModuleName = 'Sound'");
                InstallermoduleList = readTable(QString("InstallerAccess"),"ModuleName = 'Sound'");

                if(strlistcurrentMode.count() && strlistcurrentMode.first() == "Admin" || ((strlistcurrentMode.first() == "MyUser" || strlistcurrentMode.first() == "LDAP" || strlistcurrentMode.first() == "ADS") && !strlistmoduleList.isEmpty()) || ( strlistcurrentMode.first() == "Installer" && !InstallermoduleList.isEmpty()))
                {
                    out << "key " << "\"" << shfilecontent[i][2] << "\"\t\t"<< "/usr/os-bin/Sound showDialog " << "\n";
                }
            }
            else if(shfilecontent[i][3] == "12" && !shfilecontent[i][2].isEmpty())
            {
                if(bShowKeyboardLayoutInHotplug)
                {
                    out << "key " << "\"" << shfilecontent[i][2] << "\"\t\t"<< "/usr/os-bin/LayoutVariantSetting --setdefault" << "\n";
                }
            }
            else if(shfilecontent[i][3] == "13" && !shfilecontent[i][2].isEmpty())
            {
                if(bShowKeyboardLayoutInHotplug)
                {
                    out << "key " << "\"" << shfilecontent[i][2] << "\"\t\t"<< "/usr/os-bin/LayoutVariantSetting --switchLayout " << "\n";
                }
            }
            ++count;
        }

        QStringList listValues = readTable("SysConf", "Property='FuncKeyDisable'", "Value");
        if(!listValues.count())
            listValues << QString("0");

        if(listValues.at(0).toInt())
        {
            QFile tfile(QString("/tmp/.disablefn"));
            if(tfile.open(QIODevice::Text | QIODevice::WriteOnly))
                tfile.close();

            QStringList strlistFunctionKeys;
            strlistFunctionKeys << QString("F1") << QString("F2") << QString("F3") << QString("F4") << QString("F5") << QString("F6") << QString("F7") << QString("F8") << QString("F9") << QString("F10") << QString("F11") << QString("F12");

            for(int i = 0; i < strlistFunctionKeys.count(); i++)
                out << "key " << "\"" << strlistFunctionKeys.at(i) << "\"\t\t"<< QString("/tmp/.disablefn") << "\n";
        }

        QFile addkeys(ADDKEYS_FILE);
        if(addkeys.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&addkeys);
            while(!in.atEnd())
            {
                QString strText = in.readLine();
                out << strText << "\n";
            }
            addkeys.close();
        }

        if(getOSDetails(QString(SDA1OSBUILD)).contains("EAD", Qt::CaseInsensitive))
            out << "key " << "\"Ctrl+Alt+Del\"" << "\t\t" << "/usr/os-bin/OS_Desktop --logoutnow" << "\n";

        if(checkLink("VOSDebugMode"))
            out << "key " << "\"Alt+Ctrl+Shift+D\"" << "\t\t" << "/usr/os-bin/VOSDebugMode" << "\n";

        QStringList DisableCtrlAltDel = readDefaultsValue("DisableCtrlAltDel");
        if(DisableCtrlAltDel.count())
        {
            bool checkDisableCtrlAltDel =  DisableCtrlAltDel.at(0).toInt();
            if(checkDisableCtrlAltDel == 1)
            {
                out << "key " << "\"" << QString("Ctrl+Alt+Del") << "\"\t\t"<< QString("\"\"") << "\n";
                out << "key " << "\"" << QString("Ctrl+Alt+KP_Delete") << "\"\t\t"<< QString("\"\"") << "\n";
            }
        }

        out <<"key " <<"\"Alt+Up\""  << "\t\t" << "/usr/os-bin/brightness.sh up" << "\n";
        out <<"key " <<"\"Alt+Down\""  << "\t\t" << "/usr/os-bin/brightness.sh down" << "\n";


        shfileout.close();
        sync();
    }

    if(prefvalues.count())
        writeFile(SHPREF_FILE, prefvalues);

    if(bDisablePrintScreen)
    {
        disableKeyCode("Print");
    }
    qDebug() << "LCore:writeShortcutKeyFile::3:: End.";
}

void LCore::changeDisplayDriver()
{
    qDebug() << "LCore:changeDisplayDriver::3:: Start.";

    QFile debugFile("/root/.dbg");
    if (!debugFile.open(QIODevice::WriteOnly | QIODevice::Text))
        return;

    QTextStream dbgout(&debugFile);

    QStringList driverList = getDisplayDriverList();

    QStringList listValues = readTable("SysConf", "Property='drivername'", "Value");
    if(listValues.count())
        driverList = listValues;

    if(driverList.count())
    {
        //        QString strLinkDetails = getLSUSBOutput("DisplayLink", "17e9");
        bool bDisplayLinkCheck = false;
        //        if(!strLinkDetails.isEmpty())
        //            bDisplayLinkCheck = true;

        QString driverName = driverList.at(0);
        qDebug() << "LCore:changeDisplayDriver::3:: DriverName = " << driverName;
        QStringList lines;
        int flag = 0;

        QString strXorgFile = QString(XORGCONF_FILE);

        if(qgetenv("OSPROJECT") == "McD")
            strXorgFile = QString(MCDXORGCONFFILE);

        QFile file(strXorgFile);
        if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            dbgout << "Xorg File Not Found";
            return;
        }

        QTextStream in(&file);
        while (!in.atEnd()) {
            QString line = in.readLine();
            if(line == QString("Section \"Device\""))
                flag = 1;
            if(line.startsWith("\tDriver") && flag == 1)
            {
                qDebug() << "LCore:changeDisplayDriver::3:: Line = " << line;
                if(QFile::exists(QString("/usr/lib/xorg/modules/drivers/modesetting_drv.so")) && !bDisplayLinkCheck)
                    line = "\tDriver      \"modesetting\"";
                else
                    line = "\tDriver      \"" + driverName + "\"";
                flag = 0;
            }
            if(line.contains("PreferredMode"))
                line = "";

            if(line.length())
                lines += line;
        }
        file.close();

        QFile filexorg(strXorgFile);
        if (!filexorg.open(QIODevice::WriteOnly | QIODevice::Text))
            return;

        QTextStream out(&filexorg);
        for (int i = 0; i < lines.size(); ++i)
            out << lines.at(i) << "\n";

        //=========================================================
     /*   QStringList blacklistLines;
        if(driverName == "vesa")
        {
            blacklistLines += "\n";
            blacklistLines += "install via_chrome9 /bin/false";
            blacklistLines += "\n";
            blacklistLines += "install cedarview_gfx /bin/false";
            blacklistLines += "\n";
            blacklistLines += "install viafb /bin/false";

            if(qgetenv("OSPROJECT") == "McD")
            {
                blacklistLines += "\n";
                blacklistLines += "install via_agp /bin/false";
            }

            blacklistLines += "\n";
            blacklistLines += "install i915 /bin/false";
            if (!getVGAcard().contains("Nvdia", Qt::CaseInsensitive) || !getVGAcard().contains("NVIDIA", Qt::CaseInsensitive))
            {
                blacklistLines += "\n";
                blacklistLines += "install nouveau /bin/false";
            }
            blacklistLines += "\n";
            blacklistLines += "install intel_gtt /bin/false";
            blacklistLines += "\n";
            blacklistLines += "install gma500_gfx /bin/false"; //added for V2 image
            blacklistLines += "\n";
            blacklistLines += "install radeon /bin/false"; //added for V2 image

            blacklistLines += "\n";
            blacklistLines += "install i915_bdw /bin/false";

            blacklistLines += "\n";
            blacklistLines += "install amdgpu /bin/false";    /// added by ritesh according to Mr. Pratik for LQ board on 13 Oct 2016.
        }
        else if(driverName == "via")
        {
            blacklistLines += "\n";
            blacklistLines += "install viafb /bin/false";

            if(qgetenv("OSPROJECT") == "McD")
            {
                blacklistLines += "\n";
                blacklistLines += "install via_agp /bin/false";
            }
        }
        else if(driverName == "pvr")
            system("touch /tmp/.pvr");
        else if(driverName == "nouveau")
        {
            blacklistLines += "\n";
            blacklistLines += "install via_chrome9 /bin/false";
            blacklistLines += "\n";
            blacklistLines += "install cedarview_gfx /bin/false";
            blacklistLines += "\n";
            blacklistLines += "install viafb /bin/false";
            if(qgetenv("OSPROJECT") == "McD")
            {
                blacklistLines += "\n";
                blacklistLines += "install via_agp /bin/false";
            }
            blacklistLines += "\n";
            blacklistLines += "install i915 /bin/false";

            blacklistLines += "\n";
            blacklistLines += "install intel_gtt /bin/false";
            blacklistLines += "\n";
            blacklistLines += "install gma500_gfx /bin/false"; //added for V2 image
            blacklistLines += "\n";
            blacklistLines += "install radeon /bin/false"; //added for V2 image

            blacklistLines += "\n";
            blacklistLines += "install i915_bdw /bin/false";

            blacklistLines += "\n";
            blacklistLines += "install amdgpu /bin/false";    /// added by ritesh according to Mr. Pratik for LQ board on 13 Oct 2016.

            blacklistLines += "\n";
            blacklistLines += "install fb_sys_fops /bin/false";    /// added by manish according to Mr. Pokhriyal for CD laptop on 20 May 2017.
        }


        if(driverName != "nouveau")
        {
            blacklistLines += "\n";
            blacklistLines += "install nouveau /bin/false";
        }

        blacklistLines += "\n";                           /// blacklist for openchrome driver on via board on #22Feb2017 #byRitesh according to Mr.Pratik Najare
        blacklistLines += "install viafb /bin/false";     /// added by ritesh according to Mr. Pratik for viafb board on #22Feb2017.


        QFile modulefile(MODULEBLACKLIST_FILE);

        if (!modulefile.open(QIODevice::WriteOnly | QIODevice::Text))
            return;

        QTextStream outstream(&modulefile);
        for (int i = 0; i < blacklistLines.size(); ++i)
            outstream << blacklistLines.at(i);
        modulefile.close();
        sync();
        dbgout << "Xorg File modified.";

        debugFile.close();
        sync();*/
    }
    qDebug() << "LCore:changeDisplayDriver::3:: End.";
    //======================================================
}

void LCore::setWidgetGeometry(QWidget* w, QApplication *a)
{
    QDesktopWidget *dw = a->desktop();
    QRect rect = dw->screenGeometry(dw->screenNumber(QCursor::pos()));
    w->setGeometry(rect.x()+((rect.width()-w->width())/2), rect.y()+((rect.height()-w->height())/2), w->width(), w->height());
}

bool LCore::removeDir(const QString & dirName)
{
    qDebug() << "LCore:removeDir::3:: Start.";
    bool result=true;
    QDir dir(dirName);

    if (dir.exists(dirName)) {
        foreach(const QFileInfo& info, dir.entryInfoList(QDir::NoDotAndDotDot | QDir::System | QDir::Hidden  | QDir::AllDirs | QDir::Files, QDir::DirsFirst)) {
            if (info.isDir()) {
                result = removeDir(info.absoluteFilePath());
            }
            else {
                result = QFile::remove(info.absoluteFilePath());
            }

            if (!result) {
                return result;
            }
        }
        result = dir.rmdir(dirName);
    }
    qDebug() << "LCore:removeDir::3:: return result = " << result;
    return result;
}

// cppcheck-suppress unusedFunction
void LCore::reparentWidget(QString parentWinID, QWidget* childWidget, int xpos, int ypos)
{
    WId wid = (WId) parentWinID.toLongLong();
    XReparentWindow(QX11Info::display(), childWidget->winId(), wid, xpos, ypos);
}

// cppcheck-suppress unusedFunction
QPoint LCore::adjustedMenuPosition(QWidget* popupWidget, QMenu* menu)
{
    QWidgetItem item(popupWidget);
    QRect rect = item.geometry();
    rect.setRect(rect.x() - popupWidget->x(), rect.y() - popupWidget->y(), rect.width(), rect.height());

    QSize menuSize = menu->sizeHint();
    QPoint globalPos = popupWidget->mapToGlobal(rect.topLeft());
    int x = globalPos.x();
    int y = globalPos.y();
    if (globalPos.y() + rect.height() + menuSize.height() <= QApplication::desktop()->availableGeometry(popupWidget).height())
        y += rect.height();
    else
        y -= menuSize.height();
    if (popupWidget->layoutDirection() == Qt::RightToLeft)
        x += rect.width() - menuSize.width();
    return QPoint(x,y);
}

// cppcheck-suppress unusedFunction
void LCore::showBalloonMessage(QWidget* balloonWidget, const QString& title, const QString& message, QSystemTrayIcon::MessageIcon messageIcon, int interval)
{
    QPoint g = balloonWidget->mapToGlobal(QPoint(0, 0));
    QBalloonTip::showBalloon(messageIcon, title, message, balloonWidget, QPoint(g.x() + balloonWidget->width()/2, g.y() + balloonWidget->height()/2), interval);
}

// cppcheck-suppress unusedFunction
void LCore::hideBalloonMessage()
{
    QBalloonTip::hideBalloon();
}

//executed for downloading settings/fonts from http/ftp/https/ftps server
// cppcheck-suppress unusedFunction
QString LCore::DownloadFile(const QString& protocol, const QString& path, const QString& ip, const QString& filename, const QString& username, const QString& password)
{
    qDebug() << "LCore:DownloadFile::3:: Start.";
    qDebug() << "LCore:DownloadFile::3:: args : protocol = " << protocol << " path = " << path << " ip = " << ip << " filename = " << filename
             << " username = " << username ;

    QString strReturn;
    LCore libLcore;
    bool bisCheckCertificate = false;

    QStringList  strlistCheckCertificate = libLcore.readDefaultsValue("CheckCertificate");
    if(strlistCheckCertificate.count() && strlistCheckCertificate.at(0).toInt())
        bisCheckCertificate = true;


    QString strCredentials;

    if(!username.isEmpty() && !password.isEmpty())
    {
        strCredentials = QString(username + ":" +password).toLatin1();
    }

    if(protocol == QString("FTP") || protocol == QString("FTPS"))
    {
        QStringList strcmdArgument;

        if(protocol.simplified().toLower() == "ftp")
        {
            if(strCredentials.isEmpty())
                strcmdArgument << "-Ss" << "-o" << path << protocol.toLower()+"://"+ip+"/"+filename << "--connect-timeout" << "13";
            else
                strcmdArgument << "-Ss" << "-o" << path << "-u" << strCredentials << protocol.toLower()+"://"+ip+"/"+filename<< "--connect-timeout" << "13";
        }
        else
        {
            if(bisCheckCertificate)
            {
                QString strIP =libLcore.getFTPS_HTTPSSHostnamefromIP(ip);
                qDebug()<<"CertificateInstall:Existcode for ftp:-"<< QProcess::execute("/usr/os-bin/CertificateManager CertificateInstall "+protocol.toLower()+"://"+strIP);

                if(strCredentials.isEmpty())
                    strcmdArgument << "-Ss" << "-o" << path << protocol.toLower()+"://"+strIP+"/"+filename<< "--connect-timeout" << "13";
                else
                    strcmdArgument << "-Ss" << "-o" << path << "-u" << strCredentials << protocol.toLower()+"://"+strIP+"/"+filename<< "--connect-timeout" << "13";
            }
            else
            {
                if(strCredentials.isEmpty())
                    strcmdArgument << "-Ss" << "-o" << path << protocol.toLower()+"://"+ip+"/"+filename<< "-k" << "--connect-timeout" <<"13";
                else
                    strcmdArgument << "-Ss" << "-o" << path << "-u" << strCredentials << protocol.toLower()+"://"+ip+"/"+filename<< "-k" << "--connect-timeout" << "13";
            }
        }

        QProcess process;
        process.start("curl",strcmdArgument);
        process.waitForFinished(-1);
        QString strOutput = QString(process.readAllStandardOutput());
        QString strError = QString(process.readAllStandardError());

        qDebug() << "LCore:DownloadFile::3:: ftp and ftps curl o/p =" << strOutput;
        qDebug() << "LCore:DownloadFile::3:: ftp and ftps curl error =" << strError;

        QString strAll;
        if(strOutput.isEmpty() || strOutput == "'000'")
            strAll = strError;
        else
            strAll = strOutput;

        if(process.exitCode() == 0)
        {
            strReturn = "";
        }
        else if(process.exitCode() == 67)
        {
            strReturn = tr("Access denied due to wrong credentials.");
        }
        else if(process.exitCode() == 78 ||  process.exitCode() == 9)
        {
            strReturn = tr("File not found");
        }
        else if(process.exitCode() == 7 || process.exitCode() == 6)
        {
            strReturn = tr("Failed to connect ");
        }
        else if(process.exitCode() == 60)
        {
            strReturn = tr("SSL certificate problem: certificate has expired");
        }
        else
        {
            strReturn = strAll;
        }
    }
    else if(protocol.toUpper() == QString("HTTPS") || protocol.toUpper() == QString("HTTP"))
    {
        QStringList strListCmdArgument;
        if(protocol.toUpper() == QString("HTTPS"))
        {
            if(bisCheckCertificate)
            {
                QString strIP =libLcore.getFTPS_HTTPSSHostnamefromIP(ip);
                qDebug()<<"CertificateInstall:Existcode for HTTPS:-"<< QProcess::execute("/usr/os-bin/CertificateManager CertificateInstall "+protocol.toLower()+"://"+strIP);

                if(strCredentials.isEmpty())
                    strListCmdArgument << "-Ss" << "-o" << path << "https://"+strIP+"/"+filename<< "-w" << "'%{http_code}'" << "--connect-timeout" << "13";
                else
                    strListCmdArgument << "-Ss" << "-o" << path << "-u" << strCredentials <<"https://"+strIP+"/"+filename << "-w" << "'%{http_code}'" << "--connect-timeout" << "13";
            }
            else
            {
                if(strCredentials.isEmpty())
                    strListCmdArgument << "-Ss" << "-o" << path << "https://"+ip+"/"+filename << "-w" << "'%{http_code}'" << "-k" << "--connect-timeout" << "13";
                else
                    strListCmdArgument << "-Ss" << "-o" << path << "-u" << strCredentials << "https://"+ip+"/"+filename << "-w" << "'%{http_code}'" << "-k" << "--connect-timeout" << "13";
            }
        }
        else
        {
            if(strCredentials.isEmpty())
                strListCmdArgument << "-Ss" << "-o" << path << "http://"+ip+"/"+filename << "-w" << "'%{http_code}'" << "--connect-timeout" << "13";
            else
                strListCmdArgument << "-Ss" << "-o" << path << "-u" << strCredentials << "http://"+ip+"/"+filename << "-w" << "'%{http_code}'" << "--connect-timeout" << "13";
        }


        QProcess process;
        process.start("curl",strListCmdArgument);
        process.waitForFinished(-1);
        QString strOutput = QString(process.readAllStandardOutput());
        QString strError =  QString(process.readAllStandardError());
        qDebug() << "LCore:DownloadFile::3:: HTTPS & HTTP Curl O/P = " << strOutput;
        qDebug() << "LCore:DownloadFile::3:: HTTPS & HTTP Curl error = " << strError;
        QStringList strlist = strOutput.split("\n");
        QString strAll;
        if(strOutput.isEmpty() || strOutput == "'000'")
            strAll = strError;
        else
            strAll = strOutput;

        if(process.exitCode() == 0 && strlist.contains("'200'"))
        {
            strReturn = "";
        }
        else if(process.exitCode() == 0 && strlist.contains("'401'"))
        {
            strReturn = tr("Access denied due to wrong credentials.");
        }
        else if(process.exitCode() == 0 && strlist.contains("'404'"))
        {
            strReturn = "File not found.";
        }
        else if(process.exitCode() == 7 || process.exitCode() == 28)
        {
            strReturn = "Failed to connect "+ip+" \n(No route to host)";
        }
        else if(process.exitCode() == 60)
        {
            strReturn = tr("SSL certificate problem: certificate has expired");
        }
        else
        {
            strReturn = strAll;
        }
    }
    qDebug() << "LCore:DownloadFile::3:: End  \n returns : " << strReturn;

    return strReturn;
}

//executed for uploading settings to https/ftps server
// cppcheck-suppress unusedFunction
QString LCore::UploadFile(const QString& ip, const QString& filename, const QString& username, const QString& password, const QString& protocol, const QString& strDomain)
{
    qDebug() << "LCore:UploadFile::3:: Start. ";
    qDebug() << "LCore:UploadFile::3:: args : ip = " << ip << " filename = " << filename << " username = " << username
              << " protocol = " << protocol;

    LCore libLcore;
    bool bisCheckCertificate = false;
    QStringList  strlistCheckFTPS = libLcore.readDefaultsValue("CheckCertificate");
    if(strlistCheckFTPS.count() && strlistCheckFTPS.at(0).toInt())
        bisCheckCertificate = true;

    QString strCredentials;

    if(!username.isEmpty() && !password.isEmpty())
    {
        strCredentials = QString(username + ":" +password).toLatin1();
    }

    if(protocol.toLower() == "ftp" || protocol.toLower() == "ftps")
    {
        QStringList strcmdArgument;

        QString strTmpPath = QString("/tmp/")+filename.section("/",-1,-1);

        if(protocol.simplified().toLower() == "ftp")
        {
            if(strCredentials.isEmpty())
                strcmdArgument << "-Ss" << "-T" << strTmpPath << "ftp://"+ip+"/"+filename+"";
            else
                strcmdArgument << "-Ss" << "-T" << strTmpPath << "-u" << strCredentials << "ftp://"+ip+"/"+filename+"";
        }
        else
        {
            if(bisCheckCertificate)
            {
                QString strIP = libLcore.getFTPS_HTTPSSHostnamefromIP(ip);
                qDebug()<<"CertificateInstall:Existcode:-"<< QProcess::execute("/usr/os-bin/CertificateManager CertificateInstall "+protocol.toLower()+"://"+strIP);
                if(strCredentials.isEmpty())
                    strcmdArgument << "-Ss" << "-T" << strTmpPath << "ftps://"+strIP+"/"+filename;
                else
                    strcmdArgument << "-Ss" << "-T" << strTmpPath << "-u" << strCredentials << "ftps://"+strIP+"/"+filename;
            }
            else
            {
                if(strCredentials.isEmpty())
                    strcmdArgument << "-Ss" << "-T" << strTmpPath << "ftps://"+ip+"/"+filename << "-k";
                else
                    strcmdArgument << "-Ss" << "-T" << strTmpPath << "-u" << strCredentials << "ftps://"+ip+"/"+filename << "-k";
            }
        }

        QProcess process;
        process.start("curl",strcmdArgument);
        process.waitForFinished(-1);

        QString strReturn;
        if(process.exitCode() == 0)
            return  strReturn;
        else
        {
            strReturn = process.readAllStandardError();
            qDebug() << " LCore:UploadFile::3:: error :" << strReturn;
            return strReturn;
        }


    }
    else if(protocol.toLower() == "https" || protocol.toLower() == QString("http"))
    {

        QString strTmpPath = QString("/tmp/")+filename.section("/",-1,-1);
        QStringList strcurl;
        if(protocol.toLower() =="https")
        {
            if(bisCheckCertificate)
            {
                QString strIP = libLcore.getFTPS_HTTPSSHostnamefromIP(ip) ;
                qDebug()<<"CertificateInstall:Existcode:-"<< QProcess::execute("/usr/os-bin/CertificateManager CertificateInstall "+protocol.toLower()+"://"+strIP);

                if(strCredentials.isEmpty())
                    strcurl << "-Ss" << "-T" << QString(strTmpPath).toLatin1() << "https://"+QString(strIP+"/"+filename).toLatin1() << "-w '%{http_code}' ";
                else
                    strcurl << "-Ss"<<"-T"<<QString(strTmpPath).toLatin1()<< "-u" << strCredentials <<"https://"+QString(strIP+"/"+filename).toLatin1()<< "-w '%{http_code}' ";
            }
            else
            {
                if(strCredentials.isEmpty())
                    strcurl << "-Ss" << "-T" << QString(strTmpPath).toLatin1() << "https://"+QString(ip+"/"+filename).toLatin1() << "-w '%{http_code}' " << "-k";
                else
                    strcurl << "-Ss"<<"-T"<<QString(strTmpPath).toLatin1() << "-u" << strCredentials <<"https://"+QString(ip+"/"+filename).toLatin1()<< "-w '%{http_code}' "<<"-k";
            }
        }
        else
        {
            if(strCredentials.isEmpty())
                strcurl << "-Ss" << "-T" << QString(strTmpPath).toLatin1() << "http://"+QString(ip+"/"+filename).toLatin1() << "-w '%{http_code}'";
            else
                strcurl << "-Ss" << "-T" << QString(strTmpPath).toLatin1() << "-u" << strCredentials << "http://"+QString(ip+"/"+filename).toLatin1() << "-w '%{http_code}'";
        }

        QProcess process;
        process.start("curl",strcurl);
        process.waitForFinished(-1);
        QByteArray bytes1 = process.readAllStandardOutput();
        QString strProcOP1 = QString(bytes1);
        qDebug() << "LCore:UploadFile::3:: strProcOP1 = "<<strProcOP1;
        QByteArray bytes = process.readAllStandardError();
        QString strProcOP = QString(bytes);
        qDebug() << "LCore:UploadFile::3:: strProcOP = "<<strProcOP;
        qDebug() << "LCore:UploadFile::3:: Exit code = "<<process.exitCode();

        QString strReturn;
        if(strProcOP1.isEmpty() && strProcOP.isEmpty())
        {
            qDebug() << "LCore:UploadFile::3:: return = " << strReturn;
            return  strReturn;
        }
        else if(strProcOP1.contains("401",Qt::CaseSensitive))
        {
            strReturn = tr("Access is denied due to wrong credentials");
            qDebug() << "LCore:UploadFile::3:: return = " << strReturn;
            return strReturn;
        }
        else if(strProcOP1.contains("404",Qt::CaseSensitive))
        {
            strReturn = "File or Directory not found";
            qDebug() << "LCore:UploadFile::3:: return = " << strReturn;
            return strReturn;
        }
        else if(strProcOP1.contains("405",Qt::CaseSensitive))
        {
            strReturn = "Permission denied.";
            qDebug() << "LCore:UploadFile::3:: return = " << strReturn;
            return strReturn;
        }
        else
        {
            qDebug() << "LCore:UploadFile::3:: return = " << strProcOP;
            return strProcOP; ///changes done as strProcOP1 was returing 204 eror and thus while exporting error msg was displayed.-varsha
        }

    }
    qDebug() << "LCore:UploadFile::3:: End. ";
}

//for corrupting settings/snapshot(damage)
// cppcheck-suppress unusedFunction
bool LCore::processFile(FileProcess process, QString fileName, int mode)
{
    qDebug() << "LCore:processFile::3:: Start. ";
    qDebug() << "LCore:processFile::3:: args : process = " << process << " filename = " << fileName << " mode = " << mode;

    bool success = false;

    char startBuffer[BYTES_TO_SWAP];
    char endBuffer[BYTES_TO_SWAP];

    struct fstats stats;

    memset(startBuffer, 0, sizeof(startBuffer));
    memset(endBuffer, 0, sizeof(endBuffer));

    if(process == Damage)
    {
        stats.mode = mode;
        QFile file(fileName);
        if(file.open(QIODevice::ReadWrite))
        {
            int fileSize = file.size();
            file.read(startBuffer, sizeof(startBuffer));
            file.seek(fileSize-BYTES_TO_SWAP);
            file.read(endBuffer, sizeof(endBuffer));
            file.seek(fileSize-BYTES_TO_SWAP);
            file.write(startBuffer, sizeof(startBuffer));
            file.seek(0);
            file.write(endBuffer, sizeof(endBuffer));
            file.seek(fileSize);
            file.write(reinterpret_cast<char*>(&stats), sizeof(stats));
            file.close();
            sync();

            success = true;
        }
    }
    else if(process == Repair)
    {
        QFile file(fileName);
        if(file.open(QIODevice::ReadWrite))
        {
            int fileSize = file.size();
            file.seek(fileSize-sizeof(stats));
            file.read(reinterpret_cast<char*>(&stats), sizeof(struct fstats));
            file.seek(fileSize-sizeof(stats));
            file.resize(fileSize-sizeof(stats));
            fileSize = file.size();
            file.seek(0);
            file.read(startBuffer, sizeof(startBuffer));
            file.seek(fileSize-BYTES_TO_SWAP);
            file.read(endBuffer, sizeof(endBuffer));
            file.seek(fileSize-BYTES_TO_SWAP);
            file.write(startBuffer, sizeof(startBuffer));
            file.seek(0);
            file.write(endBuffer, sizeof(endBuffer));
            file.close();
            sync();

            success = true;
        }
    }
    else
    {
        stats.mode = 0;
        QFile file(fileName);
        if(file.open(QIODevice::ReadOnly))
        {
            qDebug() << "LCore:processFile::3:: FILE READ LOOP " ;
            file.seek(file.size()-sizeof(stats));
            file.read(reinterpret_cast<char*>(&stats), sizeof(struct fstats));
            file.close();
        }

        qDebug() << "LCore:processFile::3::  mode = " << mode << " stats.mode  = " << stats.mode;

        if(stats.mode == 3)
            success = true;
        else if(stats.mode == mode)
            success = true;

    }
    qDebug() << "LCore:processFile::3::  return value of processfile fun = "<<success;
    return success;
}

void LCore::restoreFactorySettings(int opt)
{
    qDebug() << "LCore:restoreFactorySettings::3:: Start. ";
    QFile file(RESTORE_FACTORY);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
        return;

    QTextStream out(&file);
    out << opt << "\n";
    file.close();
    sync();

    LCore liblcore;

    QStringList strDefaultValues = liblcore.readDefaultsValue("BackupCertificatesAndKeys");
    if(!strDefaultValues.isEmpty() && strDefaultValues.at(0) == "1")
    {
        int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);
        qDebug() << "*** Status *** =" << status;

        if(status != 0)
            mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV , "");

        //        QProcess::execute(QString("tar") , QStringList() << "-cjf" << "/sda1/data/.Certificate-Backup.tar.bz2" << "/etc/ssl/" << "/opt/Citrix/ICAClient/keystore/" <<  "/usr/local/share/ca-certificates/" << "/usr/share/ca-certificates/");

        QStringList arguments;
        arguments << "-cjf" << "/sda1/data/.Certificate-Backup.tar.bz2";

        QProcess::execute("rm" , QStringList() << "-rf" << TEMPCERTPATH);
        QProcess::execute("mkdir" , QStringList() << TEMPCERTPATH);

        QDir dir;
        dir.mkpath(TEMPCERTPATH);
        dir.setPath(CERTIFICATE_DIR);
        dir.setFilter(QDir::Files | QDir::Hidden);
        if(dir.exists())
        {
            QFileInfoList list = dir.entryInfoList();
            for (int i = 0; i < list.size(); ++i)
            {
                QFileInfo fileInfo = list.at(i);
                QString path = QString(TEMPCERTPATH)+fileInfo.fileName();
                if(QFile::copy(fileInfo.filePath(), path))
                    arguments << path;
                sync();
            }
        }

        QDir keydir;
        keydir.setPath(KEY_DIR);
        keydir.setFilter(QDir::Files | QDir::Hidden);
        if(keydir.exists())
        {
            QFileInfoList list = keydir.entryInfoList();
            for (int i = 0; i < list.size(); ++i)
            {
                QFileInfo fileInfo = list.at(i);
                QString path = QString(TEMPCERTPATH)+fileInfo.fileName();
                if(QFile::copy(fileInfo.filePath(), path))
                    arguments << path;
                sync();
            }
        }

        QProcess::execute(QString("tar") ,  arguments);
        sync();

        if(status != 0)
            mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
    }

    liblcore.readAndAddWiFiDetails("2");
    liblcore.readAndAddHostnameDetails("2");
    liblcore.backupDomain(QString("DELETE"));

    QStringList strDefaultValue = liblcore.readDefaultsValue("EnableNetworkBackUp");
    if((!strDefaultValue.isEmpty() && strDefaultValue.at(0) == "1") || liblcore.readGrubFile("zero") || QFile::exists("/tmp/.takeNetworkBackup"))
    {
        liblcore.readAndAddWiFiDetails("1");
    }

    strDefaultValue.clear();
    strDefaultValue = liblcore.readDefaultsValue("EnableHostnameBackUp");
    if((!strDefaultValue.isEmpty() && strDefaultValue.at(0) == "1") || QFile::exists("/tmp/.takeHostnameBackup"))
    {
        liblcore.readAndAddHostnameDetails("1");
    }

    strDefaultValue.clear();
    strDefaultValue = liblcore.readDefaultsValue("EnableFirmwareBackUp");
    if((!strDefaultValue.isEmpty() && strDefaultValue.at(0) == "1"))
    {
        liblcore.readOrAddFirmwareDetails(QStringList() << QString(tr("Restored to Factory Defaults at : ")).append(QDateTime::currentDateTime().toString()));
    }

    strDefaultValue.clear();
    strDefaultValue = liblcore.readDefaultsValue("EnableDomainBackUp");
    if((!strDefaultValue.isEmpty() && strDefaultValue.at(0) == "1") || QFile::exists("/tmp/.takeDomainBackup"))
    {
        liblcore.backupDomain(QString("READ"));
    }

    ::sleep(1);
    sync();
    qDebug() << "LCore:restoreFactorySettings::3:: End. ";
}

QString LCore::generateNativeKey(const QString& key, const QString& prefix)
{
    qDebug() << "LCore:generateNativeKey::3:: Start. ";
    if (key.isEmpty())
        return QString();

    QString result = prefix;

    QString part1 = key;
    part1.replace(QRegExp(QLatin1String("[^A-Za-z]")), QString());
    result.append(part1);

    QByteArray hex = QCryptographicHash::hash(key.toUtf8(), QCryptographicHash::Sha1).toHex();
    result.append(QLatin1String(hex));

    return QDir::tempPath() + QLatin1Char('/') + result;
}

void LCore::ModifyXorgForArm()
{
    qDebug() << "LCore:ModifyXorgForArm::3:: Start. ";

    QStringList data = readTable(QString("DisplaySettings"), "");

    QString colorDepth, resolution;
    if(!data.isEmpty())
    {
        colorDepth = data.at(1);
        resolution = data.at(2);
    }
    else
    {
        colorDepth = "16";
    }
    QStringList lines;
    QFile file(XORG_FILE_ARM);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    QTextStream in(&file);
    while (!in.atEnd()) {
        QString line = in.readLine();

        if(line.contains("DefaultDepth"))
        {
            line = "\tDefaultDepth\t" + colorDepth;
            lines += line;
            line ="";
        }
        else if(line.contains("SubSection \"Display\""))
        {
            lines += line;
            line = "\t\tDepth\t" + colorDepth;
            lines += line;
            line = "";
        }
        else if(line.contains("PreferredMode"))
        {
            if(resolution.length())
            {
                line = "\tOption\t\"PreferredMode\"\t\"" + resolution + "\"";
                lines += line;
                line = "";
            }
        }
        else if(line.contains("Modes") || line.contains("Depth"))
            line = "";

        if(line.length())
            lines += line;
    }
    file.close();

    QFile outfile(XORG_FILE_ARM);
    if (!outfile.open(QIODevice::WriteOnly | QIODevice::Text))
        return;

    QTextStream out(&outfile);
    for (int i = 0; i < lines.size(); ++i)
        out << lines.at(i) << "\n";
    outfile.close();
    sync();

    qDebug() << "LCore:ModifyXorgForArm::3:: End. ";
}

// cppcheck-suppress unusedFunction
QStringList LCore::GetDriverList()
{
    qDebug() << "LCore:GetDriverList::3:: Start. ";

    QStringList driverList;
    if(!isTableExists("PrinterSettings"))
        return driverList;

    QSqlQuery query;
    QString qry = "SELECT WinDriverName FROM PrinterSettings";
    qDebug() << "LCore:GetDriverList::3:: qry = " << qry;
    if(!query.exec(qry))
        qDebug() << "LCore:GetDriverList::3:: Table Not Exists";
    else
    {
        QSqlRecord rec = query.record();
        while (query.next())
        {
            for(int i=0 ; i < rec.count(); i++)
            {
                qDebug() << "LCore:GetDriverList::3:: record = " << query.value(i).toString();
                driverList << query.value(i).toString();
            }
        }
    }
    qDebug() << "LCore:GetDriverList::3:: return driverList = " << driverList;
    return driverList;
}


void LCore::writeXORGForARM()
{
    qDebug() << "LCore:writeXORGForARM::3:: Start. ";

    QStringList data = readTable(QString("DisplaySettings"), "");

    QString colorDepth, resolution, screenPosition, displayMode, dualDisplayEnable, strRotation, strSecondRotation;
    if(!data.isEmpty())
    {
        dualDisplayEnable = data.at(5);
        displayMode = data.at(6);
        screenPosition = data.at(7);
        colorDepth = data.at(1);
        resolution = data.at(2);
        strRotation = data.at(3);
        strSecondRotation = data.at(10);
    }
    else
    {
        colorDepth = "24";
        resolution = "1024x768";
        strRotation = strSecondRotation = "Normal";
    }
    QStringList lines;
    QFile file(XORGCONF_FILE_ARM);
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        int nflag = 0, ncount = 0, ncloneMode = 0;
        while (!in.atEnd())
        {
            QString line = in.readLine();

            if(line.contains("DVI-I"))
            {
                if(strRotation == "Inverted")
                    strRotation = "inverted";
                else if(strRotation == "Clockwise")
                    strRotation = "right";
                else if(strRotation == "Anti-clockwise")
                    strRotation = "left";
                else
                    strRotation = "normal";
            }

            if(line.contains("DVI-D"))
            {
                if(displayMode == "extended")
                {
                    if(strSecondRotation == "Inverted")
                        strSecondRotation = "inverted";
                    else if(strSecondRotation == "Clockwise")
                        strSecondRotation = "right";
                    else if(strSecondRotation == "Anti-clockwise")
                        strSecondRotation = "left";
                    else
                        strSecondRotation = "normal";
                }
                else if(displayMode == "clone")
                    strSecondRotation = strRotation;
                strRotation.clear();
            }

            if(line.contains("Rotate"))
            {
                if(strRotation.length())
                    line = "\tOption\t\"Rotate\"\t\t\""+strRotation+"\"";
                else
                    line = "\tOption\t\"Rotate\"\t\t\""+strSecondRotation+"\"";
            }

            if(line.contains("PreferredMode"))
            {
                if(!nflag)
                    line = "\tOption\t\"PreferredMode\"\t\t\""+resolution+"\"";
                else
                    nflag = 0;
                ncount++;
            }
            if(line.contains("ModeLine"))
            {
                if(dualDisplayEnable == "1" && displayMode == "extended")
                    resolution = data.at(9);
                nflag = 1;
            }

            qDebug() << "LCore:writeXORGForARM::3:: line " << line;

            if(line.contains("RightOf") || line.contains("LeftOf") || line.contains("Above") || line.contains("Below"))
                ncloneMode = 1;

            if(displayMode == "extended" && ncount >= 3)
            {
                lines += line;
                line = "\tOption\t\t\"";
                if(screenPosition == "above")
                    line.append("Above");
                else if(screenPosition == "below")
                    line.append("Below");
                else if(screenPosition == "left")
                    line.append("LeftOf");
                else
                    line.append("RightOf");
                line.append("\"\t\"DVI-I\"");
            }
            if(ncount >= 3)
                ncount = 0;

            if(line.contains("DefaultDepth"))
                line = "\tDefaultDepth\t" + colorDepth;
            else if(line.contains("Depth"))
                line = "\t\tDepth\t" + colorDepth;

            if(line.length() && !ncloneMode)
                lines += line;
            else
                ncloneMode = 0;
        }
        file.close();
    }

    QFile outfile(XORGCONF_FILE_ARM);
    if (!outfile.open(QIODevice::WriteOnly | QIODevice::Text))
        return;

    QTextStream out(&outfile);
    for (int i = 0; i < lines.size(); ++i)
        out << lines.at(i) << "\n";
    outfile.close();
    sync();

    qDebug() << "LCore:writeXORGForARM::3:: End. ";
}

QString LCore::getOpenFileName(const QStringList& NameFilters)
{
    qDebug() << "LCore:getOpenFileName::3:: Execute. ";
    return CustomFileDialog::getOpenFileName(NameFilters);
}

QStringList LCore::getOpenFileNames(const QStringList& NameFilters)
{
    qDebug() << "LCore:getOpenFileNames::3:: Execute. ";
    return CustomFileDialog::getOpenFileNames(NameFilters);
}

QString LCore::getOpenDirectory()
{
    qDebug() << "LCore:getOpenDirectory::3:: Execute. ";
    return CustomFileDialog::getOpenDirectory();
}

QString LCore::getSaveFileName(const QStringList& Filters, const QString& FilePath)
{
    qDebug() << "LCore:getSaveFileName::3:: Execute. ";
    return CustomFileDialog::getSaveFileName(Filters, FilePath);
}

void LCore::SendSignalToTC(const QString& strCondition, const QString& ConnectionName, const QString& ConnectionType)
{
    qDebug() << "LCore:SendSignalToTC::3:: Start. ";
    qDebug() << "\nLCore:SendSignalToTC::3:: Arguments. "<<strCondition<<ConnectionName<<ConnectionType;
    QLocalSocket *clientSocket = new QLocalSocket;
    clientSocket->connectToServer(TCCENTERSTATUSFile);
    if(clientSocket->waitForConnected())
    {
        QByteArray block;
        block.clear();
        QDataStream out(&block, QIODevice::WriteOnly);
        out.setVersion(QDataStream::Qt_4_8);
        out << strCondition;
        out << ConnectionName;
        out << ConnectionType;
        out.device()->seek(0);
        clientSocket->write(block);
        clientSocket->waitForBytesWritten(60000);
        clientSocket->flush();
    }
    else
    {
        qDebug() << "Client Server error :: " << clientSocket->errorString();
    }
    clientSocket->deleteLater();

    if(strCondition == QString("ChangeStatus"))
    {
        sendMessageToTCCenter(QString(DESKTOPAPPACTIVEFile), QString("Connection Active")); //need to sort this condition
    }

    qDebug() << "LCore:SendSignalToTC::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::UpdateConnectionTable(QString connectionType, QString connectionName, QString processid, int state)   // 1 for "Active", 0 for ""
{
    qDebug() << "LCore:UpdateConnectionTable::3:: Start. ";
    qDebug() << "LCore:UpdateConnectionTable::3:: args : connectionType = " << connectionType << " connectionName = " << connectionName
             << " processid = " << processid << " state = " << state;

    if(connectionName.contains(":"))
        return;

    QString status;

    if(state)
    {
        status = QString("Active%1").arg((state > 1)?QString("(" + QString::number(state) + ")"):QString(""));
    }
    else
    {
        status = "";
    }

    QStringList conValues;
    conValues << "Status='"+status+"'" << "PID='"+processid+"'";
    updateTable("ConnectionTable", conValues , "ConnectionType='"+connectionType+"' AND ConnectionName='"+connectionName+"'");
}

// cppcheck-suppress unusedFunction
QStringList LCore::ReadLoginDetails()   //0 username, 1 passsword, 2 domain
{
    qDebug() << "LCore:ReadLoginDetails::3:: Start. ";
    QStringList ssoDetails;
    QFile file( QString(LOGIN_FILE));
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        while (!in.atEnd())
        {
            ssoDetails << in.readLine().section("=", 1, -1).trimmed();
        }
        file.close();
    }
    qDebug() << "LCore:ReadLoginDetails::3:: ssoDetails = " << ssoDetails;
    return ssoDetails;
}

// cppcheck-suppress unusedFunction
void LCore::killpid(QString parent_pid)
{
    QProcess proc_pid;

    QString cmd = "ps h --ppid "+parent_pid;    //ps -o pid,ppid,command ax;
    proc_pid.start(cmd);
    proc_pid.waitForFinished(-1);

    QString data1 = QString(proc_pid.readAll());
    QStringList lines = data1.split("\n");
    for (int i = 0; i < lines.size()-1; ++i)
    {
        QString data = lines.at(i);
        QString child_pid = data.trimmed().section(" ", 0, 0);
        kill(child_pid.toInt(), SIGTERM);
    }
    kill(parent_pid.toInt(), SIGTERM);
}

// cppcheck-suppress unusedFunction
void LCore::ExecuteTouchScreenSettings(int opcode)
{
    qDebug() << "LCore:ExecuteTouchScreenSettings::3:: Start. ";

    if(getScreenCount() > 1)
    {
      QProcess::execute(ENABLETOUCHSCREEONDUALDISPLAY);
    }

    QStringList touchscreen_settings = readTable("TouchScreen", "");
    if(touchscreen_settings.count())
    {
        if(opcode == 0)
        {
            if(touchscreen_settings.at(0).toInt() && touchscreen_settings.at(1)=="eTouch ( HID Touch Panel )")
            {
                QProcess proc, proc1;
                proc.start("rmmod usbhid");
                proc.waitForFinished(-1);
                ::sleep(3);
                proc1.start("modprobe usbhid quirks=0x1ddb:0x0001:0x40");
                proc1.waitForFinished(-1);
                QString strCmd = QString("mv -f /usr/share/X11/xorg.conf.d/99-calibration.conf.test /usr/share/X11/xorg.conf.d/99-calibration.conf");
                QProcess::execute(strCmd);
            }
            else
            {

            }
            /// added ET1909L touch for arm
            if((touchscreen_settings.at(0).toInt()) && (touchscreen_settings.at(1)=="EloTouch-ET2201L" || touchscreen_settings.at(1)=="EloTouch-ET1909L"))
            {
                QProcess::execute("/usr/bin/elorc", QStringList() <<"stop");
                ::sleep(1); ///system command for sleep-varsha
                QProcess::execute("/usr/bin/elorc", QStringList() <<"start");
            }
            else
                QProcess::execute("/usr/bin/elorc", QStringList() <<"stop");


            QStringList strCoordinates;
            QFile file("/usr/share/X11/xorg.conf.d/99-calibration.conf");
            if (file.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QString strline;

                QTextStream in(&file);
                while (!in.atEnd())
                {
                    QString line = in.readLine();
                    if(line.contains("Calibration"))
                    {
                        strline= line.simplified().section(" ",2 ,line.count(" ")).remove("\"");
                        strCoordinates=strline.split(" ");
                        break;
                    }
                }
            }
            file.close();

            QString Global_ID;

            char line[100];
            memset(line, 0, sizeof(line));
            QString str = "xinput | grep -i \""+touchscreen_settings.at(1)+"\" | grep -i id";
            FILE *fp = popen(str.toLatin1(), "r");
            fgets(line, sizeof(line), fp);
            line[strlen(line)-1] = '\0';
            pclose(fp);
            QString idname;
            idname=line;
            Global_ID=idname.simplified().section("id=",1,1).section(" ",0,0);

            if(Global_ID.isEmpty())
            {
                QProcess proc;
                proc.start("xinput_calibrator", QStringList() << "--list");
                proc.waitForFinished(-1);
                while (!proc.atEnd())
                {
                    QString linen = proc.readLine();
                    if(linen.contains("id="))
                    {
                        Global_ID = linen.simplified().section("id=", 1, 1);
                    }
                }
            }

            QStringList listArguments;
            listArguments.clear();
            if(strCoordinates.count())
            {
                listArguments << "set-int-prop" <<Global_ID<<"Evdev Axis Calibration"<<"32"<<strCoordinates.at(0)<<strCoordinates.at(1)<<strCoordinates.at(2)<<strCoordinates.at(3);
                QProcess::execute("xinput",listArguments);
            }
            // This sync and sleep is needed for proper command execution.
            sync();
            //  sleep(1);
            ExecuteTouchScreenAfterDisplaySettings();
        }
    }
    else
    {
        QString strCmd = QString("mv -f /usr/share/X11/xorg.conf.d/99-calibration.conf /usr/share/X11/xorg.conf.d/99-calibration.conf.test");
        QProcess::execute(strCmd);
    }

    qDebug() << "LCore:ExecuteTouchScreenSettings::3:: End. ";
}

void LCore::updateSharedMemory()
{
    qDebug() << "LCore:updateSharedMemory::3:: Start. ";

    QString nativeKeyID = LCore::generateNativeKey(sharedMemory.key()).section('_', 2, 2);//sharedMemory.nativeKey().section('_', 2, 2);
    QString sharedfilename = QString("/tmp/qipc_sharedmemory_") + nativeKeyID;
    QString systemfilename = QString("/tmp/qipc_systemsem_") + nativeKeyID;
    QFile::remove(sharedfilename);
    QFile::remove(systemfilename);

    if(sharedMemory.isAttached())
        sharedMemory.detach();

    QBuffer buffer;
    QString table_name = QString("DesktopWidget");
    buffer.open(QBuffer::ReadWrite);
    QDataStream out(&buffer);
    out << table_name;
    int size = buffer.size();

    sharedMemory.lock();
    char *to = static_cast<char*>(sharedMemory.data());
    const char *from = buffer.data().data();
    memcpy(to, from, qMin(sharedMemory.size(), size));
    sharedMemory.unlock();

    QStringList list = readTable("ProcessInfo", "Process='Desktop'", "PID");
    if(list.count())
    {
        kill(list.first().toInt(), SIGUSR1);
        sync();
    }
    sync();

    qDebug() << "LCore:updateSharedMemory::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::startWPAService(const QString& strDevice)
{
    qDebug() << "LCore:configureWifiSettings::3:: Start. ";
    if(QFile::exists(QString(WIFICONFFILE)) == false)
    {
        QFile file(QString(WIFICONFFILE));
        if(file.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&file);
            out << "ap_scan=1\n";
            out << "ctrl_interface=/var/run/wpa_supplicant\n";
            file.close();
        }

        sync();
    }

    if(checkrunningProcService("wpa_supplicant") == false)
    {
        if(strDevice.isEmpty() == false)
        {
            QStringList strArguments;
            strArguments << QString("-B") << QString("-D") << QString("nl80211") << QString("-i") << strDevice << QString("-d") << QString("-c") << QString(WIFICONFFILE);

            QProcess::execute(QString(WPASUPPLICANTCMD), strArguments);
        }
    }
    qDebug() << "LCore:configureWifiSettings::3:: End. ";
}

QString LCore::getCurrentESSIDInfo(const QString& strDevice, const QString& strKey)
{
    qDebug() << "LCore:getCurrentESSIDInfo::3:: Start. "<< strDevice << strKey;
    QString strValue;

    QStringList strlistArguments;
    strlistArguments << QString("-i");
    strlistArguments << strDevice;
    strlistArguments << QString("status");

    QProcess *procWPACLI = new QProcess;
    procWPACLI->setProcessChannelMode(QProcess::MergedChannels);
    qDebug() << "LCore:getCurrentESSIDInfo::3:: strlistArguments: "<< strlistArguments;
    procWPACLI->start(QString("wpa_cli"), strlistArguments);
    procWPACLI->waitForFinished(-1);
    QStringList strlistOutput = QString(procWPACLI->readAll()).split('\n', QString::SkipEmptyParts);
    qDebug() << "LCore:getCurrentESSIDInfo::3:: strlistOutput: "<< strlistOutput;
    delete procWPACLI;

    QString strKeyNew = QString("%1=").arg(strKey);

    foreach(const QString& strLine, strlistOutput)
    {
        if(strLine.startsWith(strKeyNew) == true)
        {
            strValue = strLine.section('=', -1, -1);
            break;
        }
    }
    qDebug() << "LCore:getCurrentESSIDInfo::3:: End. ";
    return strValue;
}

// cppcheck-suppress unusedFunction
QString LCore::getCurrentESSID(const QString& strDevice)
{
    QString strCurrentESSID;

    strCurrentESSID = getCurrentESSIDInfo(strDevice, QString("ssid"));

    // return  getSpecialESSID(strCurrentESSID);
      return  strCurrentESSID;
}

// cppcheck-suppress unusedFunction
void LCore::removeESSIDDetails(const QString& strESSID, const QString& strDevice, bool bReconfigure, bool bDeleteEntryFromDatabase)
{
    qDebug() << "LCore:removeESSIDDetails::2:: Start. ";

    // Delete from database
    if(bDeleteEntryFromDatabase == true)
    {
        LCore liblcore;
        liblcore.deleteESSIDFromDatabase(strESSID);
    }

    // Delete from configuration file
    bool bESSIDFound = false;
    QStringList strlistLines;
    QMap<QString, QStringList> mapESSIDDetails;

    QFile rfile(WIFICONFFILE);
    if(rfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&rfile);
        bool bIsNetworkBlock = false;
        QString strStoredESSID;
        QStringList strlistESSIDDetails;
        while(!in.atEnd())
        {
            QString strLine = in.readLine();

            if(strLine.isEmpty())
            {
                continue;
            }

            if(strLine.startsWith("network={"))
            {
                bIsNetworkBlock = true;
                strlistESSIDDetails << strLine;
                continue;
            }
            else if(strLine.startsWith("}"))
            {
                bIsNetworkBlock = false;
                strlistESSIDDetails << strLine;

                mapESSIDDetails.insert(strStoredESSID, strlistESSIDDetails);

                strStoredESSID.clear();
                strlistESSIDDetails.clear();
                continue;
            }

            if(bIsNetworkBlock == false)
            {
                strlistLines << strLine;
            }
            else
            {
                if(strLine.contains("ssid="))
                {
                    // strLine = ssid="OPPO F11 " Pro"

                    strStoredESSID = strLine.section("\"", 1, -1); // OPPO F11 " Pro"
                    strStoredESSID.chop(1); // OPPO F11 " Pro
                }

                strlistESSIDDetails << strLine;
            }
        }

        rfile.close();
    }

    if(mapESSIDDetails.contains(strESSID) == true)
    {
        bESSIDFound = true;
        mapESSIDDetails.remove(strESSID);
    }

    QFile wfile(QString(WIFICONFFILE));
    if(wfile.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&wfile);

        foreach(const QString& strLine, strlistLines)
        {
            out << strLine << "\n";
        }

        out << "\n";

        QMapIterator<QString, QStringList> itr(mapESSIDDetails);
        while(itr.hasNext())
        {
            itr.next();
            QStringList strlistLinesn = itr.value();

            foreach(const QString& strLine, strlistLinesn)
            {
                out << strLine << "\n";
            }

            out << "\n";
        }

        wfile.close();
    }

    sync();

    if((bReconfigure == true && bESSIDFound == true) || (bESSIDFound == false && bDeleteEntryFromDatabase == false))
    {
        // Reconfigure wpa_supplicant
        QProcess::execute(QString("wpa_cli"), QStringList() << QString("-i") << strDevice << QString("reconfigure"));
    }
    qDebug() << "LCore:removeESSIDDetails::2:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::enableAllDisabledESSID(const QString& strDevice)
{
    qDebug() << "LCore:enableAllDisabledESSID::2:: Start. ";
    // Enabling all other disabled network here
    QStringList strlistArguments;
    strlistArguments << QString("-i");
    strlistArguments << strDevice;
    strlistArguments << QString("list_networks");

    QProcess *procWPACLI = new QProcess;
    procWPACLI->setProcessChannelMode(QProcess::MergedChannels);

    procWPACLI->start(QString("wpa_cli"), strlistArguments);
    procWPACLI->waitForFinished(-1);
    procWPACLI->readLine(); // Removing first line
    QStringList strlistOutput = QString(procWPACLI->readAll()).split('\n', QString::SkipEmptyParts);
    delete procWPACLI;

    foreach(const QString& strLine, strlistOutput)
    {
        if(strLine.contains("[DISABLED]") == true)
        {
            QString strNetworkId = strLine.section('\t', 0, 0);
            strlistArguments.clear();
            strlistArguments << QString("-i");
            strlistArguments << strDevice;
            strlistArguments << QString("enable_network");
            strlistArguments << strNetworkId;

            QProcess::execute(QString("wpa_cli"), strlistArguments);
        }
    }
    qDebug() << "LCore:enableAllDisabledESSID::2:: End. ";

}

// cppcheck-suppress unusedFunction
void LCore::writeESSIDInfoIntoDatabase(QMap<QString, QString> mapESSIDDetails)
{
    qDebug() << "LCore:writeESSIDInfoIntoDatabase::2:: Start. ";

    QString strESSID = mapESSIDDetails.value(QString("ESSID"));

    QString strEncPassword = encryptDecryptString(mapESSIDDetails.value(QString("Password")).toLocal8Bit().data(), 0);

    deleteESSIDFromDatabase(strESSID);

    QString coltypes = "ESSID VARCHAR(255), Security VARCHAR(50), Password VARCHAR(255), Interface VARCHAR(20), UserCreated INTEGER, Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(ESSID, Security)";
    QString colvalues = "'"+QString(strESSID.replace("'", "''"))+"', '"+mapESSIDDetails.value(QString("Security"))+"', '"+strEncPassword+"','"+mapESSIDDetails.value(QString("Device"))+"', '"+mapESSIDDetails.value(QString("UserCreated"))+"', '"+mapESSIDDetails.value(QString("AutoConnect"))+"','"+mapESSIDDetails.value(QString("Is802"))+"', 0, '"+mapESSIDDetails.value(QString("Frequency"))+"', ''";
    writeTable("WifiDetails", coltypes, colvalues, "AppendNew");

    sync();
    qDebug() << "LCore:writeESSIDInfoIntoDatabase::2:: End. ";
}

QStringList LCore::getWPAPassphrase(QString strSecurity, QString strESSID, QString strPassword)
{
    qDebug() << "LCore:getWPAPassphrase::2:: Start. ";
    QStringList strlistOutput;

    if(strSecurity.contains("WPA") == true)
    {
        QProcess procWPAPass;
        procWPAPass.start(QString(WPAPASSPHRASECMD), QStringList() << strESSID << strPassword);
        procWPAPass.waitForFinished(-1);
        int nExitCode = procWPAPass.exitCode();
        if(nExitCode == 0)
        {
            strlistOutput = QString(procWPAPass.readAllStandardOutput()).split('\n');
        }
    }
    else
    {
        strlistOutput << QString("network={");
        strlistOutput << QString("\tssid=\"%1\"").arg(strESSID);
        strlistOutput << QString("\tkey_mgmt=NONE");
        if(strPassword.isEmpty() == false)
        {
            int nPasswordLength = strPassword.length();
            if(nPasswordLength == 5 || nPasswordLength == 13)
            {
                strlistOutput << QString("\twep_key0=\"%1\"").arg(strPassword);
            }
            else if(nPasswordLength == 10 || nPasswordLength == 26)
            {
                strlistOutput << QString("\twep_key0=%1").arg(strPassword);
            }
        }
        strlistOutput << QString("}");
        strlistOutput << QString("");
    }
    qDebug() << "LCore:getWPAPassphrase::2:: End. ";
    return strlistOutput;
}

void LCore::deleteESSIDFromDatabase(QString strESSID)
{
    qDebug() << "LCore:deleteESSIDFromDatabase::2:: Start. ";

    QString strWhereClause = "ESSID='"+strESSID.replace("'", "''")+"'";

    QStringList list = readTable("WifiDetails", strWhereClause, "Password");

    if(list.count() > 0)
    {
        deleteEntry("WifiDetails", strWhereClause);
        sync();
    }
    qDebug() << "LCore:deleteESSIDFromDatabase::2:: End. ";
}

QStringList LCore::write802NetworkBlock(QString strNetworkType, QString strBgScan)
{
    qDebug() << "LCore:write802NetworkBlock::2:: Start. ";
    QStringList strlist802Block;
    QString strESSID, strSecurity, strFrequency;

    if(strNetworkType == QString("Wireless"))
    {
        QStringList strlistESSIDDetails = readTable(QString("WifiDetails"), "Extra2='1'" ,"*"); // Extra2 == 1 means it is for 802

        if(strlistESSIDDetails.isEmpty() == false)
        {
            strESSID = strlistESSIDDetails.at(0);
            strSecurity = strlistESSIDDetails.at(1);
            strFrequency = strlistESSIDDetails.at(8);
        }
    }

    QString strWhereClause = QString("NetworkType='%1'").arg(strNetworkType);

    QStringList strlist802Details = readTable(QString("Network8021x"), strWhereClause, QString("*"));

    if(strlist802Details.isEmpty() == false)
    {
        strlist802Block << QString("network={\n");
        if(strNetworkType == QString("Wireless"))
        {
            strlist802Block << QString("\tscan_ssid=1\n");
        }

        int nAuthenticationType = strlist802Details.at(0).toInt();
        QString strUsername = strlist802Details.at(1);
        QString strPassword = encryptDecryptString(strlist802Details.at(2), 1);
        QString strIdentity = strlist802Details.at(3);
        QString strUserCertificate = strlist802Details.at(4);
        QString strCACertificate = strlist802Details.at(5);
        QString strPrivateKey = strlist802Details.at(6);
        QString strInnerAuthentication = strlist802Details.at(7);
        //QString strPEAPVersion = strlist802Details.at(8);
        //QString strEnableSecurity = strlist802Details.at(10);
        QString strPrivateKeyPassowrd = encryptDecryptString(strlist802Details.at(12), 1);

        switch(nAuthenticationType)
        {
        case 0:
            if(strNetworkType == QString("Wireless"))
            {
                strlist802Block << QString("\tssid=\"%1\"\n").arg(strESSID);

                if(strSecurity.contains("WPA") == true)
                {
                    strlist802Block << QString("\tkey_mgmt=WPA-EAP\n");
                    strlist802Block << QString("\tpairwise=CCMP TKIP\n");
                    strlist802Block << QString("\tgroup=CCMP TKIP\n");
                }
                else if(strSecurity == "None" || strSecurity.contains("WEP") == true)
                {
                    strlist802Block << QString("\tkey_mgmt=IEEE8021X\n");
                }
            }
            else
            {
                strlist802Block << QString("\tkey_mgmt=IEEE8021X\n");
            }

            strlist802Block << QString("\teap=MD5\n");
            strlist802Block << QString("\tidentity=\"%1\"\n").arg(strUsername);
            strlist802Block << QString("\tpassword=\"%1\"\n").arg(strPassword);
            break;
        case 1:
            if(strNetworkType == QString("Wireless"))
            {
                strlist802Block << QString("\tssid=\"%1\"\n").arg(strESSID);
            }
            else
            {
                strlist802Block << QString("\teapol_flags=0\n");
            }

            strlist802Block << QString("\tkey_mgmt=IEEE8021X\n");
            strlist802Block << QString("\teap=TLS\n");
            strlist802Block << QString("\tidentity=\"%1\"\n").arg(strIdentity);

            if(strCACertificate.isEmpty() == false)
            {
                strlist802Block << QString("\tca_cert=\"%1\"\n").arg(strCACertificate);
            }

            if(strPrivateKey.endsWith(".key") == true)
            {
                strlist802Block << QString("\tclient_cert=\"%1\"\n").arg(strUserCertificate);
            }

            if(strPrivateKey.isEmpty() == false)
            {
                strlist802Block << QString("\tprivate_key=\"%1\"\n").arg(strPrivateKey);
            }
            break;
        case 2:
            if(strNetworkType == QString("Wireless"))
            {
                strlist802Block << QString("\tssid=\"%1\"\n").arg(strESSID);

                if(strSecurity.contains("WPA") == true)
                {
                    strlist802Block << QString("\tkey_mgmt=WPA-EAP\n");
                    strlist802Block << QString("\tpairwise=CCMP TKIP\n");
                    strlist802Block << QString("\tgroup=CCMP TKIP\n");
                }
                else if(strSecurity == "None" || strSecurity.contains("WEP") == true)
                {
                    strlist802Block << QString("\tkey_mgmt=IEEE8021X\n");
                }
            }
            else
            {
                strlist802Block << QString("\tkey_mgmt=IEEE8021X\n");
            }

            strlist802Block << QString("\teap=TTLS\n");
            strlist802Block << QString("\tanonymous_identity=\"%1\"\n").arg(strIdentity);
            strlist802Block << QString("\tca_cert=\"%1\"\n").arg(strCACertificate);
            strlist802Block << QString("\tphase2=\"%1\"\n").arg(strInnerAuthentication);
            strlist802Block << QString("\tidentity=\"%1\"\n").arg(strUsername);
            strlist802Block << QString("\tpassword=\"%1\"\n").arg(strPassword);
            break;
        case 3:
            if(strInnerAuthentication == QString("TLS"))
            {
                if(strNetworkType == QString("Wireless"))
                {
                    strlist802Block << QString("\tssid=\"%1\"\n").arg(strESSID);

                    if(strSecurity.contains("WPA") == true)
                    {
                        strlist802Block << QString("\tkey_mgmt=WPA-EAP\n");
                        strlist802Block << QString("\tpairwise=CCMP TKIP\n");
                        strlist802Block << QString("\tgroup=CCMP TKIP\n");
                    }
                    else if(strSecurity == "None" || strSecurity.contains("WEP") == true)
                    {
                        strlist802Block << QString("\tkey_mgmt=IEEE8021X\n");
                    }

                    strlist802Block << QString("\teap=TLS\n");
                    strlist802Block << QString("\teapol_flags=3\n");
                }
                else
                {
                    strlist802Block << QString("\tkey_mgmt=IEEE8021X\n");
                    strlist802Block << QString("\tpairwise=CCMP TKIP\n");
                    strlist802Block << QString("\tgroup=CCMP TKIP\n");
                    strlist802Block << QString("\teap=PEAP\n");
                    strlist802Block << QString("\tphase2=\"auth=TLS\"\n");
                    strlist802Block << QString("\teapol_flags=0\n");
                }

                strlist802Block << QString("\tidentity=\"%1\"\n").arg(strIdentity);

                if(strCACertificate.isEmpty() == false)
                {
                    strlist802Block << QString("\tca_cert=\"%1\"\n").arg(strCACertificate);
                }

                if(strPrivateKey.endsWith(".key") == true)
                {
                    strlist802Block << QString("\tclient_cert=\"%1\"\n").arg(strUserCertificate);
                }

                if(strPrivateKey.isEmpty() == false)
                {
                    strlist802Block << QString("\tprivate_key=\"%1\"\n").arg(strPrivateKey);
                }

                if(strPrivateKeyPassowrd.isEmpty() == false)
                {
                    strlist802Block << QString("\tprivate_key_passwd=\"%1\"\n").arg(strPrivateKeyPassowrd);
                }
                break;
            }
            else
            {
                if(strNetworkType == QString("Wireless"))
                {
                    strlist802Block << QString("\tssid=\"%1\"\n").arg(strESSID);

                    if(strSecurity.contains("WPA") == true)
                    {
                        strlist802Block << QString("\tkey_mgmt=WPA-EAP\n");
                        strlist802Block << QString("\tpairwise=CCMP TKIP\n");
                        strlist802Block << QString("\tgroup=CCMP TKIP\n");
                    }
                    else if(strSecurity == "None" || strSecurity.contains("WEP") == true)
                    {
                        strlist802Block << QString("\tkey_mgmt=IEEE8021X\n");
                    }

                    strlist802Block << QString("\teap=TLS\n");
                    strlist802Block << QString("\teapol_flags=3\n");
                }
                else
                {
                    strlist802Block << QString("\tkey_mgmt=IEEE8021X\n");
                }

                strlist802Block << QString("\teap=PEAP\n");
                strlist802Block << QString("\tidentity=\"%1\"\n").arg(strUsername);
                strlist802Block << QString("\tpassword=\"%1\"\n").arg(strPassword);
                if(strIdentity.isEmpty() == false)
                {
                    strlist802Block << QString("\tanonymous_identity=\"%1\"\n").arg(strIdentity);
                }
                if(strCACertificate.isEmpty() == false)
                {
                    strlist802Block << QString("\tclient_cert=\"%1\"\n").arg(strCACertificate);
                }

                strlist802Block << QString("\tphase1=\"PEAPVER=0\"\n");
                strlist802Block << QString("\tphase2=\"auth=%1\"\n").arg(strInnerAuthentication);
            }
            break;
        }

        if(strNetworkType == QString("Wireless") && strBgScan.isEmpty() == false)
        {
            strlist802Block << strBgScan.append('\n');
        }

        if(strNetworkType == QString("Wireless") && (strFrequency.isEmpty() == false && strFrequency != QString("Auto")))
        {
            strlist802Block << strFrequency.append('\n');
        }
        strlist802Block << QString("}\n");
    }
    qDebug() << "LCore:write802NetworkBlock::2:: End. ";
    return strlist802Block;
}

void LCore::writeWPAConfFile(const QString& strFirstESSID, bool bIs802)
{
    qDebug() << "LCore:writeWPAConfFile::2:: Start. ";
    QFile file(QString(WIFICONFFILE));
    if(file.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&file);

        /*
         * Done changes regarding wifi bgscan parameter , if in sysconf table WifiThresold values are present then
         * it will take values from that for bgscan otherwise it will take 1:-40:5.
         */

        QString strBgScan;
        int nShortInterval = 30;
        int nThresholdValue = -45;
        int nLongInterval = 300;

        QStringList strlistWifiDetails = readTable(QString("Sysconf") , "Property='WifiThreshold'" ,"Value");
        if(strlistWifiDetails.count())
        {
            QString strWifivalues = strlistWifiDetails.at(0);
            nShortInterval = strWifivalues.section(',',0,0).section(':',1,1).toInt();
            nThresholdValue = strWifivalues.section(',',1,1).section(':',1,1).toInt();
            nLongInterval = strWifivalues.section(',',2,2).section(':',1,1).toInt();
        }

        strBgScan = QString("\tbgscan=\"simple:%1:%2:%3\"").arg(QString::number(nShortInterval),QString::number(nThresholdValue),QString::number(nLongInterval));

        out << "ap_scan=1" << "\n";
        out << "ctrl_interface=/var/run/wpa_supplicant" << "\n\n";

        if(strFirstESSID.isEmpty() == false)
        {
            if(bIs802 == true)
            {
                QStringList strlistInfo = write802NetworkBlock(QString("Wireless"), strBgScan);
                for(int i = 0 ; i < strlistInfo.count(); i++)
                {
                    out << strlistInfo.at(i);
                }
                out << "\n";
            }
            else
            {

                QString strReplaceESSID = strFirstESSID;
                QString strWhereClause = "ESSID='"+strReplaceESSID.replace("'", "''")+"'";

                QStringList strlistFirstWifiDetails = readTable("WifiDetails", strWhereClause, "*");

                if(strlistFirstWifiDetails.isEmpty() == false)
                {
                    QString strSecurity = strlistFirstWifiDetails.at(1);
                    QString strItemPassword = encryptDecryptString(strlistFirstWifiDetails.at(2), 1);
                    QString strItemFrequency = strlistFirstWifiDetails.at(8);

                    QStringList strlistInfo = getWPAPassphrase(strSecurity, strFirstESSID, strItemPassword);
                    if(strlistInfo.count() > 0)
                    {
                        out << "network={" << "\n";
                        out << "\tscan_ssid=1" << "\n";
                        out << strBgScan << "\n";
                        if(strItemFrequency != QString("Auto"))
                        {
                            out << QString("\tscan_freq=%1").arg(strItemFrequency) << "\n";
                        }
                        for(int i = 1 ; i < strlistInfo.count()-1; i++)
                        {
                            if(strlistInfo.at(i).contains("ssid", Qt::CaseInsensitive))
                            {
                                out << QString::fromUtf8(strlistInfo.at(i).toLatin1().constData()) << "\n";
                            }
                            else
                            {
                                out << strlistInfo.at(i) << "\n";
                            }
                        }
                        out << "\n";
                    }
                }
            }
        }

        QList<QStringList> listWifiTable = readCompleteTable("WifiDetails", "");

        foreach(const QStringList& strlistTableItem, listWifiTable)
        {
            QString strItemESSID = strlistTableItem.at(0);

            if(strItemESSID == strFirstESSID)
            {
                continue;
            }

            QString strSecurity = strlistTableItem.at(1);
            QString strItemPassword = encryptDecryptString(strlistTableItem.at(2), 1);
            QString strItemFrequency = strlistTableItem.at(8);

            QStringList strlistInfo = getWPAPassphrase(strSecurity, strItemESSID, strItemPassword);
            if(strlistInfo.count() > 0)
            {
                out << "network={" << "\n";
                out << "\tscan_ssid=1" << "\n";
                out << strBgScan << "\n";
                if(strItemFrequency != QString("Auto"))
                {
                    out << QString("\tscan_freq=%1").arg(strItemFrequency) << "\n";
                }
                for(int i = 1; i < strlistInfo.count()-1; i++)
                {
                    if(strlistInfo.at(i).contains("ssid", Qt::CaseInsensitive))
                    {
                        out << QString::fromUtf8(strlistInfo.at(i).toLatin1().constData()) << "\n";
                    }
                    else
                    {
                        out << strlistInfo.at(i) << "\n";
                    }
                }
                out << "\n";
            }
        }

        if(bIs802 == false)
        {
            QStringList strlistInfo = write802NetworkBlock(QString("Wireless"), strBgScan);
            for(int i = 0; i < strlistInfo.count(); i++)
            {
                if(strlistInfo.at(i).contains("ssid",Qt::CaseInsensitive))
                {
                    out << QString::fromUtf8(strlistInfo.at(i).toLatin1().constData()) << "\n";
                }
                else
                {
                    out << strlistInfo.at(i) << "\n";
                }
            }

            out << "\n";
        }

        file.close();
    }

    sync();
    qDebug() << "LCore:writeWPAConfFile::2:: End. ";
}

void LCore::writeWiredWPAConfFile()
{
    qDebug() << "LCore:writeWiredWPAConfFile::2:: Start. ";
    QFile file(QString(WIREDCONFFILE));
    if(file.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&file);
        out << "ap_scan=0" << "\n";
        out << "ctrl_interface=/var/run/wpa_supplicant" << "\n\n";

        QStringList strlist802Details = readTable(QString("Network8021x") , QString("NetworkType='Ethernet'"), QString("*"));

        if(strlist802Details.isEmpty() == false)
        {
            int nAuthenticationType = strlist802Details.at(0).toInt();

            if(nAuthenticationType == 1)
            {
                out << "ctrl_interface_group=0" << "\n";
            }
        }

        QStringList strlistInfo = write802NetworkBlock(QString("Ethernet"), QString());
        for(int i = 0; i < strlistInfo.count(); i++)
        {
            out << strlistInfo.at(i);
        }

        out << "\n";

        file.close();
    }

    sync();
    qDebug() << "LCore:writeWiredWPAConfFile::2:: End. ";
}

void LCore::killWPASupplicantCommand(const QString& strDevice)
{
    qDebug() << "LCore:killWPASupplicantCommand::2:: Start. ";
    QProcess::execute(QString("wpa_cli"), QStringList() << QString("-i") << strDevice << QString("terminate"));
    qDebug() << "LCore:killWPASupplicantCommand::2:: End. ";
}

//for configuring wifi on boot up
// cppcheck-suppress unusedFunction
void LCore::configureWifiSettings(int nCheckCounter, bool bConfigure)
{
    qDebug() << "LCore:configureWifiSettings::3:: Start. ";

    if(QFile::exists("/tmp/.configuringwifi"))
        return;

    QStringList strlistDevices = ListWirelessInterfaces();
    if(strlistDevices.count())
    {
        QString strDevice = strlistDevices.first();

        int nStatus = QProcess::execute(QString(IFCONFIGCMD), QStringList() << "link" << "set" << strDevice << QString("up"));

        if(nStatus == 0)
        {
            QFile tfile(QString("/tmp/.configuringwifi"));
            if(tfile.open(QIODevice::WriteOnly | QIODevice::Text))
                tfile.close();

            killWPASupplicantCommand(strDevice);

            if(QFile::exists(WIFICONFFILE) == false)
            {
                writeWPAConfFile(QString(), false);
            }

            QStringList strArguments;
            strArguments << QString("-B") << QString("-D") << QString("nl80211") << QString("-i") << strDevice << QString("-d") << QString("-c") << QString(WIFICONFFILE);

            QProcess::execute(QString(WPASUPPLICANTCMD), strArguments);

            int nCount = 0;
            QProcess *process = new QProcess();
            while(nCount <= nCheckCounter)
            {
                process->start(QString(IWCONFIGCMD));
                process->waitForFinished(-1);
                QString strOutput = process->readAll();
                if(strOutput.contains("Access Point: Not-Associated") == false)
                {
                    break;
                }
                else
                {
                    nCount++;
                }

                ::sleep(1);
            }

            delete process;

            DisableIWConfigPowerManagenentOption(strDevice);

            ::sleep(1);

            QFile::remove(QString("/tmp/.configuringwifi"));

            if(bConfigure == true)
            {
                ExecuteNetworkSettings(strDevice);
            }
        }
    }

    if(bConfigure == true)
    {
        QStringList networklist = readTable(QString("NetworkDetails"), "NetworkType='Wireless'", "*");
        if(networklist.isEmpty())
        {
            QString columnType = "NetworkMode INTEGER, IP VARCHAR(40), Subnetmask VARCHAR(50), Gateway VARCHAR(50), PrimaryWIN VARCHAR(50), SecondaryWIN VARCHAR(50), PrimaryDNS VARCHAR(50), SecondaryDNS VARCHAR(50), LinkMode INTEGER, Speed VARCHAR(50), WakeOn VARCHAR(30), NetworkType VARCHAR(30), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(NetworkType)";
            QString columnValues = " 2, '', '', '', '', '', '', '', '',  '','', 'Wireless', 0, 0, 0, '', '' ";
            writeTable("NetworkDetails", columnType, columnValues, QString("AppendNew"));
        }
    }

    qDebug() << "LCore:configureWifiSettings::3:: End. ";
}

// cppcheck-suppress unusedFunction
QStringList LCore::getMHzFrequencies(const QString& strWirelessInterface, const QString& strCompareESSID, const QString& strCompareSecurity, const QString& strFilter)
{
    qDebug() << "LCore:getMHzFrequencies::3:: start";

    QStringList strlistFrequency;

    QString strFilterNew = strFilter;
    strFilterNew = strFilterNew.remove('.');

    QString strCompareSecurityNew = strCompareSecurity;

    if(strCompareSecurity.contains("WPA") == true)
    {
        strCompareSecurityNew = QString("WPA");
    }

    QString strProcessCmd = QString("wpa_cli");

    QStringList strlistArguments;
    strlistArguments << QString("-i");
    strlistArguments << strWirelessInterface;
    strlistArguments << QString("scan_results");

    QProcess *iwlistProc = new QProcess;
    iwlistProc->setProcessChannelMode(QProcess::MergedChannels);

    iwlistProc->start(strProcessCmd, strlistArguments);
    iwlistProc->waitForFinished(-1);
    iwlistProc->readLine(); // Removing first line

    while(!iwlistProc->atEnd())
    {
        QString strLine = iwlistProc->readLine().trimmed();
        QStringList strlistESSIDDetails = strLine.split('\t');
        QString strFrequency = strlistESSIDDetails.at(1);
        QString strSecurity = strlistESSIDDetails.at(3);
        QString strESSID;
        if(strlistESSIDDetails.count() > 4)
        {
            strESSID = strlistESSIDDetails.at(4);
        }

        if(strESSID == strCompareESSID && strSecurity.contains(strCompareSecurityNew) == true && strFrequency.startsWith(strFilterNew) == true)
        {
            strlistFrequency << strFrequency;
        }
    }

    delete iwlistProc;
    qDebug() << "LCore:getMHzFrequencies::1::getMHzFrequencies" << strlistFrequency;
    qDebug() << "LCore:getMHzFrequencies::3::END";
    return strlistFrequency;
}

// cppcheck-suppress unusedFunction
void LCore::ExecuteNetconnectSettings()
{
    qDebug() << "LCore:ExecuteNetconnectSettings::3:: Start. ";
    if(!isTableExists("DataCard"))
        return;

    if(qgetenv("BOARDARCH") != "via-arm")
        QProcess::execute("modprobe", QStringList() << "option");

    QStringList netconnect;
    netconnect = readTable("DataCard", "");
    if(netconnect.count())
    {
        if(netconnect.at(5) == "1")
        {
            if(!isDeviceExists("ttyUSB"))
            {
                qDebug() << "LCore:ExecuteNetconnectSettings::3:: DataCard : ttyUSB not exist";
                return;
            }

            QString output = "Connection Failed";
            QString interface;

            if(qgetenv("BOARDARCH") == QString("via-arm"))
            {
                if((netconnect.at(0) == tr("Airtel 3G")) || (netconnect.at(0) == tr("Airtel 4G")))
                    QProcess::startDetached("pon airtel");
                else
                    QProcess::startDetached("pon tataphoton");
            }
            else
            {
                if(netconnect.at(0) == QString("Reliance 3G"))
                    QProcess::startDetached("zte-mf190");
                else
                {
                    QProcess *proc1 = new QProcess();
                    proc1->startDetached("wvdial &");

                }
            }

            int i=0;
            while(i<15)
            {
                ::sleep(1);
                QProcess *proc = new QProcess();
                proc->start("ifconfig");
                proc->waitForFinished(-1);

                while (!proc->atEnd())
                {
                    QString line = proc->readLine().trimmed();
                    if(line.contains("ppp"))
                    {
                        output = "Connection Successful";
                        interface = line.simplified().section(" ", 0, 0);
                        break;
                    }
                }
                delete proc;

                qDebug() << "LCore:ExecuteNetconnectSettings::3:: Connectiong to netconnect : " << interface.replace(":","");
                if(output == "Connection Successful")
                {
                    proc = new QProcess();
                    QStringList args;
                    if(netconnect.at(0) == tr("Airtel 4G"))
                    {
                        args << "add" << "default" <<"dev"<< interface;
                    }
                    else
                    {
                        args << "add" << "default" << interface;
                    }
                    proc->start("route", args);
                    proc->waitForFinished(-1);
                    updateResolvConf("connect");
                    break;
                }
                i++;
            }
        }
    }
    qDebug() << "LCore:ExecuteNetconnectSettings::3:: End. ";
}

bool LCore::isDeviceExists(QString dev)
{
    qDebug() << "LCore:isDeviceExists::3:: Start. ";

    QDir dir("/dev/");
    dir.setFilter(QDir::Files | QDir::System);

    QFileInfoList list = dir.entryInfoList();

    for (int i = 0; i < list.size(); ++i) {
        QFileInfo fileInfo = list.at(i);
        QString line;
        if((line=fileInfo.fileName()).contains(dev))
        {
            qDebug() << "LCore:isDeviceExists::3:: return true. ";
            return true;
        }
    }
    qDebug() << "LCore:isDeviceExists::3:: return false. ";
    return false;
}

// cppcheck-suppress unusedFunction
void LCore::Create_wvdialConfFile(const QStringList& cardInfo)
{
    qDebug() << "LCore:Create_wvdialConfFile::3:: Start. ";
    qDebug() << "LCore:Create_wvdialConfFile::3:: args : cardInfo = " << cardInfo;

    QFile rfile( QString(WVDIAL_CONF_FILE));
    if(!rfile.exists())
    {
        if(rfile.open(QIODevice::WriteOnly | QIODevice::Text))
            rfile.close();
        sync();
    }

    QProcess *proc = new QProcess;
    proc->start("wvdialconf");
    proc->waitForFinished(-1);
    delete proc;
    proc = NULL;

    if(rfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QFile wfile(QString(TEMP_WVDIAL_CONF_FILE));
        if (wfile.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&wfile);
            QTextStream in(&rfile);
            while (!in.atEnd())
            {
                QString line = in.readLine();
                if(line.contains("Username"))
                    out << "Username = " << cardInfo.at(0) << "\n";
                else if(line.contains("Password"))
                    out << "Password = " << cardInfo.at(1) << "\n";
                else if(line.contains("Baud"))
                    out << "Baud = " << cardInfo.at(2) << "\n";
                else if(line.contains("Phone"))
                    out << "Phone = " << cardInfo.at(3) << "\n";
                else if(line.contains("APN"))
                {
                    if((cardInfo.count() > 5) && (cardInfo.at(5) == "T-Mobile" ))
                    {
                        if(cardInfo.at(4) == "WAP")
                            out << "APN = " << "gprswap" << "\n";
                        else if(cardInfo.at(4) == "Internet")
                            out << "APN = " << "gprsinternet" << "\n";
                        else if(cardInfo.at(4) == "Business Internet")
                            out << "APN = " << "business.gprsinternet" << "\n";
                        else if(cardInfo.at(4) == "T-Mobile MMS")
                            out << "APN = " << "general.t-mobile.uk" << "\n";
                        else if(cardInfo.at(4) == "MMS")
                            out << "APN = " << "wap.voicestream.com" << "\n";
                    }
                    else if((cardInfo.count() > 5) && (cardInfo.at(5) == "AT&T" ))
                    {

                        if(cardInfo.at(4) == "MEdia Net (phones)")
                            out << "APN = " << "wap.cingular" << "\n";
                        else if(cardInfo.at(4) == "LaptopConnect (data cards)")
                            out << "APN = " << "Broadband" << "\n";
                        else if(cardInfo.at(4) == "Data Connect (old)")
                            out << "APN = " << "isp.cingular" << "\n";
                        else if(cardInfo.at(4) == "LTE")
                            out << "APN = " << "pta" << "\n";
                        else if(cardInfo.at(4) == "AT&T MMS")
                            out << "APN = " << "wap.cingular" << "\n";
                    }
                    else if((cardInfo.count() > 5) && (cardInfo.at(5) == "Verizon" ))
                    {

                        if(cardInfo.at(4) == "4G LTE Contract")
                            out << "APN = " << "vzwims" << "\n";
                        //                        else if(cardInfo.at(4) == "4G LTE Contract")
                        //                            out << "APN = " << "vzwinternet" << "\n";
                        //                        else if(cardInfo.at(4) == "4G LTE Contract")
                        //                            out << "APN = " << "vzwapp" << "\n";
                    }
                }
                else
                    out << line.simplified() << "\n";
            }
            wfile.close();
            sync();
        }
        rfile.close();

        if(rfile.exists())
            rfile.remove();
        if(wfile.exists())
            wfile.copy(QString(WVDIAL_CONF_FILE));
    }
    qDebug() << "LCore:Create_wvdialConfFile::3:: End. ";
}

void LCore::writeFilesForRemoteShadow()
{
    qDebug() << "LCore:writeFilesForRemoteShadow::3:: Start. ";

    QDir d;
    d.mkpath("/root/.vnc");
    if(!QFile::exists(CONNECTPATH))
    {
        QFile file(CONNECTPATH);
        if (file.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&file);
            out << "#!/bin/sh \n";
            out << "/usr/os-bin/RemoteShadow connect \n";
            file.close();
            sync();
            file.setPermissions(QString(CONNECTPATH), QFile::ReadOwner| QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser| QFile::WriteUser | QFile::ExeUser | QFile::ReadGroup | QFile::ExeGroup | QFile::ReadOther | QFile::ExeOther);
        }
    }

    if(!QFile::exists(DISCONNECTPATH))
    {
        QFile file(DISCONNECTPATH);
        if (file.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&file);
            out << "#!/bin/sh \n";
            out << "/usr/os-bin/RemoteShadow disconnect \n";
            file.close();
            sync();
            file.setPermissions(QString(DISCONNECTPATH), QFile::ReadOwner| QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser| QFile::WriteUser | QFile::ExeUser | QFile::ReadGroup | QFile::ExeGroup | QFile::ReadOther | QFile::ExeOther);
        }
    }

    if(!QFile::exists(CONFIRMPATH))
    {
        QFile file(CONFIRMPATH);
        if (file.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&file);
            out << "#!/bin/sh \n";
            out << "/usr/os-bin/RemoteShadow confirm \n";
            file.close();
            sync();
            file.setPermissions(QString(CONFIRMPATH), QFile::ReadOwner| QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser| QFile::WriteUser | QFile::ExeUser | QFile::ReadGroup | QFile::ExeGroup | QFile::ReadOther | QFile::ExeOther);
        }
    }
    qDebug() << "LCore:writeFilesForRemoteShadow::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::ExecuteDaylightSavingTime()
{
    qDebug() << "LCore:ExecuteDaylightSavingTime::3:: Start. ";

    QString continent, region;
    QList<QStringList> tzreadlist = readCompleteTable(QString("TimeZone"), "");
    if(!tzreadlist.isEmpty())
    {
        continent = tzreadlist[0][0];
        region = tzreadlist[0][1];
    }
    else
    {
        QStringList strTimeZoneList = readDummyTimeZoneFile();
        if(!strTimeZoneList.isEmpty())
        {
            continent = strTimeZoneList.at(0);
            region = strTimeZoneList.at(1);
        }
        else
        {
            QStringList strDefaultTimeZone = readDefaultsValue("defaultTimeZone");

            if(!strDefaultTimeZone.isEmpty() && !strDefaultTimeZone.at(0).isEmpty())
            {
                continent = strDefaultTimeZone.at(0).section( "/", 0, 0);
                region = strDefaultTimeZone.at(0).section( "/", 1);
            }
            else
            {
                continent = "America";
                region = "New_York";
            }
        }
    }

    displayDaylightSavingTime(continent, region, QDate::currentDate().toString("yyyy"));

    //for next year DST list -----------------------------------------------------------------
    int lstdate, enddate, curdate;
    QList<QStringList> cklist = readCompleteTable(QString("DaylightSavingTime"), "");
    if(!cklist.isEmpty())
    {
        lstdate = cklist[0][1].toInt();
        enddate = QString(QDate::currentDate().toString("yyyy") +"1231").toInt();
        curdate = QDate::currentDate().toString("yyyyMMdd").toInt();
        if(curdate >= lstdate && curdate <= enddate)
        {
            QStringList ndateList, dstlist;
            QString curryear = QDate::currentDate().toString("yyyy");
            curryear = QString::number(curryear.toInt() + 1);

            int orig_count = getDSTCommand(continent, region, curryear).count();
            int count = getDSTCommand(continent, region, curryear).at(0).toInt();
            for(int i = 1; i <= count; i++)
                ndateList.append( getDSTCommand(continent, region, curryear).at(i) );  //Date List

            for(int i = count+1; i < orig_count; i++)
                dstlist.append( getDSTCommand(continent, region, curryear).at(i) );  //DST List

            QString newyear;
            for(int i = 0; i < ndateList.count(); i++)
                newyear = ndateList.at(i);

            if(!dstlist.isEmpty())
            {
                int index = 0;

                QString strdst;     //old list
                for(int i = 0; i < dstlist.count(); i++)
                    strdst.append(dstlist.at(i) +",");
                strdst.chop(1);

                QString finaldstdate, next_time, checkminus, finaltime;
                QString day, date, month, year, t_time;

                QString time_difference = getTimeDifference(dstlist, index).at(0);
                checkminus = getTimeDifference(dstlist, index).at(1);
                finaltime = get_Time(time_difference);

                day = dstlist.at(index).section(' ', 0, 0);
                date = dstlist.at(index).section(' ', 2, 2);
                if(date.length() < 2)
                    date = "0"+date;
                month = QString::number(QDate::fromString(dstlist.at(index).section(' ', 1, 1), "MMM").month());
                if(month.length() < 2)
                    month = "0"+month;
                year = dstlist.at(index).section(' ', 4, 4);
                t_time = dstlist.at(index).section(' ', 3, 3);
                QString ttime = dstlist.at(index).section(' ', 3, 3).remove(":");

                QDate ddate;
                ddate.setDate(year.toInt(), month.toInt(), date.toInt());
                finaldstdate = ddate.toString("yyyyMMdd") + ttime;
                next_time = dstlist.at(index+1).section(' ', 3, 3);

                QList<QStringList> llist = readCompleteTable(QString("DaylightSavingTime"), "");
                int AutoSyncInterval = 0;
                if(!llist.isEmpty())
                    AutoSyncInterval = llist[0][10].toInt();
                else
                    AutoSyncInterval = 0;

                QStringList updatelist;
                updatelist << "DST_List='"+ strdst +"'" << "DST_LastDate='"+ newyear +"'" << "CheckMinus='"+ checkminus +"'" << "Day='"+ day +"'" << "Date='"+ date +"'" << "Month='"+ month +"'" << "Year='"+ year +"'" << "Time='"+ t_time +"'" << "FinalTime='"+ finaltime +"'" << "AutoSyncInterval='" + QString::number(AutoSyncInterval) + "'" << "FinalDST_Date='"+ finaldstdate +"'" << "NextDST_Time='"+ next_time +"'" << "CheckTime=0";

                if(updateTable(QString("DaylightSavingTime"), updatelist, "") == "Update Successfull")
                {;}
            }
            else
            {
                deleteEntry(QString("DaylightSavingTime"), "drop");
            }
        }
    }


    //=========================================================================================
    QString checkdatetime, checknexttime;
    int ckdate;
    QList<QStringList> llist = readCompleteTable(QString("DaylightSavingTime"), "");
    if(!llist.isEmpty())
    {
        checkdatetime = llist[0][11];
        checknexttime = llist[0][12];
        ckdate = QDate::fromString(checkdatetime.section(" ", 0,0), "dd/MMM/yyyy").toString("yyyyMMdd").toInt();
        if(QDateTime::currentDateTime().toString("yyyyMMdd").toInt() == ckdate)
        {
            if(QDateTime::currentDateTime().toString("dd/MMM/yyyy hh:mm:ss") >= checkdatetime)
            {
                QString Day = QDate::currentDate().toString("dddd");
                QString nHH = checknexttime.section(':', 0 ,0);
                QString nMM = checknexttime.section(':', 1 ,1);
                QString nSS = checknexttime.section(':', 2 ,2);

                QString finaldate = QDate::currentDate().toString("dd MMM yyyy");
                QString finaltime = nHH +":"+ nMM +":"+ nSS;

                int nChecktimeformat = 1;
                QStringList valuelist;
#ifdef QT_OS_LINUX
                valuelist = liblcore.readTable(QString("TaskbarProperties"), "", "TimeFormat");
#elif QT_OS_WIN32
                valuelist = liblcore.readTable(retquery(), QString("TaskbarProperties"), "", "TimeFormat");
#endif
                if(valuelist.count())
                {
                    if(QString(valuelist.at(0)).contains("%p"))     //12Hr
                        nChecktimeformat = 1;
                    else if(QString(valuelist.at(0)).contains("%H:%M:%S"))  //24Hr
                        nChecktimeformat = 0;
                }
                if(nChecktimeformat)  //12Hr
                    finaltime = QTime::fromString(finaltime).toString("hh:mm:ss AP");     //%p
                else
                    finaltime = QTime::fromString(finaltime).toString("hh:mm:ss");     //%H:%M:%S

                QString dhcpIP = "";
                QStringList datalist;
#ifdef QT_OS_LINUX
                datalist = liblcore.readTable(QString("DateTime"), "", "NTPViaDHCP");
#elif QT_OS_WIN32
                datalist = liblcore.readTable(retquery(), QString("DateTime"), "", "NTPViaDHCP");
#endif
                if(!datalist.isEmpty())
                {
                    dhcpIP = datalist.at(0);
                    if(!dhcpIP.isEmpty())
                        dhcpIP = dhcpIP.simplified();
                }

                QString columnType = " Type VARCHAR(30) , DateType VARCHAR(30) , TimeValue VARCHAR(30) , NTPViaDHCP VARCHAR(30) , NetworkType VARCHAR(30) , NetworkValue VARCHAR(30) , Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30)";
                QString columnValues = " 'Manual', '"+finaldate +","+ Day +"', '"+finaltime+"', '"+ dhcpIP +"' , '' , '' , 0, 0, 0, '', ''";
                setDateTime(finaldate, finaltime);
                writeTable("DateTime", columnType, columnValues, "");
                QProcess::execute("killall xautolock xlock xslideshow");
                ScreenSaver();
            }
        }
    }
    //==========================================================================================
    QProcess::startDetached("DaylightSavingTime");

    qDebug() << "LCore:ExecuteDaylightSavingTime::3:: End. ";
}

QStringList LCore::getDSTCommand(const QString& Contient, const QString& Region, const QString& curryear)
{
    qDebug() << "LCore:getDSTCommand::3:: Start. ";
    qDebug() << "LCore:getDSTCommand::3: args : Contient = " << Contient << " Region = " << Region << " curryear = " << curryear;

    QStringList finallist;
    QList<QDate> dateList;

    QString timezone;
    if(!Region.isEmpty())
        timezone = Contient +"/"+ Region;
    else
        timezone = Contient;
    QString dstcommand = "zdump -v " +QString(TIMEZONE_PATH) + timezone;

    QString line;
    QStringList dstlist, ndateList;
    QProcess proc;
    proc.start(dstcommand);
    proc.waitForFinished(-1);
    while (!proc.atEnd())
    {
        if((line = proc.readLine()).contains(curryear))
        {
            line = line.section(" = ",-1,-1).simplified();
            QString day = line.section(' ', 0, 0);
            QString mon = line.section(' ', 1, 1);
            QString dt = line.section(' ', 2, 2);
            QString yr = line.section(' ', 4, 4);
            QString format = day + QString(" ") + mon + QString(" ") + dt + QString(" ") + yr;
            dateList << QDate::fromString(format);  //dateList = QDate("Sun Mar 31 2013") : currentdate = QDate("Tue Oct 22 2013")
            ndateList << QDate::fromString(format).toString("yyyyMMdd");
            dstlist.append(line);
        }
    }
    finallist << QString::number(dstlist.count()) << ndateList << dstlist;

    qDebug() << "LCore:getDSTCommand::3:: return finallist = " << finallist;
    return finallist;
}

int LCore::getDSTIndexFormContinentAndRegion(const QString& Continent, const QString& Region)
{
    qDebug() << "LCore:getDSTIndexFormContinentAndRegion::3:: Start. ";
    qDebug() << "LCore:getDSTIndexFormContinentAndRegion::3:: args : Continent = " << Continent << " Region = " << Region;

    int index = 0;
    QString strTimeZone = Continent+"/"+Region;
    QString curryear = QDate::currentDate().toString("yyyy");
    QString dstcommand = "zdump -v " +QString("/usr/share/zoneinfo/") + strTimeZone;
    QStringList zoneInfoList, newDETlist;
    QProcess proc;
    proc.start(dstcommand);
    proc.waitForFinished(-1);
    while (!proc.atEnd())
    {
        QString line;
        if((line = proc.readLine()).contains(curryear))
        {
            zoneInfoList << line.section(" = ",-1,-1).simplified();
        }
    }
    for(int i= 0; i< zoneInfoList.count()- 1; ++i)
    {
        if(zoneInfoList.at(i).contains("isdst=1"))
        {
            if(i == 0)
            {
                newDETlist << zoneInfoList.at(zoneInfoList.count()-2);
                newDETlist << zoneInfoList.at(i);
                index = zoneInfoList.count()-2;
                break;
            }
            else
            {
                newDETlist << zoneInfoList.at(i-1);
                newDETlist << zoneInfoList.at(i+1);
                index = i-1;
                break;
            }
        }
    }

    qDebug() << "LCore:getDSTIndexFormContinentAndRegion::3:: return index = " << index;
    return index;
}

// cppcheck-suppress unusedFunction
int LCore::getDSTIndex(QStringList dateList)
{
    qDebug() << "LCore:getDSTIndex::3:: Start. ";
    qDebug() << "LCore:getDSTIndex::3:: args : dateList = " << dateList;

    int index = 0;
    QString availMonth;
    QString currDate = QDate::currentDate().toString("yyyyMMdd");

    for(int i = 0; i < dateList.count(); i++)
    {
        if(!availMonth.isEmpty())
        {
            index = i;
            availMonth = dateList.at(i);
        }

        if(currDate.toInt() < dateList.at(i).toInt())
        {
            index = i;
            availMonth = dateList.at(i);
            break;
        }
    }
    Q_UNUSED(availMonth);

    qDebug() << "LCore:getDSTIndex::3:: return index = " << index;
    return index;
}

void LCore::displayDaylightSavingTime(const QString& Continent, const QString& Region, const QString& curryear)
{
    qDebug() << "LCore:displayDaylightSavingTime::3:: Start. ";
    qDebug() << "LCore:displayDaylightSavingTime::3:: args : Continent = " << Continent << " Region = " << Region << " curryear = " << curryear ;

    QStringList ndateList, dstlist;

    int orig_count = getDSTCommand(Continent, Region, curryear).count();
    int count = getDSTCommand(Continent, Region, curryear).at(0).toInt();
    for(int i = 1; i <= count; i++)
        ndateList.append( getDSTCommand(Continent, Region, curryear).at(i) );  //Date List

    for(int i = count+1; i < orig_count; i++)
        dstlist.append(getDSTCommand(Continent, Region, curryear).at(i) );  //DST List

    QString newyear;
    for(int i = 0; i < ndateList.count(); i++)
        newyear = ndateList.at(i);

    if(!dstlist.isEmpty())
    {
        int index = getDSTIndexFormContinentAndRegion(Continent, Region);

        QString columnType = " DST_List VARCHAR(50), DST_LastDate VARCHAR(10), NextDST_List VARCHAR(50), CheckMinus VARCHAR(5), Day VARCHAR(15), Date VARCHAR(15), Month VARCHAR(15), Year VARCHAR(15), Time VARCHAR(15), FinalTime VARCHAR(15), AutoSyncInterval INTEGER, FinalDST_Date VARCHAR(15), NextDST_Time VARCHAR(10), CheckTime INTEGER, Invalid_Date VARCHAR(20), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30)";

        QString strdst;     //old list
        for(int i = 0; i < dstlist.count(); i++)
            strdst.append(dstlist.at(i) +",");
        strdst.chop(1);

        QString finaldstdate, next_time, checkminus, finaltime;
        QString day, date, month, year, t_time;


        QString time_difference = getTimeDifference(dstlist, index).at(0);
        checkminus = getTimeDifference(dstlist, index).at(1);
        finaltime = get_Time(time_difference);

        day = dstlist.at(index).section(' ', 0, 0);
        date = dstlist.at(index).section(' ', 2, 2);
        if(date.length() < 2)
            date = "0"+date;
        month = QString::number(QDate::fromString(dstlist.at(index).section(' ', 1, 1), "MMM").month());
        if(month.length() < 2)
            month = "0"+month;
        year = dstlist.at(index).section(' ', 4, 4);
        t_time = dstlist.at(index).section(' ', 3, 3);
        QString ttime = dstlist.at(index).section(' ', 3, 3).remove(":");

        QDate ddate;
        ddate.setDate(year.toInt(), month.toInt(), date.toInt());
        finaldstdate = ddate.toString("yyyyMMdd") + ttime; //date +"/"+ month +"/"+ year +" "+ t_time;
        next_time = dstlist.at(index+1).section(' ', 3, 3);

        QList<QStringList> llist = readCompleteTable(QString("DaylightSavingTime"), "");
        int AutoSyncInterval = 1;
        if(!llist.isEmpty())
            AutoSyncInterval = llist[0][10].toInt();
        else
            AutoSyncInterval = 1;

        QString columnValues = "'"+ strdst +"', '"+ newyear +"', '"+  +"', '"+ checkminus +"', '"+ day +"', '"+ date +"', '"+ month +"', '"+ year +"', '"+ t_time +"', '"+ finaltime +"', '"+ QString::number(AutoSyncInterval) +"', '"+ finaldstdate +"', '"+ next_time +"', 0, 0, 0, 0, 0, '', '' ";
        writeTable(QString("DaylightSavingTime"), columnType, columnValues, "AppendNow");
    }
    else
    {
        deleteEntry(QString("DaylightSavingTime"), "drop");
    }
    qDebug() << "LCore:displayDaylightSavingTime::3:: End. ";
}

int LCore::getInSec(QTime ntime)
{
    qDebug() << "LCore:getInSec::3:: Start. ";
    int hour, minute, second, total_time = 0;

    hour = ntime.hour()*60*60;
    minute = ntime.minute()*60;
    second = ntime.second();
    total_time = hour + minute + second;

    qDebug() << "LCore:getInSec::3:: return total_time = " << total_time;
    return total_time;
}

QStringList LCore::getTimeDifference(QStringList llist, int lindex)
{
    qDebug() << "LCore:getTimeDifference::3:: Start. ";
    qDebug() << "LCore:getTimeDifference::3:: args : llist = " << llist << " lindex = " << lindex;


    QString minus;

    int nFDate = llist.at(lindex).section(' ', 2, 2).toInt();
    int nSDate = llist.at(lindex+1).section(' ', 2, 2).toInt();

    QString strFTime = llist.at(lindex).section(' ', 3, 3);
    QString strSTime = llist.at(lindex+1).section(' ', 3, 3);
    QTime firsttime = QTime::fromString(strFTime, "hh:mm:ss");
    QTime secondtime = QTime::fromString(strSTime, "hh:mm:ss");

    int ftime = getInSec(firsttime);
    int stime = getInSec(secondtime);
    int time_difference;

    int nDateDiff = nFDate - nSDate;    //Date Difference
    if(nDateDiff == 0)
    {
        if(firsttime.operator <=(secondtime))
        {
            time_difference = stime - ftime;
            minus = "-";
        }
        else
        {
            time_difference = ftime - stime;
            minus = "+";
        }
    }
    else
    {

        time_difference = stime;
        minus = "-";
    }

    qDebug() << "LCore:getTimeDifference::3:: time_difference = " << time_difference;

    QStringList slist;
    slist << QString::number(time_difference) << minus;

    qDebug() << "LCore:getTimeDifference::3:: return slist = " << slist;
    return slist;
}

QString LCore::get_Time(QString time_diff)
{
    qDebug() << "LCore:get_Time::3:: Start. ";
    QString timeformat, hr, min, sec, finaltime;

    QTime ttime = QTime::fromString("00:00:00", "hh:mm:ss");

    timeformat = ttime.addSecs(time_diff.toInt()+1).toString("hh:mm:ss");

    hr = timeformat.section(':', 0, 0) +" hour ";
    if(!hr.contains( "00" ))
        finaltime.append(hr);
    min = timeformat.section(':', 1, 1) +" min ";
    if(!min.contains( "00" ))
        finaltime.append(min);
    sec = timeformat.section(':', 2, 2) +" sec ";
    if(!sec.contains( "00" ))
        finaltime.append(sec);

    qDebug() << "LCore:get_Time::3:: return finaltime = " << finaltime;
    return finaltime;
}

// cppcheck-suppress unusedFunction
void LCore::ChangeResolutionInDB()
{
    qDebug() << "LCore:ChangeResolutionInDB::3:: Start. ";

    int screenCount = getScreenCount();
    QStringList valuesList;
    QString values;
    QStringList data = readTable(QString("DisplaySettings"), "");
    qDebug() << "LCore:ChangeResolutionInDB::3:: Screen Count = " << screenCount;
    if(screenCount > 1)
    {
        if(data.at(6) == QString("extended"))
        {
            QStringList resolutionList1 = getResolutionList("1");
            QStringList resolutionList2 = getResolutionList("2");

            QString strFirstRes = data.at(2);
            QString strFirstRate = data.at(4);
            QString strSecondRes = data.at(9);
            QString strSecondRate = data.at(11);

            if(strFirstRes.isEmpty() || resolutionList1.filter(strFirstRes).isEmpty())
            {
                QString strLine = resolutionList1.at(0);

                values = "FirstDisplayResolution='" + strLine.section(" ", 0, 0) + "'";
                valuesList << values;

                if(strFirstRate.isEmpty())
                {
                    QString strRate = strLine.section(" ", 1, 1).replace("*", "").replace("+", "");
                    if(strRate.isEmpty())
                        strRate = QString("60.0");

                    values = "FirstDisplayRefreshRate='" + strRate + "'";
                    valuesList << values;
                }
            }

            if(strSecondRes.isEmpty() || resolutionList2.filter(strSecondRes).isEmpty())
            {
                QString strLine = resolutionList2.at(0);

                values = "SecondDisplayResolution='" + strLine.section(" ", 0, 0) + "'";
                valuesList << values;

                if(strSecondRate.isEmpty())
                {
                    QString strRate = strLine.section(" ", 1, 1).replace("*", "").replace("+", "");
                    if(strRate.isEmpty())
                        strRate = QString("60.0");

                    values = "SecondDisplayRefreshRate='" + strRate + "'";
                    valuesList << values;
                }
            }

            if(valuesList.count())
            {
                QString condition = "DriverName='" + data.at(0) + "'";
                qDebug() << "LCore:ChangeResolutionInDB::3:: ValueList = " << valuesList ;
                qDebug() << "LCore:ChangeResolutionInDB::3:: Condition = " << condition;
                updateTable(QString("DisplaySettings"), valuesList, condition);

                ModifyXorgFileForScreen();
            }
            return;
        }

        QStringList resolutionList1 = getResolutionList("1");
        QStringList resolutionList2 = getResolutionList("2");

        QStringList list;
        for (int i = 0; i < resolutionList1.size(); ++i)
        {
            if(!resolutionList2.filter(resolutionList1.at(i).section(" ",0,0)).isEmpty())
                list += resolutionList1.at(i).section(" ",0,0);
        }
        QString commonRes = (list.count() > 1)?list.at(0):"";
        if(!data.isEmpty())
        {
            if(list.contains(data.at(2)))
                commonRes = data.at(2);

            values = "FirstDisplayResolution='" + commonRes + "'";
            valuesList << values;

            values = "SecondDisplayResolution='" + commonRes + "'";
            valuesList << values;

            QString condition = "DriverName='" + data.at(0) + "'";
            qDebug() << "LCore:ChangeResolutionInDB::3:: ValueList << " << valuesList ;
            qDebug() << "LCore:ChangeResolutionInDB::3:: Condition << " << condition;
            updateTable(QString("DisplaySettings"), valuesList, condition);
        }
    }
    else
    {
        QString setResolution = getResolution();
        if(!data.isEmpty() && !setResolution.isEmpty())
        {
            if(data.at(2) != setResolution)
            {
                values = "FirstDisplayResolution='" + setResolution + "'";
                valuesList << values;
                QString condition = "DriverName='" + data.at(0) + "'";
                qDebug() << "LCore:ChangeResolutionInDB::3:: ValueList1 = " << valuesList ;
                qDebug() << "LCore:ChangeResolutionInDB::3:: Condition1 = " << condition;
                updateTable(QString("DisplaySettings"), valuesList, condition);
            }
        }
    }
    qDebug() << "LCore:ChangeResolutionInDB::3:: End. ";
}

//for configuring 802 network on boot up
// cppcheck-suppress unusedFunction
void LCore::Configure8021xSecuritySettings(QString NetworkType)
{
    qDebug() << "LCore:Configure8021xSecuritySettings::3:: Start. ";
    qDebug() << "LCore:Configure8021xSecuritySettings::3:: args :  ";

    QString strWhereClause = QString("NetworkType='%1'").arg(NetworkType);

    QStringList strlist802Details = readTable(QString("Network8021x"), strWhereClause, QString("*"));

    if(strlist802Details.isEmpty() == true)
    {
        return;
    }

    if(QFile::exists("/tmp/.configuringwifi"))
        return;

    QFile tfile(QString("/tmp/.configuringwifi"));
    if(tfile.open(QIODevice::WriteOnly | QIODevice::Text))
        tfile.close();
    sync();

    QString DeviceType;
    if(NetworkType == "Ethernet")
        DeviceType = getEthernetDevice();
    else if(NetworkType == "Wireless")
    {
        QStringList list = ListWirelessInterfaces();
        if(list.count())
            DeviceType = list.at(0);
    }

    bool bCheckWPARunning = (QProcess::execute(QString("wpa_cli"), QStringList() << QString("-i") << DeviceType << QString("ping")) == 0)?true:false;

    if(!bCheckWPARunning)
    {
        QStringList strlistArguments;
        if(NetworkType == "Ethernet")
        {
            if(QFile::exists(WIREDCONFFILE) == false)
            {
                writeWiredWPAConfFile();
            }

            QProcess::execute(QString(IFCONFIGCMD), QStringList() << "link" << "set" << DeviceType << QString("up"));
            ::sleep(3);
            strlistArguments << "-i" << DeviceType << "-B" << "-D" << "wired" << "-c" << QString(SECURITYWIREDFILEPATH);
            QProcess::startDetached(WPASUPPLICANTCMD, strlistArguments);
        }
        else
        {
            if(QFile::exists(WIFICONFFILE) == false)
            {
                writeWPAConfFile(QString(), false);
            }

            QProcess::execute(QString(IFCONFIGCMD), QStringList() << "link" << "set" << DeviceType << QString("down"));
            sync();
            QProcess::execute(QString(IFCONFIGCMD), QStringList() << "link" << "set" << DeviceType << QString("up"));
            sync();
            strlistArguments << "-i" << DeviceType << "-B" << "-D" << "nl80211" << "-c" << QString(SECURITYFILEPATH) << "-f" << "/opt/debug";
            QProcess::startDetached(WPASUPPLICANTCMD, strlistArguments);

            bool bCheckKeyNegotiation = false;
            int nCounter = 0;
            while(nCounter < 10)
            {
                if(bCheckKeyNegotiation == false && system("grep \"authentication completed successfully\" /opt/debug") == 0)
                {
                    bCheckKeyNegotiation = true;
                }
                else if(bCheckKeyNegotiation == true && system("grep \"Key negotiation completed\" /opt/debug") == 0)
                {
                    break;
                }
                nCounter++;
                ::sleep(1);
            }

            sync();
            ::sleep(1);
            QFile::remove("/tmp/.configuringwifi");

            QString strCurrentDate =  QDateTime::currentDateTime().toString("dd:MMM:yyyy:hh:mm:ss:AP");
            qDebug() << "strCurrentDate" << strCurrentDate;

            QString strWpa_supplicantLog = "/var/log/wpa_supplicant";
            QDir dir(strWpa_supplicantLog);
            if(!dir.exists())
            {
                dir.mkpath(strWpa_supplicantLog);
            }

            QString strDebugFile = "/opt/debug";
            QString strWPADebugFile = QString(strWpa_supplicantLog+"/802Wifi-debugLog-%1").arg(strCurrentDate);
            QFile::copy(strDebugFile,strWPADebugFile);

            QFile::remove("/opt/debug");

            ExecuteNetworkSettings(DeviceType);
        }
    }

    QFile::remove(QString("/tmp/.configuringwifi"));

    qDebug() << "LCore:Configure8021xSecuritySettings::3:: End. ";
}

bool LCore::isDesktopMode()
{
    qDebug() << "LCore:isDesktopMode::3:: Start. ";
    QStringList tc_property = readTable("TaskbarProperties", "", "Mode");
    if(tc_property.count())
    {
        if(tc_property.at(0).toInt())
        {
            qDebug() << "LCore:isDesktopMode::3:: return true. ";
            return true;
        }
    }
    qDebug() << "LCore:isDesktopMode::3:: return false. ";
    return false;
}

// cppcheck-suppress unusedFunction
void LCore::sighupICEWM()
{
    qDebug() << "LCore:sighupICEWM::3:: Start. ";

    QProcess checkVersion;
    checkVersion.start("icewm --version");
    checkVersion.waitForFinished(-1);
    QString strOutput = checkVersion.readAllStandardOutput();
    qDebug() << "LCore:sighupICEWM::3:: strOutput = "<<strOutput;

    bool nCheck = true;

    if(strOutput.contains("1.3.7"))
    {
        nCheck = false;
    }

    if(nCheck)
    {
        system(QString("killall -SIGHUP icewm").toLatin1());
    }
    else
    {
        system("touch /tmp/.hotplugUpdateTab_rm");
        QProcess::execute(QString("killall"), QStringList() << QString("icewm"));
        QProcess::execute(QString("killall"), QStringList() << QString("OS_Desktop"));
    }
    qDebug() << "LCore:sighupICEWM::3:: End. ";
}

int LCore::getScreenCount()
{
    qDebug() << "LCore:getScreenCount::3:: Start. ";

    int count = 0, nLVDSCnt = 0;

    QProcess *proc = new QProcess();
    proc->start("xrandr.orig");
    proc->waitForFinished(-1);

    while (!proc->atEnd())
    {
        QString line = proc->readLine();
        if(line.contains("LVDS"))
            nLVDSCnt++;
        if(line.contains(" connected "))
            count++;
    }
    delete proc;
    if(count > 1 && nLVDSCnt && !checkForLaptop())  // /*!QFile::exists("/proc/acpi/battery")*/
        count--;

    qDebug() << "LCore:getScreenCount::3:: return count = " << count;
    return count;
}

// cppcheck-suppress unusedFunction
void LCore::getLpInfo()
{
    thlpinfo = new threadgetdevices;
}

// cppcheck-suppress unusedFunction
int LCore::createPPDforPrinter(QString oldPPD, QString newPPD, QString PageSize, QString Quality, QString Resolution, QString Orientation)
{
    qDebug() << "LCore:createPPDforPrinter::3:: Start. ";

    QFile oldPPDFile(oldPPD);
    QFile newPPDFile(newPPD);

    if(oldPPDFile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QString oldppdfileLine;
        QTextStream in(&oldPPDFile);

        if(newPPDFile.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QStringList pageSizeList, QualityList, resolutionList, OrientList;
            QTextStream out(&newPPDFile);

            while(!in.atEnd())
            {
                oldppdfileLine = in.readLine();

                if(oldppdfileLine.startsWith("*PageSize"))
                {
                    oldppdfileLine = oldppdfileLine.section(" ", 1,1).section("/",0,0);
                    pageSizeList.append(oldppdfileLine);
                }

                if(oldppdfileLine.startsWith("*Quality"))
                {
                    oldppdfileLine = oldppdfileLine.section(" ", 1,1).section("/",0,0);
                    QualityList.append(oldppdfileLine);
                }

                if(oldppdfileLine.startsWith("*Resolution"))
                {
                    oldppdfileLine = oldppdfileLine.section(" ", 1,1).section("/",0,0);
                    resolutionList.append(oldppdfileLine);
                }

                if(oldppdfileLine.startsWith("*NupOrient"))
                {
                    oldppdfileLine = oldppdfileLine.section(" ", 1,1).section("/",0,0);
                    OrientList.append(oldppdfileLine);
                }
            }

            oldPPDFile.reset();
            in.reset();

            while(!in.atEnd())
            {
                oldppdfileLine = in.readLine();

                if(oldppdfileLine.startsWith("*DefaultPageSize"))
                {
                    if(pageSizeList.indexOf(PageSize) != -1)
                        out << "*DefaultPageSize: " << PageSize <<"\n";
                    else
                        out << oldppdfileLine <<"\n";
                }
                else if(oldppdfileLine.startsWith("*DefaultPageRegion"))
                {
                    out << "*DefaultPageRegion: " << PageSize <<"\n";

                    if(pageSizeList.indexOf(PageSize) != -1)
                        out << "*DefaultPageRegion: " << PageSize <<"\n";
                    else
                        out << oldppdfileLine <<"\n";
                }
                else if(oldppdfileLine.startsWith("*DefaultImageableArea"))
                {
                    out << "*DefaultImageableArea: " << PageSize <<"\n";

                    if(pageSizeList.indexOf(PageSize) != -1)
                        out << "*DefaultImageableArea: " << PageSize <<"\n";
                    else
                        out << oldppdfileLine <<"\n";
                }
                else if(oldppdfileLine.startsWith("*DefaultPaperDimension"))
                {
                    out << "*DefaultPaperDimension: " << PageSize <<"\n";

                    if(pageSizeList.indexOf(PageSize) != -1)
                        out << "*DefaultPaperDimension: " << PageSize <<"\n";
                    else
                        out << oldppdfileLine <<"\n";
                }
                else if(oldppdfileLine.startsWith("*DefaultQuality"))
                {
                    if(QualityList.indexOf(Quality) != -1)
                        out << "*DefaultQuality: " << Quality << "\n";
                    else
                        out << oldppdfileLine <<"\n";
                }
                else if(oldppdfileLine.startsWith("*DefaultResolution"))
                {
                    if(resolutionList.indexOf(Resolution) != -1)
                        out << "*DefaultResolution: " << Resolution << "\n";
                    else
                        out << oldppdfileLine <<"\n";
                }
                else if(oldppdfileLine.startsWith("*DefaultNupOrient"))
                {
                    if(OrientList.indexOf(Orientation) != -1)
                        out << "*DefaultNupOrient: " << Orientation << "\n";
                    else
                        out << oldppdfileLine <<"\n";
                }
                else
                    out << oldppdfileLine << "\n";
            }

            newPPDFile.close();
            sync();
        }
        else
        {
            qDebug() << "LCore:createPPDforPrinter::3:: return1 0. ";
            return 0;
        }

        oldPPDFile.close();
    }
    else
    {
        qDebug() << "LCore:createPPDforPrinter::3:: return2 0 ";
        return 0;
    }

    qDebug() << "LCore:createPPDforPrinter::3:: return 1 ";
    return 1;
}

// cppcheck-suppress unusedFunction
QStringList LCore::readPrinterPPD(const QString& Printername)
{
    qDebug() << "LCore:readPrinterPPD::3:: Start. ";

    QStringList pconfvalues;
    pconfvalues.clear();

    QFile pconffile(ADDED_PPD+Printername+".ppd");

    if(pconffile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&pconffile);
        QString line;

        while(!in.atEnd())
        {
            line = in.readLine();

            if(line.startsWith("*Manufacturer:"))
            {
                line = line.section("*Manufacturer:", 1,1);
                line = line.simplified();
                line = line.replace("\"","");
                pconfvalues.append(line);
            }

            if(line.startsWith("*ModelName:"))
            {
                line = line.section("*ModelName:", 1,1);
                line = line.simplified();
                line = line.replace("\"","");
                pconfvalues.append(line);
            }

            if(line.startsWith("*NickName:"))
            {
                line = line.section("*NickName:", 1,1);
                line = line.simplified();
                line = line.replace("\"","");
                pconfvalues.append(line);
            }
        }

        pconffile.close();
    }

    qDebug() << "LCore:readPrinterPPD::3:: return pconfvalues = " << pconfvalues;
    return pconfvalues;
}

// cppcheck-suppress unusedFunction
bool LCore::UpdatePrinterMapOnRDP_ICA(bool rdpChecked, bool icaChecked, QString PrinterName)
{
    qDebug() << "LCore:UpdatePrinterMapOnRDP_ICA::3:: Start. ";

    bool found = false;

    if(isTableExists("ICAGLOBAL"))
    {
        QString icaMappedPrinters;
        QStringList icaprinterlist;

        if(icaChecked)
        {
            icaprinterlist = readTable("ICAGLOBAL", "").at(42).split(":");

            for(int i=0; i<icaprinterlist.count(); i++)
            {
                if(icaprinterlist[i] == PrinterName.simplified())
                {
                    found = true;
                    break;
                }
            }

            if(!found)
            {
                icaprinterlist.removeAll("");
                icaprinterlist.append(PrinterName.simplified());
                qDebug() << "LCore:UpdatePrinterMapOnRDP_ICA::3:: Ica Printer list = "<< icaprinterlist;

                icaMappedPrinters.clear();
                for(int i=0; i<icaprinterlist.count(); i++)
                {
                    icaMappedPrinters.append(icaprinterlist[i]);
                    icaMappedPrinters.append(":");
                }

                icaMappedPrinters.chop(1);
                qDebug() << "LCore:UpdatePrinterMapOnRDP_ICA::3:: ica printers = " << icaMappedPrinters;

                updateTable("ICAGLOBAL", QStringList("PrinterList='"+icaMappedPrinters+"'"), "");
                WriteWfclient();
            }
        }
        else
        {
            icaprinterlist = readTable("ICAGLOBAL", "").at(42).split(":");

            for(int i=0; i<icaprinterlist.count(); i++)
            {
                if(icaprinterlist[i] == PrinterName.simplified())
                {
                    found = true;
                    icaprinterlist.removeAt(i);
                    break;
                }
            }

            if(found)
            {
                icaMappedPrinters.clear();
                for(int i=0; i<icaprinterlist.count(); i++)
                {
                    icaMappedPrinters.append(icaprinterlist[i]);
                    icaMappedPrinters.append(":");
                }

                icaMappedPrinters.chop(1);

                updateTable("ICAGLOBAL", QStringList("PrinterList='"+icaMappedPrinters+"'"), "");
                WriteWfclient();
            }
        }
    }

    if(isTableExists("RDPGlobalSettings"))
    {
        QString rdpMappedPrinters;
        QStringList rdpprinterlist;
        found = false;   //added this because it uses the found variable value which is initialised when ICAGlobal table get read and because of it we ge the value as true and checked printers become empty in RDPGlobalSettings table

        if(rdpChecked)
        {
            rdpprinterlist = readTable("RDPGlobalSettings", "").at(23).split(",");

            for(int i=0; i<rdpprinterlist.count(); i++)
            {
                if(rdpprinterlist[i] == PrinterName.simplified())
                {
                    found = true;
                    break;
                }
                else if(!PrinterName.isEmpty()) ///Condition added because if we edit printer and check "map in RDP" option than in this case it was not getting mapped. --Varsha
                {
                    rdpMappedPrinters = PrinterName.simplified();
                    if(rdpprinterlist.count())
                    {
                        for(int j=0; j<rdpprinterlist.count(); j++)
                        {
                            if(!rdpprinterlist[j].isEmpty())
                            {
                                rdpMappedPrinters.append(",");
                                rdpMappedPrinters.append(rdpprinterlist[j]);
                            }
                        }
                    }
                }
            }

            if(!found)
            {
                rdpprinterlist.removeAll("");
                rdpprinterlist.append(PrinterName.simplified());

                rdpMappedPrinters.clear();
                for(int i=0; i<rdpprinterlist.count(); i++)
                {
                    rdpMappedPrinters.append(rdpprinterlist[i]);
                    rdpMappedPrinters.append(",");
                }

                rdpMappedPrinters.chop(1);

                updateTable("RDPGlobalSettings", QStringList("CheckedPrinters='"+rdpMappedPrinters+"'"), "");
            }
        }
        else
        {
            rdpprinterlist = readTable("RDPGlobalSettings", "").at(23).split(",");

            for(int i=0; i<rdpprinterlist.count(); i++)
            {
                if(rdpprinterlist[i] == PrinterName.simplified())
                {
                    found = true;
                    rdpprinterlist.removeAt(i);
                    break;
                }
            }

            if(found)
            {
                rdpMappedPrinters.clear();
                for(int i=0; i<rdpprinterlist.count(); i++)
                {
                    rdpMappedPrinters.append(rdpprinterlist[i]);
                    rdpMappedPrinters.append(",");

                }

                rdpMappedPrinters.chop(1);
                updateTable("RDPGlobalSettings", QStringList("CheckedPrinters='"+rdpMappedPrinters+"'"), "");
            }
        }
    }

    qDebug() << "LCore:UpdatePrinterMapOnRDP_ICA::3:: return found = " << found;
    return found;
}

QString LCore::GetDeviceURI(const QString& PortType, const QString& IP, const QString& username, const QString& passwd, const QString& sharename, bool chkWinDriv, const QString& domain)
{
    qDebug() << "LCore:GetDeviceURI::3:: Start. ";

    QString deviceuri;
    bool ok;

    if(PortType.startsWith("COM"))
    {
        QStringList serialportsett;

        serialportsett = readTable("SERIAL_PORT_SETTINGS", "SelectPort='"+PortType+"'");

        qDebug() << "LCore:GetDeviceURI::3:: serial port sett = " << serialportsett;
        if(serialportsett.isEmpty())
        {
            deviceuri = "serial:/dev/ttyS"+QString::number(PortType.section("COM",1,1).toInt(&ok,10)-1)+"?baud=9600+bits=8+parity=even+flow=hardware";
        }
        else
        {
            deviceuri = "serial:/dev/ttyS"+QString::number(PortType.section("COM",1,1).toInt(&ok,10)-1)+"?baud="+serialportsett.at(1)+"+bits="+serialportsett.at(3)
                    +"+parity="+serialportsett.at(4).toLower()+"+flow="+serialportsett.at(2).toLower();
        }
    }
    else if(PortType.startsWith("LPT"))
    {
        deviceuri = "parallel:/dev/lp"+QString::number(PortType.section("LPT",1,1).toInt(&ok,10)-1);
    }
    else if(PortType.startsWith("USB"))
    {
        if(chkWinDriv)
        {
            deviceuri = "parallel:/dev/usb/lp"+QString::number(PortType.section(":", 0,0).section("USB",1,1).toInt(&ok,10)-1);
            if(getCPUname().contains("Z3735F"))/*|| getCPUname().contains("N2808")*/
                deviceuri = "parallel:/dev/usb/lp"+QString::number(PortType.section(":", 0,0).section("USB",1,1).toInt(&ok,10));
        }
        else if(qgetenv("BOARDARCH") == "via-arm")
        {
            deviceuri = "parallel:/dev/usb/lp"+QString::number(PortType.section(":", 0,0).section("USB",1,1).toInt(&ok,10)-1);
        }
        else
        {
            bool found = false;

            for(int i=0;i<thlpinfo->usbdevices.count(); i++)
            {
                if(PortType == thlpinfo->usbdevices.at(i).section("\t", 0,0))
                {
                    found = true;
                    deviceuri = thlpinfo->usbdevices.at(i).section("\t", 1,1);
                    break;
                }
            }

            if(!found)
                deviceuri = "usb:/dev/usb/lp"+QString::number(PortType.section(":", 0,0).section("USB",1,1).toInt(&ok,10)-1);
        }
    }
    else if(PortType.startsWith("SAMBA"))
    {
        QString strPlainPWD = encryptDecryptString(passwd,1);

        QString strstar;
        strstar.clear();
        for(int j = 0; j < strPlainPWD.count() ;j++)
            strstar.append("*");

        strPlainPWD = strstar;
//        QString strencodedpassword ;

//        if(!strPlainPWD.isEmpty() && (strPlainPWD.contains("@") || strPlainPWD.contains("%") || strPlainPWD.contains("/")))
//        {
//            strencodedpassword = strencodedpassword.replace("%","%25");
//            strencodedpassword = strencodedpassword.replace("@","%40");
//            strencodedpassword = strencodedpassword.replace("/","%2f");
//        }
//        else
//            strencodedpassword = strPlainPWD ;

        if(!domain.isEmpty())
            deviceuri = "smb://"+username+":"+strPlainPWD/*.toLatin1().toPercentEncoding()*/+"@"+domain+"/"+IP+"/"+sharename.toLatin1().toPercentEncoding();
        else
            deviceuri = "smb://"+username+":"+strPlainPWD/*.toLatin1().toPercentEncoding()*/+"@/"+IP+"/"+sharename.toLatin1().toPercentEncoding();
    }
    else if(PortType.startsWith("IPP"))
    {
        deviceuri = "ipp://"+IP+":631/printers/"+sharename;
    }
    else if(PortType.startsWith("JDSOCKET"))
    {
        deviceuri = "socket://"+IP+":"+sharename;
    }
    else if(PortType.startsWith("LPR"))
    {
        deviceuri = "lpd://"+IP+":"+sharename;
    }

    if(thlpinfo != NULL)
    {
        thlpinfo->deleteLater();
        thlpinfo = NULL;
    }

    qDebug() << "LCore:GetDeviceURI::3:: return deviceuri = " << deviceuri;
    return deviceuri;
}

// cppcheck-suppress unusedFunction
void LCore::modifyFilesForADS()
{
    qDebug() << "LCore:modifyFilesForADS::3:: Start. ";

    QString domain;
    QStringList ADSSettings;
    ADSSettings = readTable(QString("ADSSettings"), "");
    if(!ADSSettings.isEmpty())
    {
        domain = ADSSettings.at(2);
    }
    else
        return;

    QStringList lines;

    lines = readFile(QString(HOSTS_FILE));
    writeToFile(QString(HOSTS_FILE), lines);

    lines = readFile(QString(SMB_CONF_FILE));
    writeToFile(QString(SMB_CONF_FILE), lines);

    lines.clear();
    lines += "[libdefaults]";
    lines += " default_realm = " + domain.toUpper();
    lines += " dns_lookup_realm = false";
    lines += " dns_lookup_kdc = false";
    lines += " ticket_lifetime = 24h";
    lines += " forwardable = yes";
    lines += "[realms]";
    lines += " " + domain.toUpper() + " = {";
    lines += "admin_server = " + domain.toLower();
    lines += "default_domain = " + domain.toLower();
    lines += "kdc = " + domain.toLower();
    lines += "}";
    lines += domain.toLower() + " = " + domain.toUpper();
    lines += "." + domain.toLower() + " = " + domain.toUpper();
    writeToFile(QString(KRB5_CONF_FILE), lines);

    qDebug() << "LCore:modifyFilesForADS::3:: End. ";
}

void LCore::writeToFile(const QString& filename, const QStringList& lines)
{
    qDebug() << "LCore:writeToFile::3:: Start. ";
    qDebug() << "LCore:writeToFile::3:: Filename = " << filename;

    QFile file(filename);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
        return;
    QTextStream out(&file);
    for (int i = 0; i < lines.size(); ++i)
        out << lines.at(i) << "\n";
    file.close();
    sync();
    qDebug() << "LCore:writeToFile::3:: End. ";
}

QStringList LCore::getValues(const QString& strSearch, const QList<QStringList>& listCompleleteValues)
{
    QStringList strlistReturn;

    for(int i = 0; i < listCompleleteValues.count(); i++)
    {
        QStringList strlistValues = listCompleleteValues.at(i);

        if(strlistValues.at(0) == strSearch)
        {
            strlistReturn = strlistValues;

            break;
        }
    }

    return strlistReturn;
}

// cppcheck-suppress unusedFunction
void LCore::addPkgInfoInDB()
{
    qDebug() << "LCore:addPkgInfoInDB::3:: Start. ";

    if(!QFile::exists(QString(MENU_BKPFILE)))
        return;

    bool bIsBEL = false;
    int nAddtoDesktop = 0;
    QStringList  strlistCheckBEL = readDefaultsValue("BELEnable");
    if(strlistCheckBEL.count() && strlistCheckBEL.at(0).toInt())
    {
        bIsBEL = true;
        nAddtoDesktop = 1;
    }
    QString values;
    QString columnType = "PackageName VARCHAR(50) PRIMARY KEY, Parent VARCHAR(50),InstalledVersion VARCHAR(30), AvailableVersion VARCHAR(30), PackageCategory VARCHAR(50), PackageDependencies VARCHAR(100), PackageSquashSize VARCHAR(20), InstalledStatus VARCHAR(30), RebootRequired VARCHAR(30),InstallPath VARCHAR(50), RestrictPackage VARCHAR(30), PackageType VARCHAR(30),Command VARCHAR(100),Icon VARCHAR(100),AddToMenu INTEGER,AddToDesktop INTEGER,AutoStart INTEGER,AppEndingOption VARCHAR(50),Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";

    QList<QStringList> listCompletePackageValues  = readCompleteTable("PackageInfo", "");

    deleteEntry(QString("PackageInfo"), "drop");
    //----------------------------------------------------------------------------
    qDebug() << "LCore:addPkgInfoInDB::3:: Added TCCenter in PackageInfo";
    QString icon_path = QString(ICON_PATH)+"config.png";

    QStringList strlistValues = getValues(QString("Control Center"), listCompletePackageValues);

    if(strlistValues.isEmpty() == true)
    {
        values = "'Control Center', 'None','','','','','','Installed','','','','','/usr/os-bin/TCCenter', '"+icon_path+"', 0, 1, 0,'"+"None"+"', 0, 0, 0, '', '' ";

    }
    else
    {
        values = "'Control Center', '"+strlistValues.at(1)+"','','','','','','"+strlistValues.at(7)+"','','','','','"+strlistValues.at(12)+"', '"+strlistValues.at(13)+"','"+strlistValues.at(14)+"', '"+strlistValues.at(15)+"', '"+strlistValues.at(16)+"','"+strlistValues.at(17)+"', 0, 0, 0, '', '' ";
    }
    writeTable(QString("PackageInfo"), columnType, values, "AppendNew");

    //----------------------------------------------------------------------------

    if(checkForUSBImage() ==  true)
    {
        QString icon_path_firmware = QString(ICON_PATH)+"setting.png";

        QStringList strlistUSBValues = getValues(QString("Firmware Updates"), listCompletePackageValues);

        if(strlistUSBValues.isEmpty() == true)
        {
            values = "'Firmware Updates', 'None','','','','','','Installed','','','','','/usr/os-bin/FirmwareUpdates', '"+icon_path_firmware+"', 0, 1, 0,'"+"None"+"', 0, 0, 0, '', '' ";
        }
        else
        {
            values = "'Firmware Updates', '"+strlistValues.at(1)+"','','','','','','"+strlistValues.at(7)+"','','','','','"+strlistValues.at(12)+"', '"+strlistValues.at(13)+"','"+strlistValues.at(14)+"', '"+strlistValues.at(15)+"', '"+strlistValues.at(16)+"','"+strlistValues.at(17)+"', 0, 0, 0, '', '' ";
        }

        writeTable(QString("PackageInfo"), columnType, values, "AppendNew");
    }
    //----------------------------------------------------------------------------
    qDebug() << "LCore:addPkgInfoInDB::3:: Added RepoManager in PackageInfo";

    if(QFile::exists("/usr/os-bin/RepoManager") && !QFile::exists(BOOTISO_FILE) && qgetenv("BOARDARCH") != "via-arm" && qgetenv("OSPROJECT") != "McD")
    {
        icon_path = QString(ICON_PATH)+"Repository-Manager.png";

        QStringList strlistRepoManagerValues = getValues(QString("Firmware Updates"), listCompletePackageValues);

        if(strlistRepoManagerValues.isEmpty() == true)
        {
            values = "'Repository Manager', 'None','','','','','','Installed','','','','','/usr/os-bin/RepoManager', '"+icon_path+"', 0, 0, 0,'"+"None"+"', 0, 0, 0, '', '' ";
        }
        else
        {
            values = "'Repository Manager', '"+strlistValues.at(1)+"','','','','','','"+strlistValues.at(7)+"','','','','','"+strlistValues.at(12)+"', '"+strlistValues.at(13)+"','"+strlistValues.at(14)+"', '"+strlistValues.at(15)+"', '"+strlistValues.at(16)+"','"+strlistValues.at(17)+"', 0, 0, 0, '', '' ";
        }

        writeTable(QString("PackageInfo"), columnType, values, "AppendNew");
    }
    //----------------------------------------------------------------------------
    QStringList strlistPkgs;
    QFile infile(MENU_BKPFILE);
    if (infile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&infile);
        bool ok = false;
        QString parent = "None";
        QString strCommand;
        QString strImagePath;

        while (!in.atEnd())
        {
            QString line = in.readLine().simplified();

            if(line.startsWith("#") && line.contains("prog "))
                continue;

            QString linecheck = line.remove("#");

            if(ok && line.startsWith("separator"))
                ok = false;
            if(ok)
            {
                line = line.simplified();
                if(line != "}")
                {
                    if(line.startsWith("menu"))
                        parent = "Parent";

                    QString execuatable;
                    QString strApplicationName;
                    if(line.contains("su") && line.contains("osuser"))
                        execuatable = "su osuser -c \"" + line.simplified().section("\"", 4, -1).section(" ", 4, -1).remove("\"") + "\"";
                    else
                        execuatable = line.simplified().section("\"", 4, -1).remove("\"");

                    strApplicationName = line.section("\"",1,2).remove("\"").simplified();  //Applicaiton name

                    QStringList strlistApplication = getValues(strApplicationName, listCompletePackageValues);

                    if(strlistApplication.isEmpty() == true)
                    {

                        strCommand =  "xalf -l \""+ strApplicationName +"\" -s "+"LaunchApplication \"" + strApplicationName.trimmed() + "\"";
                        strImagePath = line.section("\"",3,3).remove("\"");
                        if(bIsBEL)
                        {
                         values = "'"+line.section("\"",1,2).remove("\"").simplified()+"','"+parent+"','','','','','','Installed','','','','','"+execuatable+"', '"+line.section("\"",3,3).remove("\"")+"', 1, 1, 0,'"+"None"+"', 0, 0, 0, '', '' ";
                        }
                        else
                        {
                             values = "'"+line.section("\"",1,2).remove("\"").simplified()+"','"+parent+"','','','','','','Installed','','','','','"+execuatable+"', '"+line.section("\"",3,3).remove("\"")+"', 1, 0, 0,'"+"None"+"', 0, 0, 0, '', '' ";
                        }

                    }
                    else
                    {
                        strCommand =  "xalf -l \""+ strApplicationName +"\" -s "+"LaunchApplication \"" + strApplicationName.trimmed() + "\"";
                        strImagePath = strlistApplication.at(13);

                       values = "'"+strApplicationName+"','"+strlistApplication.at(1)+"','','','','','','" +strlistApplication.at(7)+ "','','','','','"+execuatable+"', '"+strlistApplication.at(13)+"', '"+strlistApplication.at(14)+"', '"+strlistApplication.at(15)+"', '"+strlistApplication.at(16)+"','"+strlistApplication.at(17)+"', 0, 0, 0, '', '' ";
                    }

                    if(line.section("\"",1,2).remove("\"").simplified().length())   //prashant
                    {
                        writeTable(QString("PackageInfo"), columnType, values, "AppendNew");

                        if(bIsBEL && nAddtoDesktop == 1)
                        {
                            if(parent != "Parent")
                                ModifyDesktop(strApplicationName, strCommand, 100, strImagePath, false);
                        }
                        strlistPkgs << line.section("\"",1,2).remove("\"").simplified();
                    }
                }
                if(line.startsWith("menu"))
                    parent = line.section("\"",1,2).remove("\"").simplified();
                else if(parent != "None" && line == "}")
                    parent = "None";
            }
            if(linecheck.startsWith("menu \"Applications\""))
                ok = true;
        }
        infile.close();
    }

    QString cmd = "mv " + QString(MENU_BKPFILE) + " /data/menu.orig";
    QProcess::execute(cmd);

    ModifyStartup( "", "", 100);

    /// #If sysconf.db is present in first partition(/sda1/data/) with some application on desktop. After restore Application not show on desktop.
    /// This is solved by following code by Ritesh On 23rd Feb 2017.
    QStringList strlistApps = readTable("DesktopWidget", "", "Name");
    foreach(const QString& strApp, strlistApps)
    {
        if(!strlistPkgs.contains(strApp))
            deleteEntry("DesktopWidget", "Type='Application' AND Name='"+strApp+"'");
    }
    qDebug() << "LCore:addPkgInfoInDB::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::writeDHCPConf()
{
    qDebug() << "LCore:writeDHCPConf::3:: Start. ";

    QStringList values;
    if(QFile::exists("/tmp/Wired.txt"))
    {
        QFile::remove("/tmp/Wired.txt");
        values = readTable("SysConf", "Property='WiredTimeout'", "Value");
    }
    else if(QFile::exists("/tmp/Wireless.txt"))
    {
        QFile::remove("/tmp/Wireless.txt");
        values = readTable("SysConf", "Property='WirelessTimeout'", "Value");
    }
    if(values.count())
    {
        QString timeoutvalue = values.at(0);
        qDebug()<< "LCore:writeDHCPConf::3:: time = " << timeoutvalue;
        QStringList list;
        QFile file(DHCP_CONF_FILE);
        if (file.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&file);
            while (!in.atEnd())
            {
                QString line = in.readLine();
                if(line.startsWith("timeout"))
                    line = "timeout "+timeoutvalue+";";
                list.append(line);
            }
        }
        file.close();

        if (file.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            qDebug() << "LCore:writeDHCPConf::3:: here comes " << list.count();
            QTextStream out(&file);
            for(int i = 0; i < list.count(); i++)
                out << list.at(i) << "\n";
        }
        file.close();
        sync();
    }
    else
        qDebug() << "LCore:writeDHCPConf::3:: list is empty " ;
}

void LCore::writeX11vncOptions()
{
    qDebug() << "LCore:writeX11vncOptions::3:: Start. ";

    QStringList ColValues = readTable("RemoteShadowingSettings", "");
    if(ColValues.count())
    {
        bool status = 0;

        QString strPasswd = encryptDecryptString(ColValues.at(3),1);  //for BNK used encryption
        QStringList args;
        args<<"-storepasswd"<<QString(strPasswd).simplified()<<QString(SERVICESPATH)+"/.vncpass";
        QProcess *proc = new QProcess(this);
        proc->start("x11vnc",args);
        proc->waitForFinished(-1);
        status=proc->exitCode();
        if(!status)
        {
            QStringList lines;
            QString options = "X11VNC_OPTION=\"";
            options.append(" -forever -xkb -skip_lockkeys  -httpdir /usr/share/tightvnc-java -httpport 5800 ");
            if(QString(ColValues.at(1)).toInt())
                options.append(" -shared ");

            if(QString(ColValues.at(2)).toInt())
                options.append(" -viewonly ");

            options.append("-rfbport " + ColValues.at(5));

            options.append(" -rfbauth "+QString(SERVICESPATH)+"/.vncpass");

            if(QString(ColValues.at(0)) == "Query user")
                options.append(" -accept /root/.vnc/confirm.sh");
            if(QString(ColValues.at(0)) != "Silently Connect")
                options.append(" -afteraccept /root/.vnc/connect.sh -gone /root/.vnc/disconnect.sh ");

            QStringList strlistRepeater = readTable(QString("ReverseVNC"), "");
            QStringList HostName = readTable(QString("ClientSettings"), "");
            QString Host;
            if(!HostName.isEmpty())
                Host = HostName.at(1);
            QString HostIP;
            if(isValidIP(Host))
                HostIP = Host;
            else
                HostIP=getIPFromServerHostName(Host);

            if(!strlistRepeater.isEmpty())
            {
                //x11vnc --ultrafilexfer -connect repeater=ID:123+192.168.1.25:5500
                int nStatus = strlistRepeater.at(0).toInt();
                QString strIPAddress = HostIP;
                QString strPort = strlistRepeater.at(2);
                QString strRepeaterID = strlistRepeater.at(3);
                QString strCmdn = "repeater=ID:" + strRepeaterID + "+" + strIPAddress + ":" + strPort;

                options.append(" --ultrafilexfer -connect " + strCmdn);

                QStringList strlistService = readTable(QString("Services"), "ServiceName='x11vnc'");

                if(nStatus && !strlistService.isEmpty())
                {
                    QString strCmds = QString(SERVICESPATH) + "/x11vnc";
                    QProcess::startDetached(strCmds, QStringList() << "restart");
                }
                QProcess::startDetached("/usr/os-bin/vncrepeater", QStringList() << strRepeaterID << strIPAddress << strPort);
            }

            options.append("\"");

            lines += options;

            QFile newOptionsFile(SERVICE_OPT);
            if (!newOptionsFile.open(QIODevice::WriteOnly | QIODevice::Text))
                return;

            QTextStream out(&newOptionsFile);
            for (int i = 0; i < lines.size(); ++i)
                out << lines.at(i) << "\n";
            newOptionsFile.close();
            sync();
        }
    }

    qDebug() << "LCore:writeX11vncOptions::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::WritePowerTermPTS_File(QStringList terminal_details)
{
    qDebug() << "LCore:WritePowerTermPTS_File::3:: Start. ";

    QMap<QString, int> map;
    map.insert("Off", 0);
    map.insert("On", 1);

    QStringList ShowHideList;
    ShowHideList << "Hide" << "Show";

    QString filename = QString(POWERTERM_CONFIG_DIR) + terminal_details.at(0) + ".pts";
    QFile file(filename);
    if (file.open(QIODevice::WriteOnly | QIODevice::Text ))
    {
        QTextStream out(&file);

        out << "[General Settings]" << "\n";
        out << "Version                                  = VER 196" << "\n\n";
        out << "Window-X                                 = 0" << "\n";
        out << "Window-Y                                 = 0" << "\n";
        QString res = terminal_details.at(16);
        if(res != "Fullscreen")
        {
            if(res.simplified() != "Fit to Screen")
            {
                QString win_width = res.section("x", 0, 0);
                QString win_height = res.section("x", 1, 1);
                out << "Window-Width                             = " << win_width.simplified() << "\n";
                out << "Window-Height                            = " << win_height.simplified() << "\n";
            }
            else
                out << "Window-Maximized                         = On" << "\n";
        }

        //##################################
        out << "Tab-Stops = 9,17,25,33,41,49,57,65,73,81,89,97,105,113,121,129,137,145,153,161,169,177,185,193," << "\n\n";
        //##################################

        out << "[Colors]" << "\n";
        // out << "Normal                                   = Cyan        , Dark-Blue" << "\n";
        out << "Normal                                   = " << terminal_details.at(86).simplified() << "," <<terminal_details.at(87).simplified() << "\n";
        out << "Blink                                    = White       , Dark-Blue" << "\n";
        out << "Reverse                                  = Dark-Blue   , Cyan" << "\n";
        out << "Reverse-Blink                            = Dark-Blue   , White" << "\n";
        out << "Underline                                = White       , Dark-Cyan" << "\n";
        out << "Underline-Blink                          = White       , Dark-Cyan" << "\n";
        out << "Underline-Reverse                        = Dark-Blue   , Cyan" << "\n";
        out << "Underline-Reverse-Blink                  = Dark-Blue   , White" << "\n";
        out << "Bold                                     = Yellow      , Dark-Blue" << "\n";
        out << "Bold-Blink                               = Yellow      , Dark-Blue" << "\n";
        out << "Bold-Reverse                             = Dark-Blue   , Yellow" << "\n";
        out << "Bold-Reverse-Blink                       = Dark-Blue   , Yellow" << "\n";
        out << "Bold-Underline                           = Yellow      , Dark-Blue" << "\n";
        out << "Bold-Underline-Blink                     = Yellow      , Dark-Blue" << "\n";
        out << "Bold-Underline-Reverse                   = Dark-Blue   , Yellow" << "\n";
        out << "Bold-Underline-Reverse-Blink             = Dark-Blue   , Yellow" << "\n";
        out << "Unprotocol-Normal                        = Green       , Black" << "\n";
        out << "Unprotocol-Intensed                      = Red         , Black" << "\n";
        out << "Protected-Normal                         = Cyan        , Black" << "\n";
        out << "Protected-Intensed                       = White       , Black" << "\n";
        out << "Blue                                     = Blue        , Black" << "\n";
        out << "Red                                      = Red         , Black" << "\n";
        out << "Pink                                     = Pink        , Black" << "\n";
        out << "Green                                    = Green       , Black" << "\n";
        out << "Turquoise                                = Cyan        , Black" << "\n";
        out << "Yellow                                   = Yellow      , Black" << "\n";
        out << "White                                    = White       , Black" << "\n";
        out << "Default                                  = White       , Black" << "\n";
        out << "20-Green                                 = Green       , Black" << "\n";
        out << "21-Green-Reverse                         = Green       , Black" << "\n";
        out << "22-White                                 = White       , Black" << "\n";
        out << "23-White-Reverse                         = White       , Black" << "\n";
        out << "24-Green-Underscore                      = Green       , Black" << "\n";
        out << "25-Green-Underscore-Reverse              = Green       , Black" << "\n";
        out << "26-White-Underscore                      = White       , Black" << "\n";
        out << "28-Red                                   = Red         , Black" << "\n";
        out << "29-Red-Reverse                           = Red         , Black" << "\n";
        out << "2A-Red-Blink                             = Red         , Black" << "\n";
        out << "2B-Red-Blink-Reverse                     = Red         , Black" << "\n";
        out << "2C-Red-Underscore                        = Red         , Black" << "\n";
        out << "2D-Red-Underscore-Reverse                = Red         , Black" << "\n";
        out << "2E-Red-Underscore-Bold                   = Red         , Black" << "\n";
        out << "30-Turquoise-Column-Separator            = Cyan        , Black" << "\n";
        out << "31-Turquoise-Column-Separator-Reverse    = Cyan        , Black" << "\n";
        out << "32-Yellow-Column-Separator               = Yellow      , Black" << "\n";
        out << "33-Yellow-Column-Separator-Reverse       = Yellow      , Black" << "\n";
        out << "34-Turquoise-Column-Separator-Underscore = Cyan        , Black" << "\n";
        out << "35-Turquoise-Column-Separator-Underscore-Reverse = Cyan        , Black" << "\n";
        out << "36-Yellow-Column-Separator-Underscore    = Yellow      , Black" << "\n";
        out << "38-Pink                                  = Pink        , Black" << "\n";
        out << "39-Pink-Reverse                          = Pink        , Black" << "\n";
        out << "3A-Blue                                  = Dark-Cyan   , Black" << "\n";
        out << "3B-Blue-Reverse                          = Dark-Cyan   , Black" << "\n";
        out << "3C-Pink-Underscore                       = Pink        , Black" << "\n";
        out << "3D-Pink-Underscore-Reverse               = Pink        , Black" << "\n";
        out << "3E-Blue-Underscore                       = Dark-Cyan   , Black" << "\n";
        out << "Default-ANSI                             = Gray        , Black" << "\n";
        out << "Frame                                    = White       , Black" << "\n";
        out << "Ruler                                    = White       , Black" << "\n";
        out << "Status                                   = Green       , Black" << "\n";
        out << "Background                               = Black       , Gray" << "\n";
        out << "PowerGUI-Button                          = Dark-Blue   , Gray" << "\n";
        out << "PowerGUI-Edit                            = Black       , White" << "\n\n";

        out << "[Color Palette]" << "\n";
        out << "Black       = 000000" << "\n";
        out << "Dark-Gray   = 808080" << "\n";
        out << "Gray        = C0C0C0" << "\n";
        out << "White       = FFFFFF" << "\n";
        out << "Dark-Red    = 000080" << "\n";
        out << "Red         = 0000FF" << "\n";
        out << "Dark-Pink   = 800080" << "\n";
        out << "Pink        = FF00FF" << "\n";
        out << "Dark-Blue   = 800000" << "\n";
        out << "Blue        = FF0000" << "\n";
        out << "Dark-Cyan   = 808000" << "\n";
        out << "Cyan        = FFFF00" << "\n";
        out << "Dark-Green  = 008000" << "\n";
        out << "Green       = 00FF00" << "\n";
        out << "Dark-Yellow = 008080" << "\n";
        out << "Yellow      = 00FFFF" << "\n\n";

        //##############################
        out << "Deep-blue   = C80A00" << "\n";
        out << "Grass-green = 008000" << "\n";
        out << "Teal-blue   = 9F9F5F" << "\n";
        out << "Electric-blue = FFAD12" << "\n";
        out << "Bright-blue = FFE90B" << "\n";
        out << "Bright-green = 50ED3F" << "\n";
        out << "Light-blue-green = C8EB43" << "\n";
        out << "Turquoise   = EAEAAD" << "\n";
        out << "Sky-blue    = FFCC00" << "\n";
        out << "Sea-green   = 669933" << "\n";
        out << "Blue-green  = 6E764A" << "\n";
        out << "Brick-red   = 42165D" << "\n";
        out << "Violet      = 800080" << "\n";
        out << "Indigo      = 993333" << "\n";
        out << "Blue-purple = FFCA3A" << "\n";
        out << "Khaki-green = 386B49" << "\n";
        out << "Charcoal-gray = 808080" << "\n";
        out << "Powder-blue = E6E0B0" << "\n";
        out << "Medium-blue = FF007F" << "\n";
        out << "Medium-green = 5FF06F" << "\n";
        out << "Green-blue  = 767F52" << "\n";
        out << "Blue-gray   = 996666" << "\n";
        out << "Light-blue  = FF6633" << "\n";
        out << "Lime-green  = AEFEA5" << "\n";
        out << "Seafoam-green = E1FEA9" << "\n";
        out << "Pale-blue-green = D9D9C0" << "\n";
        out << "Light-cyan  = FFFFB7" << "\n";
        out << "Deep-red    = 000080" << "\n";
        out << "Rose        = CC99FF" << "\n";
        out << "Medium-purple = FE7AC6" << "\n";
        out << "Purple      = FDCAB0" << "\n";
        out << "Orange-brown = 008080" << "\n";
        out << "Faded-rose  = E48FC3" << "\n";
        out << "Purple-gray = FFA4BB" << "\n";
        out << "Purple-blue = FDDAA8" << "\n";
        out << "Dull-chartreuse = 5FDDB9" << "\n";
        out << "Sage-green  = CCDFBE" << "\n";
        out << "Light-blue-purple = CBDEBD" << "\n";
        out << "Chartreuse  = C7FEE5" << "\n";
        out << "Pale-green  = 98FB98" << "\n";
        out << "Faded-blue-green = FDFEE4" << "\n";
        out << "Pale        = FDDAA8" << "\n";
        out << "Hot-pink    = B469FF" << "\n";
        out << "Magenta     = FF00FF" << "\n";
        out << "Light-purple = FFC1FF" << "\n";
        out << "Red-orange  = 5190FE" << "\n";
        out << "Pale-pink   = DC94FF" << "\n";
        out << "Purple-pink = FFABFF" << "\n";
        out << "Light-violet = FFE2FC" << "\n";
        out << "Amber       = 71EBF9" << "\n";
        out << "Tan         = 99CCFF" << "\n";
        out << "Faded-purple = D3E4FF" << "\n";
        out << "Pale-purple = FFF8F9" << "\n";
        out << "Pale-yellow = 99FFFF" << "\n";
        out << "Cream       = FAFFF5" << "\n\n";
        //##############################

        out << "[User Defined Font]" << "\n";
        out << "Height                                   = 0" << "\n";
        out << "Width                                    = 0" << "\n";
        out << "Escapement                               = 0" << "\n";
        out << "Orientation                              = 0" << "\n";
        out << "Weight                                   = 0" << "\n";
        out << "Italic                                   = 0" << "\n";
        out << "Underline                                = 0" << "\n";
        out << "StrikeOut                                = 0" << "\n";
        out << "CharSet                                  = 0" << "\n";
        out << "OutPrecision                             = 0" << "\n";
        out << "ClipPrecision                            = 0" << "\n";
        out << "Quality                                  = 0" << "\n";
        out << "PitchAndFamily                           = 0" << "\n";
        out << "FaceName                                 = Courier" << "\n\n"; // previous was "misc-fixed"

        out << "[3270 IND$FILE]" << "\n";
        out << "IND$FILE-Local-File-Name                 =" << "\n";
        out << "IND$FILE-Remote-File-Name                =" << "\n";
        out << "IND$FILE-Get-Additional-Options          =" << "\n";
        out << "IND$FILE-CMS-Command                     = IND$FILE" << "\n";
        out << "IND$FILE-TSO-Command                     = IND$FILE" << "\n";
        out << "IND$FILE-CICS-Command                    = IND$FILE" << "\n";
        out << "IND$FILE-System-Type                     = System-CMS" << "\n";
        out << "IND$FILE-Append-File                     = Off" << "\n";
        out << "IND$FILE-ASCII-Option                    = On" << "\n";
        out << "IND$FILE-CRLF-Option                     = On" << "\n";
        out << "IND$FILE-Local-Conversion                = On" << "\n";
        out << "IND$FILE-Record-Format                   = Default-Format" << "\n";
        out << "IND$FILE-Allocation-Units                = Tracks" << "\n";
        out << "IND$FILE-LRECL                           = 0" << "\n";
        out << "IND$FILE-Block-Size                      = 0" << "\n";
        out << "IND$FILE-Space1                          = 0" << "\n";
        out << "IND$FILE-Space2                          = 0" << "\n\n";


        /*
            0 Name VARCHAR(30) ,1 SessionType VARCHAR(30) ,2 EmulationType VARCHAR(30) ,3 EmulationSubtype VARCHAR(30) ,
            4 TerminalID VARCHAR(30) ,5 SecurityType VARCHAR(30) ,6 BaudRate VARCHAR(30) ,7 Parity VARCHAR(30) ,8 StopBits VARCHAR(30) ,
            9 FlowControl VARCHAR(30) ,10 PortNumber_COM VARCHAR(30) ,11 DialNumber VARCHAR(30) ,12 HostName VARCHAR(30) ,
            13 PortNumber_Telnet VARCHAR(30) ,14 KeepAliveTimeout INTEGER ,
                15 SSL_SSH_Subtype VARCHAR(30) ,
            16 DisplayResolution VARCHAR(30) , 17 ShowToolPad INTEGER ,18 ShowScrollBar INTEGER ,19 ShowPowerPad INTEGER ,20 ShowStatusPad INTEGER ,
            21 ShowMenuBar INTEGER ,
            22 ShowButtonBar INTEGER ,23 Online INTEGER ,24 Newline INTEGER ,25 BitDataCharacter INTEGER ,26 UserDefinedFunctions INTEGER ,
            27 UTF8 INTEGER ,28 UnscaledScreen INTEGER ,29 Columns INTEGER ,30 Row INTEGER ,31 PowerGUI INTEGER ,32 ShowFrame INTEGER ,
            33 DeleteBackspace INTEGER ,34 Backspace INTEGER ,35 WarningBell INTEGER ,36 MarginBell INTEGER ,37 AutorepeatChar INTEGER ,
            38 AutowrapChar INTEGER ,39 LocalEcho INTEGER ,40 UseNumlock INTEGER ,41 KeyClick INTEGER ,42 NumpadDecimalSendsComma INTEGER ,
            43 UseEmulatorAltKey INTEGER ,44 UseVTKeyboardMode INTEGER ,45 Block INTEGER ,46 Underline INTEGER ,47 Visible INTEGER ,
            48 Blinks INTEGER ,49 RightClickPaste INTEGER ,50 InsertChange INTEGER ,51 Vertical INTEGER ,52 Horizontal INTEGER ,
            53 Crosshair INTEGER ,
                54 CursorCouplingVertical INTEGER ,
                55 CursorCouplingPage INTEGER ,
            56 Smooth INTEGER ,57 Jump INTEGER ,58 ScrollSpeed VARCHAR(30) , 59 EnableSoftFonts INTEGER ,
                60 EnableUserDefinedFonts INTEGER ,
            61 DualSoftFontBuffer INTEGER ,62 PrintDevice VARCHAR(30) ,
            63 FileName VARCHAR(30) ,64 FileCreation VARCHAR(10) ,65 CRCRLF INTEGER ,66 PrintingFeed INTEGER ,
            67 PrintScreenDataConversion VARCHAR(30) ,68 SlavePrinterDataConversion VARCHAR(30) ,69 SlavePrinterJobDelimiter VARCHAR(30) ,
            70 DelayForPrintClosing VARCHAR(30) ,71 EnableBlinking INTEGER ,72 EnableUnderline INTEGER ,73 ANSI8ColorMode INTEGER ,
            74 UseColorFrame INTEGER ,75 ExitSession INTEGER ,76 HistoryBufferSize VARCHAR(10) ,77 InactivityTimeout INTEGER ,
            78 AddToDesktop INTEGER ,79 AddToMenu INTEGER ,80 AutoStart INTEGER ,81 AutoStartDelay VARCHAR(30) ,82 ConnectionEnding VARCHAR(30),
            83 ConnectionFailover VARCHAR(30) , Extra1 INTEGER , Extra2 INTEGER , Extra3 INTEGER , Extra4 VARCHAR(30) , Extra5 VARCHAR(30) )
          */

        out << "[Terminal Settings]" << "\n";
        if(terminal_details.at(2).contains("Special") || terminal_details.at(2).contains("General"))
            out << "Emulation-Type                           = " << terminal_details.at(3).toLower() << "\n";
        else
            out << "Emulation-Type                           = " << terminal_details.at(3) << "\n";   //vt52

        if(terminal_details.at(3).contains("3270"))
            out << "3270-Terminal-ID                           = " << terminal_details.at(4) << "\n";     //3278-2
        if(terminal_details.at(3).contains("5250"))
            out << "5250-Terminal-ID                           = " << terminal_details.at(4) << "\n";     //3477-FC
        else if(terminal_details.at(3).contains("HP"))
            out << "HP-Terminal-ID                           = " << terminal_details.at(4) << "\n";       //HP 700/96
        else if(terminal_details.at(3).contains("DG"))
            out << "DG-Terminal-ID                           = " << terminal_details.at(4).toLower() << "\n";
        else
            out << "Terminal-ID                              = " << terminal_details.at(4) << "\n";  //vt100

        out << "Application-Cursor-Keys                  = " << "Normal\n";     //Normal
        out << "Application-Keypad                       = " << "Numeric\n";    //Numeric
        out << "Keypad-Use-Numlock                       = " << map.key(terminal_details.at(40).toInt()) << "\n";        //Off
        out << "Window-Title                             = " << terminal_details.at(0) << "\n";   //prashant
        out << "Lock-Numpad                              = " << "Off\n";        //Off
        out << "Terminal-Online                          = " << map.key(terminal_details.at(23).toInt()) << "\n";          //On
        out << "Terminal-UDF-Locked                      = " << map.key(terminal_details.at(26).toInt()) << "\n";        //Off
        out << "Terminal-New-Line                        = " << map.key(terminal_details.at(24).toInt()) << "\n";        //Off
        out << "Use-NRC-Set                              = " << "Off\n";        //Off
        out << "Smooth-Scroll                            = " << map.key(terminal_details.at(56).toInt()) << "\n";        //Off
        out << "Autowrap-Characters                      = " << map.key(terminal_details.at(38).toInt()) << "\n";         //On
        out << "Reverse-Display-Colors                   = " << "Off\n";        //Off
        out << "Unscaled-Screen                          = " << map.key(terminal_details.at(28).toInt()) << "\n";        //Off
        if(terminal_details.at(18).toInt())
            out << "Show-History-Scrollbar                   = " << "On" << "\n";        //On
        else
            out << "Show-History-Scrollbar                   = " << "Off" << "\n";        //On

        out << "Underline-Cursor                         = " << map.key(terminal_details.at(46).toInt()) << "\n";        //Off
        out << "Visible-Cursor                           = " << map.key(terminal_details.at(47).toInt()) << "\n";         //On
        out << "Blink-Cursor                             = " << map.key(terminal_details.at(48).toInt()) << "\n";         //On
        out << "Vertical-Coupling                        = " << map.key(terminal_details.at(54).toInt()) << "\n";        //Off
        out << "Page-Coupling                            = " << map.key(terminal_details.at(55).toInt()) << "\n";         //On
        out << "Show-Control-Codes                       = " << "Off\n";        //Off
        out << "UPS-Set                                  = " << "ISO-Latin-1\n";           //ISO-Latin-1
        out << "NRC-Set                                  = " << "None\n";           //None
        out << "Scroll-Speed                             = " << terminal_details.at(58) << "\n";       //Page
        out << "Status-Line                              = " << "None\n";       //None
        out << "Backspace-Sends-Delete                   = " << map.key(terminal_details.at(34).toInt()) << "\n";        //Off
        out << "Auto-Repeat-Characters                   = " << map.key(terminal_details.at(37).toInt()) << "\n";         //On
        out << "Key-Click                                = " << map.key(terminal_details.at(41).toInt()) << "\n";        //Off
        out << "Local-Echo                               = " << map.key(terminal_details.at(39).toInt()) << "\n";        //Off
        out << "Margin-Bell                              = " << map.key(terminal_details.at(36).toInt()) << "\n";         //On
        out << "Warning-Bell                             = " << map.key(terminal_details.at(35).toInt()) << "\n";         //On
        if(terminal_details.at(85).toInt())
            out << "Auto-Answerback                          = " << "On\n";        //On
        else
            out << "Auto-Answerback                          = " << "Off\n";        //Off
        out << "Concealed-Answerback                     = " << "Off\n";        //Off
        out << "DG-Terminal-ID                           = " << "\n";       //d412
        out << "History-Save-Erase-Screen                = " << "Off\n";        //Off
        out << "Enable-Blink                             = " << map.key(terminal_details.at(71).toInt()) << "\n";         //On
        out << "Enable-Underline                         = " << map.key(terminal_details.at(72).toInt()) << "\n";         //On
        out << "Exit-On-Session-Termination              = " << map.key(terminal_details.at(75).toInt()) << "\n";        //Off
        out << "On-Exit-Confirm-Disconnect-Session       = Confirm" << "\n";    //Confirm
        out << "Use-8-Bit-Data-Characters                = " << map.key(terminal_details.at(25).toInt()) << "\n";         //On
        out << "Slave-Printer-Data-Coversion             = " << terminal_details.at(68) << "\n";       //None
        out << "Print-Screen-Data-Conversion             = " << terminal_details.at(67) << "\n";       //None
        out << "CR->CRLF                                 = " << map.key(terminal_details.at(65).toInt()) << "\n";         //On
        out << "Use-Form-Feed                            = " << map.key(terminal_details.at(66).toInt()) << "\n";         //On
        out << "Disable-System-Printer-Filter            = " << map.key(terminal_details.at(89).toInt()) << "\n";        //Bypass OS Printer
        out << "lp-program                               = " << terminal_details.at(90) << "\n"; // Printer Type : lpr or lp
        out << "printer-close-delay                      = " << terminal_details.at(70) << "\n";          //0
        out << "Copy-Right-To-Left                       = Off" << "\n";        //Off
        out << "Automatic-Copy                           = On" << "\n";         //On
        out << "Show-Buttons                             = " << ShowHideList.at(terminal_details.at(22).toInt()) << "\n";       //Show
        out << "Show-Status-Bar                          = " << ShowHideList.at(terminal_details.at(20).toInt()) << "\n";       //Show
        out << "Show-Toolbar                             = " << ShowHideList.at(terminal_details.at(17).toInt()) << "\n";       //Show
        //        }
        if(terminal_details.at(62).trimmed() == "Print Manager")
            out << "Print-Device                             = Print-Manager" << "\n";//Print-Manager
        else
            out << "Print-Device                             = " << terminal_details.at(62) << "\n";//Print-Manager
        out << "Print-File-Append                        = " << terminal_details.at(64) << "\n";  //Overwrite
        out << "Print-Graphics-As-Text                   = " << map.key(terminal_details.at(88).toInt()) << "\n";        //Print Line Graphics as Text
        out << "Use-Emulator-Alt-Keys                    = " << map.key(terminal_details.at(43).toInt()) << "\n";        //Off
        out << "VT-Keyboard-Type                         = " << map.key(terminal_details.at(44).toInt()) << "\n";        //Off
        out << "Slave-Printer-Job-Delimiter              = " << terminal_details.at(69) << "\n";         //-1
        out << "Use-3270-New-Code                        = On" << "\n";         //On
        out << "Hebrew-3270-dollar-5B                    = Off" << "\n";        //Off
        out << "Show-Power-Pad                            = " << map.key(terminal_details.at(19).toInt()) << "\n";        //Off
        out << "Display-Power-GUI                        = " << map.key(terminal_details.at(31).toInt()) << "\n";        //Off
        out << "Display-Background-BMP                   = Off" << "\n";        //Off
        out << "Use-Shift-Lock                           = Off" << "\n";        //Off
        out << "Save-Lock-State                          = Off" << "\n";        //Off
        out << "Lock-3270-Numeric-Fields                 = On" << "\n";         //On
        if(terminal_details.at(51).toInt())
            out << "Cursor-Ruler-Type                        = " << terminal_details.at(51) << "-Off" << "\n";//Crosshair-Off
        else if(terminal_details.at(52).toInt())
            out << "Cursor-Ruler-Type                        = " << terminal_details.at(52) << "-Off" << "\n";
        else if(terminal_details.at(53).toInt())
            out << "Cursor-Ruler-Type                        = " << terminal_details.at(53) << "-Off" << "\n";
        out << "Show-Response-Time                       = Off" << "\n";        //Off
        out << "File-Transfer-Host-Data-Type             = Host" << "\n";       //Host
        out << "File-Transfer-PC-Data-Type               = Windows" << "\n";    //Windows
        out << "File-Transfer-Convert-Data               = Off" << "\n";        //Off
        out << "Colors                                   = Auto" << "\n";       //Auto

        if(!terminal_details.at(84).isEmpty())
            out << "Answerback-Message                       = " << terminal_details.at(84) << "\n";  //PowerTerm
        else
            out << "Answerback-Message                       = PowerTerm" << "\n";  //PowerTerm

        out << "Print-File-Name                          = " << terminal_details.at(63) << "\n";
        out << "Print-Spool-Name                         = " << "\n";
        out << "Enable-Alternate-Size                    = Off" << "\n";        //Off
        out << "Alternate-Rows-Per-Screen                = " << terminal_details.at(30) << "\n";         //24
        out << "Alternate-Columns-Per-Screen             = " << terminal_details.at(29) << "\n";         //80
        out << "Enable-Soft-Fonts                        = " << map.key(terminal_details.at(59).toInt()) << "\n";         //On
        out << "Dual-Soft-Fonts-Buffer                   = " << map.key(terminal_details.at(61).toInt()) << "\n";         //On
        out << "Enable-Typeahead                         = On" << "\n";         //On
        out << "Show-Frame                               = " << map.key(terminal_details.at(32).toInt()) << "\n";        //Off
        out << "Columns-Per-Screen                       = " << terminal_details.at(29) << "\n";         //80
        out << "Rows-Per-Screen                          = " << terminal_details.at(30) << "\n";         //24
        out << "Auto-Reconnect                           = Off" << "\n";        //Off
        out << "File-Open-Connection-Type                = Auto-Connect" << "\n";    //Show-Connect-Dialog-Box
        out << "On-Exit-Save-Terminal-Setup              = On" << "\n";         //On
        out << "On-Exit-Confirm-Save-Terminal-Setup      = Off" << "\n";        //Off
        out << "On-Exit-Save-Window-Size                 = On" << "\n";        //Off
        out << "User-Interface-Language                  = None" << "\n";       //None
        out << "3270-Character-Set                       = 037" << "\n";        //037
        out << "5250-Code-Page                           = 037" << "\n";        //037
        out << "History-Buffer-Size                      = " << terminal_details.at(76) << "\n";       //200K
        out << "Backspace-Deletes                        = " << map.key(terminal_details.at(33).toInt()) << "\n";        //Off
        out << "Enable-User-Defined-Font                 = " << map.key(terminal_details.at(60).toInt()) << "\n";        //Off
        out << "Modem-Name                               = " << "\n";
        out << "HLLAPI-Short-Name                        = " << "\n";
        out << "HLLAPI-Long-Name                         = " << "\n";
        out << "Window-Title                             = " << terminal_details.at(0) << "\n";
        out << "PC-Code-Page                             = ISO-Latin-1" << "\n";//ISO-Latin-1
        out << "PC-CP-8bit-Controls                      = 0x9B" << "\n";       //0x9B
        out << "HP-return-equ-enter                      = Off" << "\n";        //Off
        out << "HP-Function-Keys-Number-mode             = 12" << "\n";          //0
        out << "HP-Upper-Case-Default                    = Off" << "\n";        //Off
        out << "HP-Answerback-Message                    = PowerTerm" << "\n"; ///WWW.ERICOM.COM
        out << "Numpad-Decimal-Sends-Comma               = " << map.key(terminal_details.at(42).toInt()) << "\n";        //Off
        out << "Printer-Type                             = Other Printer" << "\n";  //Other Printer
        out << "Printer-Font                             = 11" << "\n";         //11
        out << "Print-Font-Weight                        = 600" << "\n";        //600
        out << "Printer-Use-Host-Font                    = Ignore" << "\n";     //Ignore
        out << "Printer-Drawer-1                         = Default" << "\n";    //Default
        out << "Printer-Drawer-2                         = Default" << "\n";    //Default
        out << "Printer-Envelope-Hopper                  = Default" << "\n";    //Default
        out << "Printer-Supports-CP899                   = Off" << "\n";        //Off
        out << "Printer-FF                               = AUTOCUT" << "\n";    //AUTOCUT
        out << "5250-Printer-Host-Print-Transform        = Off" << "\n";        //Off
        out << "5250-Printer-Custom-Obj                  = QWPDEFAULT" << "\n"; //QWPDEFAULT
        out << "5250-Printer-Custom-Obj-Lib              = *LIBL" << "\n";      //*LIBL
        out << "Printer-CPI                              = 10" << "\n";         //10
        out << "Printer-Use-Host-CPI                     = Host" << "\n";       //Host
        out << "Printer-LPI                              = 6" << "\n";          //6
        out << "Printer-Use-Host-LPI                     = Host" << "\n";       //Host
        out << "Printer-Cols                             = 0" << "\n";          //0
        out << "Printer-Use-Host-Cols                    = On" << "\n";         //On
        out << "Printer-Rows                             = 0" << "\n";          //0
        out << "Printer-Use-Host-Rows                    = On" << "\n";         //On
        out << "3270-Non-SNA-System-Wait                 = Off" << "\n";        //Off
        out << "Page-Orientation                         = Ignore" << "\n";     //Ignore
        out << "End-Of-Medium                            = CR" << "\n";         //CR
        out << "Show-Column-Mark                         = On" << "\n";         //On
        out << "Cursur-Blink-Rate                        = 5" << "\n";          //5
        out << "Exit-Emulation-Timeout                   = " << terminal_details.at(77).toInt() << "\n";          //0
        out << "Automatic-Reset-Key                      = Off" << "\n";        //Off
        out << "Reset-Key-Clear-Capslock                 = On" << "\n";         //On
        out << "DDE-Timeout                              = 3" << "\n";          //3
        out << "RTF-Copy                                 = Off" << "\n";        //Off
        out << "Right-Click-Paste                        = " << map.key(terminal_details.at(49).toInt()) << "\n";         //On
        out << "Change-Insert-Cursor                     = " << map.key(terminal_details.at(50).toInt()) << "\n";        //Off
        out << "Wyse-MultiPage                           = On" << "\n";         //On
        out << "Light-Pen-Blink                          = Off" << "\n";        //Off
        out << "BackGround-Blink                         = Off" << "\n";        //Off
        out << "Force-Field-Exit                         = On" << "\n";         //On
        out << "Invisible-Field-Show                     = On" << "\n";         //On
        out << "Limit-Font-Size                          = On" << "\n";         //On
        out << "Keep-Key-Mode                            = Off" << "\n";        //Off
        out << "3270-Process-Nulls                       = Off" << "\n";        //Off
        out << "Screen-Copy-BW                           = Off" << "\n";        //Off
        out << "Silent-Screen-Copy                       = Off" << "\n";        //Off
        out << "Print-Header-Text                        = " << "\n";
        out << "Menu-Hotspots                            = On" << "\n";         //On
        out << "Option-Hotspots                          = On" << "\n";         //On
        out << "URL-Hotspots                             = Off" << "\n";        //Off
        out << "Mail-Hotspots                            = Off" << "\n";        //Off
        out << "VT-Hotspots                              = On" << "\n";         //On
        out << "Print-Margin-Left                        = 0" << "\n";          //0
        out << "Print-Margin-Right                       = 0" << "\n";          //0
        out << "Print-Margin-Top                         = 0" << "\n";          //0
        out << "Print-Margin-Bottom                      = 0" << "\n";          //0
        out << "Paper-Size                               = A4" << "\n";         //A4
        out << "8-Color-Ansi                             = " << map.key(terminal_details.at(73).toInt()) << "\n";        //Off
        out << "Use-Frame-Color                          = " << map.key(terminal_details.at(74).toInt()) << "\n";        //Off

        //############################
        out << "UTF-8                                    = Off" << "\n";
        out << "Screen-Copy-BW                           = Off" << "\n";
        out << "show-cols-toolbar-items                  = On" << "\n";
        out << "show-sessions-toolbar                    = On" << "\n";
        out << "show-code-toolbar-items                  = On" << "\n";
        out << "Silent-Screen-Copy                       = Off" << "\n";
        out << "Print-Header-Text                        = " << "\n";
        out << "Menu-Hotspots                            = On" << "\n";
        out << "Option-Hotspots                          = On" << "\n";
        out << "URL-Hotspots                             = Off" << "\n";
        out << "Mail-Hotspots                            = Off" << "\n";
        out << "FKey-Hotspots                            = Off" << "\n";
        out << "use_mouse_driver                         = On" << "\n";
        out << "Display-CR-as-CRLF                       = Off" << "\n";
        out << "IBM3151-Terminal-ID                      = IBM3151-11" << "\n";
        out << "Send-Act-As-Send-Line                    = Off" << "\n";
        out << "Enter-Act-As-Send                        = Off" << "\n";
        out << "Recv-File-Overwrite                      = Ask" << "\n";
        out << "Autoprint-FF                             = On" << "\n";
        out << "Slave-Print-CodePage-Type                = kbd" << "\n";
        out << "Blink-DBCS-Chars                         = On" << "\n";
        out << "Exact-History                            = Off" << "\n";
        out << "SSH1-Password_Retry                      = Off" << "\n";
        out << "SSH2-Password_Retry                      = Off" << "\n";
        out << "Ssl-Certificate-Settings                 = Accept-All" << "\n";
        out << "Ssl-Certificate-Path                     = ./certificates/" << "\n";
        //############################

        file.close();
        file.setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::WriteUser | QFile::ExeUser | QFile::ReadGroup | QFile::WriteGroup | QFile::ExeGroup | QFile::ReadOther | QFile::WriteOther | QFile::ExeOther);
        sync();
    }
    qDebug() << "LCore:WritePowerTermPTS_File::3:: rteurn. ";
    return;
}

// cppcheck-suppress unusedFunction
void LCore::WritePowerTermPTC_File( QStringList terminal_details)
{
    qDebug() << "LCore:WritePowerTermPTC_File::3:: Start. ";

    QString filename = QString(POWERTERM_CONFIG_DIR) + terminal_details.at(0) + ".ptc";
    QFile file(filename);
    if (file.open(QIODevice::WriteOnly | QIODevice::Text ))
    {
        QTextStream out(&file);
        QString sessionType = terminal_details.at(1);
        out << "\n["+sessionType.toUpper()+" ("+terminal_details.at(0)+")]" << "\n";
        out << "comm-type = " << sessionType.toLower() << "\n";
        out << "terminal-type = " << terminal_details.at(3).toLower() << "\n";
        out << "terminal-model = " << terminal_details.at(4).toLower() << "\n";
        out << "set-window-size = true" << "\n";

        if(sessionType.contains("COM"))
        {
            out << "baud-rate = " << terminal_details.at(6) << "\n";
            out << "parity = " << terminal_details.at(7) << "\n";
            out << "flow-control = " << terminal_details.at(8).toLower() << "\n";
            out << "stop-bits = " << terminal_details.at(9) << "\n";
            out << "port-number = " << terminal_details.at(10) << "\n";
            out << "phone-number = " << terminal_details.at(11) << "\n";
        }
        else if(sessionType.contains("Telnet"))
        {
            QString securityType = terminal_details.at(5);
            out << "host-name = " << terminal_details.at(12) << "\n";
            out << "terminal-id = " << "" << "\n"; //terminal_details.at(0) removed because terminal is not same as connection name
            out << "port-number = " << terminal_details.at(13) << "\n";
            out << "keep-alive-timeout = " << terminal_details.at(14) << "\n";
            out << "security-type = " << securityType.toLower() << "\n";
            if(securityType.contains("ssl"))
            {
                out << "ssl-type = ssl2" << "\n";
                out << "ssl-show-certificate = false" << "\n";
            }
            if(securityType.contains("ssh"))
            {
                out << "ssh-type = ssh1" << "\n";
                out << "ssh-show-info = false" << "\n";
                out << "ssh-show-login-dialog = false" << "\n";
                out << "ssh-cipher = Blowfish" << "\n";
                out << "ssh-enable-compression = false" << "\n";
                out << "ssh-enable-x11 = false" << "\n";
                out << "ssh-attempt-tis = false" << "\n";
                out << "ssh-allow-agent = false" << "\n";
            }
        }

        file.close();
        file.setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::WriteUser | QFile::ExeUser | QFile::ReadGroup | QFile::WriteGroup | QFile::ExeGroup | QFile::ReadOther | QFile::WriteOther | QFile::ExeOther);
        sync();
    }

    qDebug() << "LCore:WritePowerTermPTC_File::3:: return. ";
    return;
}

// cppcheck-suppress unusedFunction
void LCore::fillCloudDesktopAllowLicenceEntry()
{
    QString strFDMFile;
    if(qgetenv("BOARDARCH") == "via-arm")
        strFDMFile = QString(FDMCLIENT_DETAILSARM);
    else
        strFDMFile = QString(FDMCLIENT_DETAILS);

    if(QFile::exists(strFDMFile))   //Restore from Server + Manual Restore
    {
        QStringList strLicenseData; // For Cloud Desktop License Check

        QFile fdmData(strFDMFile);
        if(fdmData.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&fdmData);
            while (!in.atEnd())
            {
                QString line = in.readLine();
                if(line.startsWith("AllowLicense") || line.startsWith("EncryptedMac"))
                {
                    strLicenseData << line.section(" =", 1, -1);
                }
            }
            fdmData.close();
        }

        QString strMacId;
        foreach(const QNetworkInterface& netInterface, QNetworkInterface::allInterfaces())
        {
            if(!(netInterface.flags() & QNetworkInterface::IsLoopBack) && (netInterface.flags() & QNetworkInterface::IsUp))
            {
                strMacId = netInterface.hardwareAddress();
                break;
            }
        }

        if(strMacId.contains(":"))
        {
            strMacId.replace(":","-");
        }

        QString strColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(200)";
        QString strColumnValues;
        strMacId = getUSBSerialOrMac();

        if(strLicenseData.count()
                && strLicenseData.at(0).contains("1")
                && encryptDecryptString(strLicenseData.at(1), 1) == strMacId)
        {
            strColumnValues = "'AllowLicense', '"+QString("1,").append(strLicenseData.at(1))+"'";
        }
        else
        {
            strColumnValues = "'AllowLicense', '"+QString("0")+"'";
        }

        writeTable(QString("SysConf"), strColumnType , strColumnValues , "AppendNew");
    }
}

bool LCore::saveVMSSettingsFromFDMFile()
{
    bool bStatus = false;

    QString strFDMFile;
    if(qgetenv("BOARDARCH") == "via-arm")
    {
        strFDMFile = QString(FDMCLIENT_DETAILSARM);
    }
    else
    {
        strFDMFile = QString(FDMCLIENT_DETAILS);
    }

    if(QFile::exists(strFDMFile))   //Restore from Server + Manual Restore
    {
        bStatus = true;

        QStringList strListClientData;
        QStringList strLicenseData; // For Cloud Desktop License Check

        QFile fdmData(strFDMFile);
        if(fdmData.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&fdmData);
            while (!in.atEnd())
            {
                QString line = in.readLine();
                if(line.startsWith("AllowLicense") || line.startsWith("EncryptedMac"))
                {
                    strLicenseData << line.section("=",1, -1);
                }
                else
                {
                    strListClientData << line.section("=", 1, 1);
                }
            }
            fdmData.close();
        }
//        QString strMacId;
//        foreach(QNetworkInterface netInterface, QNetworkInterface::allInterfaces())
//        {
//            if(!(netInterface.flags() & QNetworkInterface::IsLoopBack) && (netInterface.flags() & QNetworkInterface::IsUp))
//            {
//                strMacId = netInterface.hardwareAddress();
//                break;
//            }
//        }

        QString strColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(200)";
        QString strColumnValues;

        const char* cunicode = "Æ";
        QString strToken = QString::fromUtf8(cunicode); //("1Æ1Æ1Æ");
        QString strSpecialChar = "1" + strToken + "1" + strToken + "1" + strToken;

//        QString GroupName = strSpecialChar + "DEFAULT";

        if(strLicenseData.count() && strLicenseData.at(0).contains("1"))
        {
            strColumnValues = "'AllowLicense', '"+QString("1,").append(strLicenseData.at(1))+"'";
        }
        else
        {
            strColumnValues = "'AllowLicense', '"+QString("0")+"'";
        }

        writeTable(QString("SysConf"), strColumnType , strColumnValues , "AppendNew");

        QString strGroupName = strSpecialChar + QString(strListClientData.at(4));

        strFusionmsHBeats = strListClientData.at(5);

        QString columnType = "DHCPParams INTEGER, CurrentServerIP VARCHAR(20), OldServerIP VARCHAR(20), PortNo INTEGER,"
                             "GroupName VARCHAR(100), pollInterval INTEGER, CommunicationType VARCHAR(50), WebServiceName VARCHAR(20), ClientStatus INTEGER, CACertificate VARCHAR(200)" ;

        bool bIsTCS;
        bIsTCS = false;
        QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
        if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
            bIsTCS = true;

        QString columnValues = "'"+QString(strListClientData.at(0))+"', '"+QString(strListClientData.at(1))+"', '"+QString(strListClientData.at(2))+"', '"+QString(strListClientData.at(3))+"', '"+strGroupName+"', '"+QString(strListClientData.at(5))+"', '"+QString(strListClientData.at(6))+"', '"+QString(strListClientData.at(7))+"', '"+QString(strListClientData.at(8))+"', '"+QString(strListClientData.at(9))+"'";
        writeTable("ClientSettings", columnType, columnValues, "");
        ::usleep(10000);

        QString columnType1 = "HostsIP VARCHAR(50),HostsName VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";
        if((strListClientData.count() > 11) && (strListClientData.at(1) != "unifiedx"))
        {
            QString columnValues1 = "'"+QString(strListClientData.at(10))+"','"+QString(strListClientData.at(11))+"',0, 0, 0, '', '' ";
            writeTable( "HostsSettings", columnType1 , columnValues1 , "");
            QStringList strlistWriteFile;
            strlistWriteFile<<QString(strListClientData.at(10))<<QString(strListClientData.at(11));
            writeToFile("/etc/hosts",strlistWriteFile);
        }

        if(bIsTCS == true)
        {
            QString columnValues1 = "'"+QString("10.249.235.144")+"','',0, 0, 0, '', '' ";
            writeTable( "HostsSettings", columnType1 , columnValues1 , "");
            QStringList strlistWriteFile;
            strlistWriteFile<<QString("10.249.235.144");
            writeToFile("/etc/hosts",strlistWriteFile);
        }

        QStringList clientSettings = readTable(QString(CLIENTSETTINGS), "");
        if(clientSettings.isEmpty())
        {
            strGroupName = strSpecialChar + "DEFAULT";
            QString columnValuesn = "1, '0.0.0.0', '', 443, '" + strGroupName + "', 60, 'HTTPS', 'VMSService', 1, '' ";
            updateVmsLogsFile("HeartBeatInterval","60");
            writeTable(QString(CLIENTSETTINGS), columnType, columnValuesn, "");
        }

        int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);
        if(status != 0)
            mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

        if(qgetenv("BOARDARCH") == "via-arm")
        {
            QFile::remove(QString(FDMCLIENT_DETAILSARM));
        }
        else
        {
            if(QFile::exists("/sda1/data/.ltmdeleteAllGroupSettings") == false)
            {
                system("touch /data/.callvmsrestore");
            }

            QFile::remove(QString(FDMCLIENT_DETAILS));
            system("rm -rf /sda1/data/FDMClientDetails");
        }

        if(status != 0)
            mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
    }

    ::sync();

    return bStatus;
}

void LCore::saveVMSSettingsFromDHCPParams()
{
    QStringList dhcpparams = readTable("DHCPParams", "");

    QStringList clientSettings = readTable(QString(CLIENTSETTINGS), "");
    if(!clientSettings.isEmpty())
    {
        const char* cunicode = "Æ";
        QString strToken = QString::fromUtf8(cunicode); //("1Æ1Æ1Æ");
        QString strSpecialChar = "1" + strToken + "1" + strToken + "1" + strToken;

        int nCheckDHCP = clientSettings.at(0).toInt();
        QString strCurrentIP = clientSettings.at(1);
        QString strOldServerIP = clientSettings.at(2);
        QString strPortNo = clientSettings.at(3);
        QString strCommunicationType = clientSettings.at(6);
        QString strFilename = clientSettings.at(9);
        QString strNewCertificateName = QString("/usr/local/share/ca-certificates/") + "cert-https-" + strCurrentIP.toLower() + ".cer";

        QList<QSslCertificate> listCertificates = QSslCertificate::fromPath(strNewCertificateName);

        if(((nCheckDHCP == 1) && (strCommunicationType == "HTTPS")) || ((nCheckDHCP == 2) && (strCommunicationType == "HTTPS"))) //Fusionms-HTTPS or DHCP-HTTPS
        {
            if(listCertificates.count() == 0 || strFilename.isEmpty())
            {
                strFilename = getCertificate("https", strCurrentIP, strPortNo, strFilename);
                updateTable("ClientSettings", QStringList() << "CACertificate='"+strFilename+"'", "");
            }
        }
        else if((nCheckDHCP == 2) && dhcpparams.count())
        {
            QString strDHCPServerIP = QString(dhcpparams.at(0)).remove("\"");
            QString strDHCPPortNo = QString(dhcpparams.at(5)).remove("\"");
            QString strDHCPPollInterval = QString(dhcpparams.at(2)).remove("\"");
            QString strDHCPCommunicationType = QString(dhcpparams.at(3)).remove("\"");

            if(strDHCPCommunicationType.toLower() == "https")
                strFilename = getCertificate(strDHCPCommunicationType.toLower(), strDHCPServerIP, strDHCPPortNo, strFilename);

            QString strDHCPDefault = strSpecialChar + QString(dhcpparams.at(1)).remove("\"");

            QStringList strlistUpdated;
            strlistUpdated << "DHCPParams=1" << "CurrentServerIP='" +strDHCPServerIP+ "'" << "OldServerIP='" +strOldServerIP+ "'" << "PortNo=" +strDHCPPortNo << "GroupName='" +strDHCPDefault+ "'" << "pollInterval=" +strDHCPPollInterval << "CommunicationType='" +strDHCPCommunicationType+ "'" << "CACertificate='" +strFilename+ "'";
            updateTable(QString(CLIENTSETTINGS), strlistUpdated, "");
            updateVmsLogsFile("HeartBeatInterval",strDHCPPollInterval);

        }

        bool bIsTCS;
        bIsTCS = false;
        QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
        if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
            bIsTCS = true;

        if(bIsTCS == true)
        {
            QString columnType1 = "HostsIP VARCHAR(50),HostsName VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";
            QString columnValues1 = "'"+QString("10.249.235.144")+"','',0, 0, 0, '', '' ";
            writeTable( "HostsSettings", columnType1 , columnValues1 , "");
            QStringList strlistWriteFile;
            strlistWriteFile<<QString("10.249.235.144");
            writeToFile("/etc/hosts",strlistWriteFile);
        }

        QStringList strListNrmlRBootChk = readTable("SysConf", "Property='Bootup'", "Value");

        if(!strListNrmlRBootChk.isEmpty())
        {
            if(strListNrmlRBootChk.at(0) == "1")
            {
                QProcess::startDetached("/usr/os-bin/VMSClient ClientScan");
            }
        }
    }
    else
    {

        QString columnType = "DHCPParams INTEGER, CurrentServerIP VARCHAR(20), OldServerIP VARCHAR(20), PortNo INTEGER,"
                             "GroupName VARCHAR(100), pollInterval INTEGER, CommunicationType VARCHAR(50), WebServiceName VARCHAR(20), ClientStatus INTEGER, CACertificate VARCHAR(200)";

        const char* cunicode = "Æ";
        QString strToken = QString::fromUtf8(cunicode); //("1Æ1Æ1Æ");
        QString strSpecialChar = "1" + strToken + "1" + strToken + "1" + strToken;
        QString strGroupName = strSpecialChar + "DEFAULT";

        QStringList clientSettingsn = readTable(QString(CLIENTSETTINGS), "");
        bool bIsTCS;
        bIsTCS = false;
        QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
        if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
            bIsTCS = true;

        if(bIsTCS) // set TCS IP and port Number by Default in database ( IP: 10.249.235.144, Heart Beat Interval: 300 sec)
        {
            QString strGroupNameN = strSpecialChar + "DEFAULT";
            QString columnclientsettingsValues = "1, '10.249.235.144', '', 443, '" + strGroupNameN + "', 300, 'HTTPS', 'VMSService', 1, '' ";

            writeTable(QString(CLIENTSETTINGS), columnType, columnclientsettingsValues, "");
        }
        if(clientSettingsn.isEmpty())
        {
            QString columnValues = "1, '0.0.0.0', '', 443, '" + strGroupName + "', 60, 'HTTPS', 'VMSService', 1, '' ";
            writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
            updateVmsLogsFile("HeartBeatInterval","60");
        }
    }
}

// cppcheck-suppress unusedFunction
void LCore::setDefaultSettingsToVMS()
{
    qDebug() << "LCore:setDefaultSettingsToVMS::3:: Start. ";

    bool bStatus = saveVMSSettingsFromFDMFile();

    if(bStatus == false) //after reboot
    {
        saveVMSSettingsFromDHCPParams();
    }
    qDebug() << "LCore:setDefaultSettingsToVMS::3:: End. ";
}

QString LCore::getCertificate(QString strCommunicationType, QString strCurrentServerIP, QString strPortNo, QString strFilename)
{
    qDebug() << "LCore:getCertificate::3:: Start. ";

    if(strCurrentServerIP == "0.0.0.0")
    {
        return QString();
    }

    QString strFinalCertificate;

    if(strCommunicationType.toLower() == "https")  /// For ME Server
    {
        QString FileName = "cacert.crt";
        QDir dir(VMSDOWNLOADPATH);
        dir.mkpath(VMSDOWNLOADPATH);
        QDir::setCurrent(QString(VMSDOWNLOADPATH));

        QString strCmd = "wget --no-check-certificate https://"+strCurrentServerIP+":"+strPortNo+"/HTMLVNC/websockify/"+FileName+" -O "+FileName+" --timeout=13";

        int nStatus1 = QProcess::execute(strCmd);
        qDebug() << "LCore:getCertificate::3:: Download Status = " << nStatus1<<" strcmd = "<<strCmd << " :: " << QFile::exists(QString(VMSDOWNLOADPATH)+FileName);

        if(QFile::exists(QString(VMSDOWNLOADPATH)+FileName) && !nStatus1)
        {
            QString FileName1 = "cacert.cer";
            QFile::remove(QString(CERTIFICATEPATH)+"/"+FileName1);

            strFinalCertificate = "cert-https-" + strCurrentServerIP.toLower() + ".cer";
            QString str2 = QString("mv %1 %2").arg(QString(CERTIFICATEPATH)+"/"+FileName1).arg(QString(CERTIFICATEPATH)+"/"+strFinalCertificate);
            system(str2.toLatin1());
            ::usleep(10000);
            updateTable("ClientSettings", QStringList() << "CACertificate='cert-https-" + strCurrentServerIP + ".cer'", "");

            foreach(const QFileInfo& info, dir.entryInfoList(QDir::Files))
                QFile::remove(QString(VMSDOWNLOADPATH)+info.fileName());

            dir.remove(QString(VMSDOWNLOADPATH));

            qDebug() << "LCore:getCertificate::3:: getCertificate 2= " << strFinalCertificate;
            //            return strFinalCertificate;
        }
        else
        {
            QDir::setCurrent(QString("/usr/os-bin"));
            QString strServerIP;
            strServerIP = QString("%1://%2:%3").arg(strCommunicationType).arg(strCurrentServerIP).arg(strPortNo);   //example=https://fusion:443
            QString strError = downloadCertificate(strServerIP, strFilename);
            if(strError.isEmpty() && !strFilename.isEmpty())
            {
                strFilename = QFileInfo(strFilename).fileName();
                qDebug() << "LCore:getCertificate::3:: LCORE-name : " << strFilename;
                QProcess::execute(QString(UPDATECERTCMD), QStringList() << strFilename << QString("add"));
                strFinalCertificate = strFilename;

                qDebug() << "LCore:getCertificate::3:: getCertificate 3= " << strFinalCertificate;
                //                return strFinalCertificate;
            }
        }
    }
    qDebug() << "LCore:getCertificate::3:: End. ";
    return strFinalCertificate;
}

QString LCore::downloadCertificate(QString strUrl, QString &strReturnFileName)
{
    qDebug() << "LCore:downloadCertificate::3:: Start. ";
    qDebug() << "LCore:downloadCertificate::3:: args : strurl = " << strUrl;

    QDir::setCurrent(QString("/usr/os-bin"));
    QString errorString;

    QUrl url(strUrl);
    QString strHost = url.host();
    if(!strUrl.startsWith("file://") && strHost.isEmpty())
        return tr("Please provide host in URL");

    int nPort = url.port();
    QString scheme = url.scheme().toLower();

    QString strPort = (nPort < 0)?((scheme == QString("ftps"))?QString("21"):QString("443")):QString::number(nPort);
    QString newURL = strHost + QString(":") + strPort;

    QString processname = QString(OPENSSLCMD);
    QStringList args;
    args << QString("s_client") << QString("-showcerts") << QString("-connect") << newURL;
    if(scheme == QString("ftps"))
        args << QString("-starttls") << QString("ftp");

    QProcess *process = new QProcess;
    process->start(processname, args);
    process->write("QUIT\n"); // after downloading cerificate openssl hangs till timeout.. so sending QUIT to process
    process->waitForFinished(-1);

    if(!process->exitCode())
    {
        QString fileName = QString("/tmp/cert-") + scheme + QString("-") + strHost + QString(".cer");
        strReturnFileName = fileName;

        QFile file(fileName);
        if(file.open(QIODevice::WriteOnly))
        {
            QTextStream out(&file);

            bool bFound = false;

            QStringList strlist = QString(process->readAllStandardOutput()).split('\n');
            for(int i = 0; i < strlist.count(); i++)
            {
                QString line = strlist.at(i);
                if(line.contains("BEGIN CERTIFICATE"))
                    bFound = true;

                if(bFound)
                    out << line << "\n";

                if(line.contains("END CERTIFICATE"))
                    bFound = false;
            }
            file.close();
        }

        process->close();
    }
    else
        errorString = process->readAllStandardError();

    process->deleteLater();

    qDebug() << "LCore:downloadCertificate::3:: return errorstring = " << errorString;
    return errorString;
}

// cppcheck-suppress unusedFunction
QString LCore::ExecuteFirewallSettings()
{
    qDebug() << "LCore:ExecuteFirewallSettings::3:: Start. ";

    if(!checkLink("iptables"))
        return QString("");

    QList<QStringList> listCompleteValues;

    listCompleteValues = readCompleteTable("FirewallSettings", "");

    //-------------- Below code is commented as ADS loopup output error occoured "CLDAP error" --------------------------------------------------
    /*
    if(!getOSDetails(QString(SDA1OSBUILD)).contains("TCS") && !getOSDetails(QString(SDA1OSBUILD)).contains("IPCA")) // Done by manish with reference to mail by Mr. Bhagwan
    {
        /// To prevent from ddos attack  this is rule is added in iptables every time R&D by Pratik Najare
        QProcess::execute("iptables -A INPUT -p udp --sport 53 -m length --length 511:65535 -j DROP");
    }

    /// To prevent from ddos attack  this is rule is added in iptables every time R&D by Pratik Najare
    //QProcess::execute("iptables -A INPUT -p udp --sport 53 -m length --length 511:65535 -j DROP");
    */

    if(listCompleteValues.count() == 0)
        return QString("");

    QString strError;
    bool bCheckPort = false;
    for(int i = 0; i < listCompleteValues.count(); i++)
    {

        QStringList strlistport;
        strlistport.append(listCompleteValues[i][3].split(","));

        QProcess *process2 = new QProcess;
        QString cmd = "iptables -A ";
        if(listCompleteValues[i][0] == "2" && listCompleteValues[i][11] == "0") // BlockRule == 2   //Blacklisting
        {
            if( listCompleteValues[i][6] == "2" || listCompleteValues[i][6] == "'2'")
            {
                qDebug() << "LCore:ExecuteFirewallSettings::3:: for both ";
                strError = ExcuteFirewallSettingsForBoth(cmd);
            }
            else
            {
                qDebug() << "LCore:ExecuteFirewallSettings::3:: for incoming and outgoing";
                if( listCompleteValues[i][6] == "1")
                    cmd.append("INPUT");
                else
                    cmd.append("OUTPUT");
                cmd.append(" -p ").append(listCompleteValues[i][5]);

                if(listCompleteValues[i][9] != "URLs") // no service
                {
                    qDebug() << "LCore:ExecuteFirewallSettings::3:: inside no service option";
                    if(listCompleteValues[i][2].length() == 1 && listCompleteValues[i][3].contains("~"))  // no ip  & range of port
                    {
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: no ip, range of port ";
                        cmd.append(" --dport ").append(listCompleteValues[i][3].section("~",0,0)).append(":").append(listCompleteValues[i][3].section(("~"),1,1));
                    }
                    else if(listCompleteValues[i][2].length() == 1 && (!listCompleteValues[i][3].contains("~")) )
                    {
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: no ip, single port"<<listCompleteValues[i][2]<<listCompleteValues[i][2].length();
                        cmd.append("  -m multiport --dports  ").append("PORT");
                        bCheckPort = true;
                    }
                    else if(listCompleteValues[i][3].simplified().isEmpty() && !(listCompleteValues[i][2].contains("~")) ) // no port single ip
                    {
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: no port, single ip";
                        if(listCompleteValues[i][6].contains("'0'") || listCompleteValues[i][6].contains("0")) // OUTPUT
                            cmd.append(" -d ").append(listCompleteValues[i][2]);
                        else
                            cmd.append(" -s ").append(listCompleteValues[i][2]);
                    }
                    else if ( listCompleteValues[i][3].simplified().isEmpty() && listCompleteValues[i][2].contains("~")) // no port range of  ip
                    {
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: no port and range of ip";

                        if(listCompleteValues[i][6].contains("'1'") || listCompleteValues[i][6].contains("1")) // INPUT
                            cmd.append(" -m iprange --src-range ").append(listCompleteValues[i][2].section("~",0,0)).append("-").append(listCompleteValues[i][2].section("~",1,1));
                        else
                            cmd.append(" -m iprange --dst-range ").append(listCompleteValues[i][2].section("~",0,0)).append("-").append(listCompleteValues[i][2].section("~",1,1));

                    }
                    else if(listCompleteValues[i][2].contains("~") && listCompleteValues[i][3].contains("~")) // range of ports and range of IP
                    {
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: range of IP & range of ports";

                        if(listCompleteValues[i][6].contains("'1'") || listCompleteValues[i][6].contains("1")) //INPUT
                            cmd.append(" -m iprange --src-range ").append(listCompleteValues[i][2].section("~",0,0)).append("-").append(listCompleteValues[i][2].section("~",1,1)).append(" --dport ").append(listCompleteValues[i][3].section("~",0,0)).append(":").append(listCompleteValues[i][3].section("~",1,1));
                        else
                            cmd.append(" -m iprange --dst-range ").append(listCompleteValues[i][2].section("~",0,0)).append("-").append(listCompleteValues[i][2].section("~",1,1)).append(" --dport ").append(listCompleteValues[i][3].section("~",0,0)).append(":").append(listCompleteValues[i][3].section("~",1,1));
                    }
                    else if(!listCompleteValues[i][2].contains("~") && !listCompleteValues[i][3].contains("~") && listCompleteValues[i][2]!= " " && listCompleteValues[i][3]!= " ") //single IP & single PORT
                    {
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: single IP & single PORT"<<listCompleteValues[i][2]<<listCompleteValues[i][2].length();
                        if(listCompleteValues[i][6].contains("'1'") || listCompleteValues[i][6].contains("1")) //INPUT
                            cmd.append(" -s ").append(" -m multiport ").append(listCompleteValues[i][2]).append(" --dports ").append(listCompleteValues[i][3].remove(" "));
                        else
                            cmd.append(" -d ").append(" -m multiport ").append(listCompleteValues[i][2]).append(" --dports ").append(listCompleteValues[i][3].remove(" "));
                    }
                    else if(listCompleteValues[i][3].contains("~") && (!listCompleteValues[i][2].contains("~"))) // single IP & range of PORTS
                    {
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: single IP & range of ports";
//                        if(listCompleteValues[i][6].contains("'1'") || listCompleteValues[i][6].contains("1"))  //INPUT
//                            cmd.append(" --dport ").append(listCompleteValues[i][3].section(("~"),0,0)).append(":").append(listCompleteValues[i][3].section(("~"),1,1)).append(listCompleteValues[i][2]);
//                        else
//                            cmd.append(" --dport ").append(listCompleteValues[i][3].section(("~"),0,0)).append(":").append(listCompleteValues[i][3].section(("~"),1,1)).append(listCompleteValues[i][2]);
                        cmd.append(" --dport ").append(listCompleteValues[i][3].section(("~"),0,0)).append(":").append(listCompleteValues[i][3].section(("~"),1,1)).append(listCompleteValues[i][2]);
                    }
                    else if(listCompleteValues[i][2].contains("~") && (!listCompleteValues[i][3].contains("~")))      //range of IP & single Port
                    {
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: range of IP & single Port";
                        if(listCompleteValues[i][6].contains("'1'") || listCompleteValues[i][6].contains("1")) //INPUT
                            cmd.append(" --destination-port ").append(listCompleteValues[i][3]).append(" -m iprange --src-range ").append(listCompleteValues[i][2].section("~",0,0).append("-").append(listCompleteValues[i][2].section("~",1,1)));
                        else
                            cmd.append(" -m iprange --dst-range ").append(listCompleteValues[i][2].section("~",0,0)).append("-").append(listCompleteValues[i][2].section("~",1,1)).append(" --dport ").append(listCompleteValues[i][3]);
                    }

                    if(qgetenv("BOARDARCH") == QString("via-arm"))
                        qDebug() << "\"-m comment\" option does not work in ARM";
                    else
                        cmd.append(" -m comment --comment \"").append(listCompleteValues[i][1]).append("\"");

                    cmd.append(" -j DROP");
                }
                else
                {
                    cmd.append(" tcp ").append(" -d ").append("\"").append(listCompleteValues[i][4]).append("\"");
                    if(qgetenv("BOARDARCH") == QString("via-arm"))
                        qDebug() << "\"-m comment\" option does not work in ARM";
                    else
                        cmd.append(" -m comment --comment ").append("\"").append(listCompleteValues[i][1]).append("\"");
                    cmd.append(" -j DROP");
                }

                if(listCompleteValues[i][9] == "Ports")
                {
                    cmd.replace("tcp -s","tcp");
                    cmd.replace("tcp -d","tcp");
                    cmd.replace("udp -s","udp");
                    cmd.replace("udp -d","udp");
                    cmd.replace("both -s","both");
                    cmd.replace("both -d","both");
                }

                if(bCheckPort)
                {
                    if(cmd.contains("both"))
                    {
                        cmd.replace("both","tcp");
                        QString strlist;
                        for(int ii=0;ii<strlistport.count();)
                        {
                            int j;

                            strlist.clear();

                            for(j=0;(j<15) && ((ii+j)< strlistport.count());j++)
                            {
                                strlist.append(QString(strlistport.at(ii+j)).remove(" ")+",");

                            }
                            strlist.chop(1);
                            QString cmd1;
                            cmd1=cmd;
                            cmd1.replace("PORT",strlist);
                            forLog(cmd1);
                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmd : " << cmd1;      //here the command goes
                            process2->start(cmd1.remove("'"));
                            process2->waitForFinished(-1);
                            QString strOutputError = QString(process2->readAllStandardError());

                            if(!strOutputError.isEmpty())
                                strError.append(listCompleteValues[ii][1].append(":").append(strOutputError)).append("\n");
                            ii=ii+j;

                        }
                        cmd.replace("tcp","udp");
                    }

                    QString strlist;
                    for(int ii=0;ii<strlistport.count();)
                    {
                        int j;

                        strlist.clear();

                        for(j=0;(j<15) && ((ii+j)< strlistport.count());j++)
                        {
                            strlist.append(QString(strlistport.at(ii+j)).remove(" ")+",");

                        }
                        strlist.chop(1);
                        QString cmd1;
                        cmd1=cmd;
                        cmd1.replace("PORT",strlist);
                        forLog(cmd1);
                        process2->start(cmd1.remove("'"));
                        process2->waitForFinished(-1);
                        QString strOutputError = process2->readAllStandardError();

                        if(!strOutputError.isEmpty())
                            strError.append(listCompleteValues[ii][1].append(":").append(strOutputError)).append("\n");
                        ii=ii+j;
                    }

                }
                else
                {
                    if(cmd.contains("both"))
                    {
                        cmd.replace("both","tcp");
                        forLog(cmd);
                        process2->start(cmd.remove("'"));
                        process2->waitForFinished(-1);

                        if( listCompleteValues[i][6] == "1")
                            cmd.replace("INPUT","OUTPUT");
                        else
                            cmd.replace("OUTPUT","INPUT");

                        forLog(cmd);
                        process2->start(cmd.remove("'"));
                        process2->waitForFinished(-1);

                        QString strOutputError = QString(process2->readAllStandardError());

                        if(!strOutputError.isEmpty())
                            strError.append(listCompleteValues[i][1].append(":").append(strOutputError)).append("\n");
                        cmd.replace("tcp","udp");

                        if( listCompleteValues[i][6] == "1")
                            cmd.replace("OUTPUT","INPUT");
                        else
                            cmd.replace("INPUT","OUTPUT");
                    }
                    forLog(cmd);

                    process2->start(cmd.remove("'"));
                    process2->waitForFinished(-1);

                    QString strOutputError = QString(process2->readAllStandardError());

                    if(!strOutputError.isEmpty())
                        strError.append(listCompleteValues[i][1].append(":").append(strOutputError)).append("\n");

                    if(listCompleteValues[i][9] == "IP Address")   /// Solve Firewall incoming port issue by Namrata for
                    {
                        if(cmd.contains("tcp"))
                        {
                            if(listCompleteValues[i][6] == "1")
                                cmd.replace("INPUT","OUTPUT");
                            else
                                cmd.replace("OUTPUT","INPUT");

                            forLog(cmd);
                            process2->start(cmd.remove("'"));
                            process2->waitForFinished(-1);
                            strOutputError = QString(process2->readAllStandardError());

                            if(!strOutputError.isEmpty())
                                strError.append(listCompleteValues[i][1].append(":").append(strOutputError)).append("\n");
                        }
                    }
                }
            }
        }
        else if(listCompleteValues[i][0] == "2" && listCompleteValues[i][11] == "1")   //whitlisting
        {
            QString cmdn;
            QProcess *proc = new QProcess();
            qDebug() << "LCore:ExecuteFirewallSettings::3:: Setting default policy to accept";
            cmdn = "iptables -P INPUT ACCEPT";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result : "<<proc->execute(cmdn);

            cmdn = "iptables -P OUTPUT ACCEPT";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result : "<<proc->execute(cmdn);

            cmdn = "iptables -P FORWARD ACCEPT";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result : "<<proc->execute(cmdn);

 //           qDebug() << "LCore:ExecuteFirewallSettings::3:: Flush iptable";
//            cmdn = "iptables -F";
//            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn :"<<cmdn;
//            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);

            qDebug() << "LCore:ExecuteFirewallSettings::3:: Clearing table";
            cmdn = "iptables -X";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);

            qDebug() << "LCore:ExecuteFirewallSettings::3:: Deleting user defined chains";
            cmdn =  "iptables -Z";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn: "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);

            qDebug() << "LCore:ExecuteFirewallSettings::3:: Allowing local host";
            cmdn = "iptables -A INPUT -i lo -j ACCEPT";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn: "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);

            cmdn = "iptables -A OUTPUT -o lo -j ACCEPT";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn: "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);

            qDebug() << "LCore:ExecuteFirewallSettings::3:: Allow DNS port";
            cmdn = "iptables -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn: "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);

            cmdn = "iptables -A OUTPUT -p tcp -m tcp --dport 53 -j ACCEPT";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn: "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
            int tempFlag = 0;
            for(int b=0;b<listCompleteValues.count();b++)
            {
                if(listCompleteValues[b][0] == "2" && listCompleteValues[b][11] == "1" && listCompleteValues[b][9] == "URLs") //whitlisting url
                {
                    for(int j=0;j<=listCompleteValues[b][4].count(",");j++)
                    {
                        cmdn = "iptables -A INPUT -s "+listCompleteValues[b][4].section(",",j,j)+" -p tcp -m tcp --dport 80 -j ACCEPT";
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                        cmdn = "iptables -A INPUT -s "+listCompleteValues[b][4].section(",",j,j)+" -p tcp -m tcp --dport 443 -j ACCEPT";
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                        cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][4].section(",",j,j)+" -p tcp -m tcp -j ACCEPT";
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                        cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][4].section(",",j,j)+" -p tcp -m tcp -j ACCEPT";
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                        cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][4].section(",",j,j)+" -m state --state NEW,ESTABLISHED -j ACCEPT";
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                    }
                    if(tempFlag == 0)
                    {
                        tempFlag =1;
                        cmdn = "iptables -A OUTPUT -p tcp -m multiport --dports 80,443 -m state --state NEW -j ACCEPT";
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                    }
                }
                else if(listCompleteValues[b][0] == "2" && listCompleteValues[b][11] == "1" && listCompleteValues[b][9] == "IP Address")      //IP Address
                {
                    for(int j=0;j<=listCompleteValues[b][2].count(",");j++)
                    {

                        cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED  -j ACCEPT";
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                        cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp -m multiport --sports 80,443 -m state --state NEW,ESTABLISHED  -j ACCEPT";
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                        qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                        if(listCompleteValues[b][3].section(":",j,j) == "select all")
                        {
                            //execute this section for whitelisting all ports for particular IP
                            cmdn = "iptables -A OUTPUT -s "+listCompleteValues[b][2].section(",",j,j)+" -j ACCEPT";
                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                            cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp -j ACCEPT";
                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                            cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -m state --state NEW,ESTABLISHED -j ACCEPT";
                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                        }
                        else
                        {
                            if(listCompleteValues[b][3].section(":",j,j).count(",") == 0)
                            {
                                //These command are getting fired for single port
                                cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp --dport "+listCompleteValues[b][3].section(":",j,j)+" -m state --state NEW,ESTABLISHED  -j ACCEPT";
                                qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                                cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp --sport "+listCompleteValues[b][3].section(":",j,j)+" -m state --state NEW,ESTABLISHED  -j ACCEPT";
                                qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                            }
                            else
                            {
                                //These commands are getting fired for multiple port
                                if(listCompleteValues[b][3].section(":",j,j).count(",") > 14)
                                {
                                    //Execute this section for more than 15 ports
                                    QStringList strlistPort;
                                    for(int k=0;k<=listCompleteValues[b][3].section(":",j,j).count(",");k++)
                                    {
                                        strlistPort.append(listCompleteValues[b][3].section(":",j,j).section(",",k,k));
                                    }
                                    QString temp;
                                    for(int k=0;k<strlistPort.count();k++)
                                    {
                                        temp.append(strlistPort.at(k));
                                        temp.append(",");
                                        if(strlistPort.at(k) == "20" || strlistPort.at(k) == "21")
                                        {
                                            cmdn = "iptables -A INPUT -s "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp --dport "+strlistPort.at(k)+" -j ACCEPT";
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                                            cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp -j ACCEPT";
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                                            cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -m state --state NEW,ESTABLISHED -j ACCEPT";
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                                        }
                                        if( (k+1)%15 == 0 || (k+1) == strlistPort.count())
                                        {
                                            temp.chop(1);
                                            cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp -m multiport --dports "+temp+" -m state --state NEW,ESTABLISHED  -j ACCEPT";
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: Result : "<<proc->execute(cmdn);
                                            cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp -m multiport --sports "+temp+" -m state --state NEW,ESTABLISHED  -j ACCEPT";
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: Result : "<<proc->execute(cmdn);
                                            temp ="";
                                        }
                                    }
                                    qDebug() << "LCore:ExecuteFirewallSettings::3:: Ports are more than 15";
                                    qDebug() << "LCore:ExecuteFirewallSettings::3:: strlistPort : "<<strlistPort;
                                }
                                else
                                {
                                    //Execute this section for ports less than ore equal to 15
                                    for(int k=0;k<=listCompleteValues[b][3].section(":",j,j).count(",");k++)
                                    {
                                        if(listCompleteValues[b][3].section(":",j,j).section(",",k,k) == "20" || listCompleteValues[b][3].section(":",j,j).section(",",k,k) == "21")
                                        {
                                            cmdn = "iptables -A INPUT -s "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp --dport "+listCompleteValues[b][3].section(":",j,j).section(",",k,k)+" -j ACCEPT";
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                                            cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp -j ACCEPT";
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                                            cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -m state --state NEW,ESTABLISHED -j ACCEPT";
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                            qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                                        }
                                    }
                                    cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp -m multiport --dports "+listCompleteValues[b][3].section(":",j,j)+" -m state --state NEW,ESTABLISHED  -j ACCEPT";
                                    qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                    qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                                    cmdn = "iptables -A OUTPUT -d "+listCompleteValues[b][2].section(",",j,j)+" -p tcp -m tcp -m multiport --sports "+listCompleteValues[b][3].section(":",j,j)+" -m state --state NEW,ESTABLISHED  -j ACCEPT";
                                    qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
                                    qDebug() << "LCore:ExecuteFirewallSettings::3:: result:"<<proc->execute(cmdn);
                                }
                            }
                        }
                    }
                }
            }


            qDebug() << "LCore:ExecuteFirewallSettings::3:: The following rule ensures that remaining output packets will be dropped from output policy";
            cmdn = "iptables -P OUTPUT DROP";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result : "<<proc->execute(cmdn);

            cmdn = "iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT";
            qDebug() << "LCore:ExecuteFirewallSettings::3:: cmdn : "<<cmdn;
            qDebug() << "LCore:ExecuteFirewallSettings::3:: result : "<<proc->execute(cmdn);
        }
        else if(listCompleteValues[i][0] == "2" && listCompleteValues[i][11] == "2") //import File rule
        {
            if(listCompleteValues[i][9] == "iptables")
            {
                QString strFilepath ="/root/firewallRule/."+listCompleteValues[i][1]+".txt";
                QStringList  lines;
                QFile mfile(strFilepath);
                if(!mfile.open(QIODevice::ReadOnly | QIODevice::Text ))
                    return "";
                QTextStream in1(&mfile);
                while (!in1.atEnd())
                {
                    QString strline = in1.readLine();
                    if(!strline.contains("#"))
                        lines += strline;
                }
                mfile.close();
                if(lines.count())
                {
                    for (int ii = 0; ii < lines.size(); ++ii)
                        forLog(lines.at(ii));
                }
                system("sed -i 's/\r//' "+strFilepath.toLatin1()+""); //to remove extra character when file imported from windows through tar.
                QProcess::execute("chmod 777 "+strFilepath);
                QProcess::execute(strFilepath); //excute script
            }
        }

        if(process2)
        {
            delete process2;
            process2 = NULL;
        }
    }
    qDebug() <<"at the end in excutefarewallsettings";
    qDebug() << "LCore:ExecuteFirewallSettings::3:: return strerror = " << strError;
    return strError;
}

QString LCore::ExcuteFirewallSettingsForBoth(QString cmd)
{
    qDebug() << "LCore:ExcuteFirewallSettingsForBoth::3:: Start. ";

    QList<QStringList> listCompleteValues;
    QProcess *process2 = new QProcess;
    bool bCheckPort  = false;

    QString strError;
    listCompleteValues = readCompleteTable("FirewallSettings", "");
    if(listCompleteValues.count() == 0)
        return QString("");

    for(int i = 0; i < listCompleteValues.count(); i++)
    {
        if(listCompleteValues[i][0] == "2") // BlockRule == 2
        {
            QStringList strInputOutput;
            strInputOutput<<"INPUT"<<"OUTPUT";

            for(int j = 0; j < strInputOutput.count(); j++)
            {
                cmd.clear();
                cmd="iptables -A ";
                if(listCompleteValues[i][6] == "2" || listCompleteValues[i][6] == "'2'")
                {

                    cmd.append(strInputOutput.at(j));
                    cmd.append(" -p ").append(listCompleteValues[i][5]);

                    QStringList strlistport;
                    strlistport.append(listCompleteValues[i][3].split(","));

                    if(listCompleteValues[i][9] != "URLs") // no service
                    {

                        qDebug() << "LCore:ExcuteFirewallSettingsForBoth::3:: inside no service option";
                        if(listCompleteValues[i][2].length() == 1 && listCompleteValues[i][3].contains("~"))  // no ip  & range of port
                        {
                            qDebug() << "LCore:ExcuteFirewallSettingsForBoth::3:: no ip, range of port ";
                            cmd.append(" --dport ").append(listCompleteValues[i][3].section("~",0,0)).append(":").append(listCompleteValues[i][3].section(("~"),1,1));
                        }
                        else if(listCompleteValues[i][2].length() == 1 && (!listCompleteValues[i][3].contains("~")) )
                        {
                            qDebug()<< "LCore:ExcuteFirewallSettingsForBoth::3:: no ip, single port";
                            cmd.append("  -m multiport --dports  ").append("PORT");
                            bCheckPort = true;
                        }
                        else if(listCompleteValues[i][3].simplified().isEmpty() && !(listCompleteValues[i][2].contains("~")) ) // no port single ip
                        {
                            qDebug() << "LCore:ExcuteFirewallSettingsForBoth::3:: no port, single ip";
                            if(strInputOutput.at(j)=="OUTPUT") // OUTPUT
                                cmd.append(" -d ").append(listCompleteValues[i][2]);
                            else
                                cmd.append(" -s ").append(listCompleteValues[i][2]);
                        }
                        else if (listCompleteValues[i][3].simplified().isEmpty() && listCompleteValues[i][2].contains("~")) // no port range of  ip
                        {
                            qDebug() << "LCore:ExcuteFirewallSettingsForBoth::3:: no port and range of ip";

                            if(strInputOutput.at(j)=="INPUT") // INPUT
                                cmd.append(" -m iprange --src-range ").append(listCompleteValues[i][2].section("~",0,0)).append("-").append(listCompleteValues[i][2].section("~",1,1));
                            else
                                cmd.append(" -m iprange --dst-range ").append(listCompleteValues[i][2].section("~",0,0)).append("-").append(listCompleteValues[i][2].section("~",1,1));

                        }
                        else if(listCompleteValues[i][2].contains("~") && listCompleteValues[i][3].contains("~")) // range of ports and range of IP
                        {
                            qDebug() << "LCore:ExcuteFirewallSettingsForBoth::3:: range of IP & range of ports";

                            if(strInputOutput.at(j)=="INPUT") //INPUT
                                cmd.append(" -m iprange --src-range ").append(listCompleteValues[i][2].section("~",0,0)).append("-").append(listCompleteValues[i][2].section("~",1,1)).append(" --dport ").append(listCompleteValues[i][3].section("~",0,0)).append(":").append(listCompleteValues[i][3].section("~",1,1));
                            else
                                cmd.append(" -m iprange --dst-range ").append(listCompleteValues[i][2].section("~",0,0)).append("-").append(listCompleteValues[i][2].section("~",1,1)).append(" --dport ").append(listCompleteValues[i][3].section("~",0,0)).append(":").append(listCompleteValues[i][3].section("~",1,1));
                        }
                        else if(!listCompleteValues[i][2].contains("~") && !listCompleteValues[i][3].contains("~") && listCompleteValues[i][2]!= " " && listCompleteValues[i][3]!= " ") //single IP & single PORT
                        {
                            qDebug() << "LCore:ExcuteFirewallSettingsForBoth::3:: single IP & single PORT";
                            if(strInputOutput.at(j)=="INPUT") //INPUT
                                cmd.append(" -s ").append(" -m multiport ").append(listCompleteValues[i][2]).append(" --dports ").append(listCompleteValues[i][3].remove(" "));
                            else
                                cmd.append(" -d ").append(" -m multiport ").append(listCompleteValues[i][2]).append(" --dports ").append(listCompleteValues[i][3].remove(" "));
                        }
                        else if(listCompleteValues[i][3].contains("~") && (!listCompleteValues[i][2].contains("~"))) // single IP & range of PORTS
                        {
                            qDebug() << "LCore:ExcuteFirewallSettingsForBoth::3:: single IP & range of ports";
//                            if(strInputOutput.at(j)=="INPUT")  //INPUT
//                                cmd.append(" --dport ").append(listCompleteValues[i][3].section(("~"),0,0)).append(":").append(listCompleteValues[i][3].section(("~"),1,1)).append(listCompleteValues[i][2]);
//                            else
//                                cmd.append(" --dport ").append(listCompleteValues[i][3].section(("~"),0,0)).append(":").append(listCompleteValues[i][3].section(("~"),1,1)).append(listCompleteValues[i][2]);
                            cmd.append(" --dport ").append(listCompleteValues[i][3].section(("~"),0,0)).append(":").append(listCompleteValues[i][3].section(("~"),1,1)).append(listCompleteValues[i][2]);
                        }
                        else if(listCompleteValues[i][2].contains("~") && (!listCompleteValues[i][3].contains("~")))      //range of IP & single Port
                        {
                            qDebug() << "LCore:ExcuteFirewallSettingsForBoth::3:: range of IP & single Port";
                            if(strInputOutput.at(j)=="INPUT") //INPUT
                                cmd.append(" --destination-port ").append(listCompleteValues[i][3]).append(" -m iprange --src-range ").append(listCompleteValues[i][2].section("~",0,0).append("-").append(listCompleteValues[i][2].section("~",1,1)));
                            else
                                cmd.append(" -m iprange --dst-range ").append(listCompleteValues[i][2].section("~",0,0)).append("-").append(listCompleteValues[i][2].section("~",1,1)).append(" --dport ").append(listCompleteValues[i][3]);
                        }
                        if(qgetenv("BOARDARCH") == QString("via-arm"))
                            qDebug() << "\"-m comment\" option does not work in ARM";
                        else
                            cmd.append(" -m comment --comment \"").append(listCompleteValues[i][1]).append("\"");
                        cmd.append(" -j DROP");
                    }
                    if(listCompleteValues[i][9] == "Ports")
                    {
                        cmd.replace("tcp -s","tcp");
                        cmd.replace("tcp -d","tcp");
                        cmd.replace("udp -s","udp");
                        cmd.replace("udp -d","udp");
                        cmd.replace("both -s","both");
                        cmd.replace("both -d","both");
                    }
                    if(bCheckPort)
                    {
                        if(cmd.contains("both"))
                        {
                            cmd.replace("both","tcp");
                            QString strlist;
                            for(int ii=0;ii<strlistport.count();)
                            {
                                int jj;

                                strlist.clear();

                                for(jj=0;(jj<15) && ((ii+jj)< strlistport.count());jj++)
                                {
                                    strlist.append(QString(strlistport.at(ii+jj)).remove(" ")+",");

                                }
                                strlist.chop(1);
                                QString cmd1;
                                cmd1=cmd;
                                cmd1.replace("PORT",strlist);
                                forLog(cmd1);
                                qDebug()<<"LCore:ExcuteFirewallSettingsForBoth::3:: cmd:"<<cmd1;      //here the command goes
                                process2->start(cmd1.remove("'"));
                                process2->waitForFinished(-1);
                                QString strOutputError = QString(process2->readAllStandardError());

                                if(!strOutputError.isEmpty())
                                    strError.append(listCompleteValues[ii][1].append(":").append(strOutputError)).append("\n");
                                ii=ii+jj;

                            }
                            cmd.replace("tcp","udp");
                        }

                        QString strlist;
                        for(int ii=0;ii<strlistport.count();)
                        {
                            qDebug()<<"LCore:ExcuteFirewallSettingsForBoth::3:: for TCP and Udp protocol";
                            int jj;

                            strlist.clear();

                            for(jj=0;(jj<15) && ((ii+jj)< strlistport.count());jj++)
                            {
                                strlist.append(QString(strlistport.at(ii+jj)).remove(" ")+",");

                            }
                            strlist.chop(1);
                            QString cmd1;
                            cmd1=cmd;
                            cmd1.replace("PORT",strlist);
                            forLog(cmd1);
                            process2->start(cmd1.remove("'"));
                            process2->waitForFinished(-1);
                            QString strOutputError = QString(process2->readAllStandardError());

                            if(!strOutputError.isEmpty())
                                strError.append(listCompleteValues[ii][1].append(":").append(strOutputError)).append("\n");
                            ii=ii+jj;
                        }
                    }
                    else
                    {
                        if(cmd.contains("both"))
                        {
                            cmd.replace("both","tcp");
                            forLog(cmd);
                            process2->start(cmd.remove("'"));
                            process2->waitForFinished(-1);

                            if( strInputOutput.at(j)=="INPUT")
                                cmd.replace("INPUT","OUTPUT");
                            else
                                cmd.replace("OUTPUT","INPUT");

                            forLog(cmd);
                            process2->start(cmd.remove("'"));
                            process2->waitForFinished(-1);

                            QString strOutputError = QString(process2->readAllStandardError());

                            if(!strOutputError.isEmpty())
                                strError.append(listCompleteValues[i][1].append(":").append(strOutputError)).append("\n");
                            cmd.replace("tcp","udp");

                            if( strInputOutput.at(j)=="INPUT")
                                cmd.replace("OUTPUT","INPUT");
                            else
                                cmd.replace("INPUT","OUTPUT");
                        }
                        forLog(cmd);

                        process2->start(cmd.remove("'"));
                        process2->waitForFinished(-1);

                        QString strOutputError = QString(process2->readAllStandardError());

                        if(!strOutputError.isEmpty())
                            strError.append(listCompleteValues[i][1].append(":").append(strOutputError)).append("\n");

                        if(cmd.contains("tcp"))
                        {
                            if( strInputOutput.at(j)=="INPUT")
                                cmd.replace("INPUT","OUTPUT");
                            else
                                cmd.replace("OUTPUT","INPUT");

                            forLog(cmd);

                            process2->start(cmd.remove("'"));
                            process2->waitForFinished(-1);
                            strOutputError = QString(process2->readAllStandardError());

                            if(!strOutputError.isEmpty())
                                strError.append(listCompleteValues[i][1].append(":").append(strOutputError)).append("\n");
                        }
                    }
                }
            }
        }
    }
    if(process2)
    {
        delete process2;
        process2 = NULL;
    }

    qDebug() << "LCore:ExcuteFirewallSettingsForBoth::3:: return strError = " << strError;
    return strError;
}

// cppcheck-suppress unusedFunction
void LCore::getHwData()
{
    qDebug() << "LCore:getHwData::3:: Start. ";
    bool bDiskFound = false;
    QProcess proc;

    QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
    env.insert("LC_ALL", "en_US.utf-8"); // Add an process environment variable
    proc.setProcessEnvironment(env);

    QString strData, strLine;
    if(qgetenv("BOARDARCH") == QString("via-arm"))
        proc.start(QString(ARMLSHWCMD_PATH));
    else
#ifdef QT_ARCH_I386
        proc.start(QString(X86LSHWCMD_PATH));
    qDebug() << "X86LSHWCMD_PATH = " <<QString(X86LSHWCMD_PATH);
#endif

#ifdef QT_ARCH_X86_64
    proc.start(QString(X64LSHWCMD_PATH));
    qDebug() << "X64LSHWCMD_PATH = " <<QString(X64LSHWCMD_PATH);
#endif

    proc.waitForFinished(-1);

    int i =0, c = 0;

    QFile file(HW_DETAILS);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
        return;
    QTextStream out(&file);
    QString strMachineSerial;

    while(!proc.atEnd())
    {
        strLine = proc.readLine();
        qDebug() << "strLine 1= " <<strLine;

        if((strLine.contains("serial")) && (i == 0))
        {
            strData = strLine.section(':',1,1);
            out << "BIOS_Serial = " << strData << "\n";
        }

        if(strLine.contains("serial"))
        {
            strMachineSerial = strLine.section(':',1,1).trimmed();
        }

        if(strLine.contains("*-core"))
        {
            qDebug()<< "Machine_Serial" << strMachineSerial;
            if(!strMachineSerial.isEmpty())
            {
                out << "Machine_Serial = " << strMachineSerial << "\n";
            }
        }

        if(strLine.contains("*-core"))
        {
            while(1)
            {
                strLine = proc.readLine();
                qDebug() << "strLine 2= " <<strLine;
                /*if(strLine.contains("description", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "MotherBoard_Type = " << strData.simplified() << "\n";
                }*/

                if(strLine.contains("vendor", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "MotherBoard_Manufacturer = " << strData.simplified() << "\n";
                }

                if(strLine.contains("*-") || proc.atEnd() == true )
                    break;
            }
        }

        if(strLine.contains("*-firmware"))
        {
            i = 0;
            while(1)
            {
                strLine = proc.readLine();
                qDebug() << "strLine 3= " <<strLine;
                if(strLine.contains("description", Qt::CaseInsensitive))
                {
                    out << "Bios_Description = Default System BIOS \n";
                }

                if(strLine.contains("vendor", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Bios_Manufacturer = " << strData.simplified() << "\n" ;
                }

                if(strLine.contains("version", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Bios_Version = " << strData.simplified() << "\n";
                }

                if(strLine.contains("*-") || proc.atEnd() == true )
                    break;
            }
        }

        if(strLine.contains("*-cpu") && c == 0)
        {
            i = 0;
            c++;
            while(1)
            {
                strLine = proc.readLine();
                qDebug() << "strLine 4= " <<strLine;
                if(strLine.contains("product", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Processor_Description = " << strData.simplified() << "\n";
                }

                if(strLine.contains("vendor", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Processor_Vendor = " << strData.simplified() << "\n";
                    out << "Processor_Manufacturer = " << strData.simplified() << "\n";
                }

                if(strLine.contains("version", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Processor_Version = " << strData.simplified() << "\n";
                }

                if(strLine.contains("*-") || proc.atEnd() == true )
                    break;
            }
        }
        if(strLine.contains("*-display"))
        {
            i = 0;
            while(1)
            {
                strLine = proc.readLine();
                qDebug() << "strLine 5= " <<strLine;
                if(strLine.contains("product", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Graphics_Description = " << strData.simplified() << "\n";
                }

                if(strLine.contains("vendor", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Graphics_Vendor = " << strData.simplified() << "\n";
                    out << "Graphics_Manufacturer = " << strData.simplified() << "\n";
                }

                if(strLine.contains("version", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Graphics_Version = " << strData.simplified() << "\n";
                }

                if(strLine.contains("*-") || proc.atEnd() == true )
                    break;
            }
        }
        if(strLine.contains("*-multimedia") && c==1)
        {
            c++;
            i = 0;
            while(1)
            {
                strLine = proc.readLine();
                qDebug() << "strLine 6= " <<strLine;
                if(strLine.contains("product", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Audio_Description = " << strData.simplified() << "\n";
                }

                if(strLine.contains("vendor", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Audio_Vendor = " << strData.simplified() << "\n";
                    out << "Audio_Manufacturer = " << strData.simplified() << "\n";
                }

                if(strLine.contains("version", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "Audio_Version = " << strData.simplified() << "\n";
                }

                if(strLine.contains("*-") || proc.atEnd() == true )
                    break;
            }
        }
        if(strLine.contains("*-network"))
        {
            if(!strLine.contains(":"))
            {
                i = 0;
                while(1)
                {
                    strLine = proc.readLine();
                    qDebug() << "strLine 7= " <<strLine;
                    if(strLine.contains("product", Qt::CaseInsensitive))
                    {
                        strData = strLine.section(':',1,1);
                        out << "Network_Description = " << strData.simplified() << "\n";
                    }

                    if(strLine.contains("vendor", Qt::CaseInsensitive))
                    {
                        strData = strLine.section(':',1,1);
                        out << "Network_Vendor = " << strData.simplified() << "\n";
                        out << "Network_Manufacturer = " << strData.simplified() << "\n";
                    }

                    if(strLine.contains("version", Qt::CaseInsensitive))
                    {
                        strData = strLine.section(':',1,1);
                        out << "Network_Version = " << strData << "\n";
                    }

                    if(strLine.contains("*-") || proc.atEnd() == true )
                        break;
                }
            }
        }
        if(strLine.contains("*-disk"))
        {
            if(!strLine.contains(":"))
            {
                bDiskFound = true;

                i = 0;
                while(1)
                {
                    strLine = proc.readLine();
                    qDebug() << "strLine 8= " <<strLine;
                    if(strLine.contains("description", Qt::CaseInsensitive))
                    {
                        strData = strLine.section(':',1,1);
                        out << "HardDisk_Description = " << strData.simplified() << "\n";
                    }

                    if(strLine.contains("vendor", Qt::CaseInsensitive))
                    {
                        strData = strLine.section(':',1,1);
                        out << "HardDisk_Vendor = " << strData.simplified() << "\n";
                    }

                    if(strLine.contains("product", Qt::CaseInsensitive))
                    {
                        strData = strLine.section(':',1,1);
                        out << "HardDisk_Manufacturer = " << strData.simplified() << "\n";
                    }

                    if(strLine.contains("version", Qt::CaseInsensitive))
                    {
                        strData = strLine.section(':',1,1);
                        out << "HardDisk_Version = " << strData.simplified() << "\n";
                    }

                    if(strLine.contains("serial", Qt::CaseInsensitive))
                    {
                        strData = strLine.section(':',1,1);
                        out << "HardDisk_Serial = " << strData.simplified() << "\n";
                    }

                    if(strLine.contains("size", Qt::CaseInsensitive))
                    {
                        strData = strLine.section(':',1,1);
                        out << "HardDisk_Size = " << strData.simplified() << "\n";
                    }

                    if(strLine.contains("*-") || proc.atEnd() == true )
                        break;
                }
            }
        }

        if(strLine.contains("*-cdrom"))
        {
            i = 0;
            while(1)
            {
                strLine = proc.readLine();
                qDebug() << "strLine 9= " <<strLine;

                if(strLine.contains("product", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "CDDrive_Description=" << strData.simplified() << "\n";
                }

                if(strLine.contains("vendor", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "CDDrive_Vendor=" << strData.simplified() << "\n";
                    out << "CDDrive_Manufacturer=" << strData.simplified() << "\n";
                }

                if(strLine.contains("version", Qt::CaseInsensitive))
                {
                    strData = strLine.section(':',1,1);
                    out << "CDDrive_Version=" << strData.simplified() << "\n";
                }

                if(strLine.contains("*-") || proc.atEnd() == true )
                    break;
            }
        }

    }//End of while

    if(bDiskFound == false)
    {
        QString strModel, strVendor, strSerial, strSize;

        qDebug() << QString("lsblk") << QStringList() << "-P" << "-fs" << "-o" << "MODEL,VENDOR,SERIAL,SIZE" << getDevice();
        proc.start(QString("lsblk"), QStringList() << "-P" << "-fs" << "-o" << "MODEL,VENDOR,SERIAL,SIZE" << getDevice());
        proc.waitForFinished(-1);

        while(!proc.atEnd())
        {
            strLine = proc.readLine().simplified();
            qDebug() << "strLine = " <<strLine;
            strModel = strLine.section("\" ", 0, 0);
            strModel = strModel.section("=\"", -1 ,-1);

            strVendor = strLine.section("\" ", 1, 1);
            strVendor = strVendor.section("=\"", -1 ,-1);

            strSerial = strLine.section("\" ", 2, 2);
            strSerial = strSerial.section("=\"", -1 ,-1);

            strSize = strLine.section("\" ", 3, 3);
            strSize = strSize.section("=\"", -1 ,-1);
        }

        if(strModel.isEmpty() == false)
        {
            out << "HardDisk_Manufacturer = " << strModel << "\n";
        }

        if(strVendor.isEmpty() == false)
        {
            out << "HardDisk_Description = " << strVendor << "\n";
        }

        if(strSerial.isEmpty() == false)
        {
            out << "HardDisk_Serial = " << strSerial << "\n";
        }

        if(strSize.isEmpty() == false)
        {
            out << "HardDisk_Size = " << strSize << "\n";
        }
    }

    QString strProductName = getManufracturerDetalis(QString("Product")).trimmed();
    qDebug() <<"strProductName=" <<strProductName;

    out << "MotherBoard_Type = " << strProductName << "\n";

    out << "OS_Description = " << "Linux Embedded GV" << "\n";
    out << "OS_Name = " << "Linux" << "\n";
    out << "OS_Manufacturer = Sundyne\n";
    out << "OS_SerialNo = " << getOSDetails(QString(OSBUILD_FILE)) << "\n";
    out << "OS_ProductKey = -\n";
    out << "OS_Version = " << getOSDetails(QString(OSVERSIONFILE)) <<"\n\n";

    QStringList strListImpactManufacturer = readDefaultsValue("ImpactManufacturer"); //added to update COM_Manufacturer = Impact Technologies in /sda1/data/.defaultvalues contains value,by prajakta
    if(strListImpactManufacturer.count() && strListImpactManufacturer.at(0).toInt() == 1)
    {
        out << "COM_Manufacturer = " << "Impact Technologies" << "\n";
    }
    else
    {
       out << "COM_Manufacturer = " << getManufracturerDetalis(QString("Manufacturer")).trimmed() << "\n";
    }

    out << "COM_Model = " << strProductName << "\n\n";
    out << "Total Memory = " << getTotalMem().trimmed() << "\n";
    out << "Free Memory = " << getFreeMem().trimmed() << "\n";
    out << "Used Memory = " << QString::number(getTotalMem().toInt() - getFreeMem().toInt()) << "\n";

    file.close();
    sync();

    qDebug() << "LCore:getHwData::3:: End. ";
}

QString LCore::getOSDetails(QString filename)
{
    qDebug() << "LCore:getOSDetails::3:: Start. ";
    QString data;
    QFile file(filename);
    if (file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        data = in.readLine();
        file.close();
    }

    qDebug() << "LCore:getOSDetails::3:: return data = " << data;
    return data;
}

// cppcheck-suppress unusedFunction
QStringList LCore::readHWDetailsFile(QStringList strlistData)
{
    qDebug() << "LCore:readHWDetailsFile::3:: Start. ";

    QStringList strlistInfo;
    QString strLine;
    QFile file(HW_DETAILS);

    if (file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        for(int i =0; i<strlistData.count(); i++)
        {
            int nFlag = 0;
            in.seek(0);
            while(!in.atEnd())
            {
                strLine = in.readLine();
                if(strLine.contains(strlistData[i]))
                {
                    strLine = strLine.section('=',1,1);
                    strlistInfo << strLine;
                    nFlag = 1;
                    break;
                }
            }
            if(nFlag == 0)
            {
                strlistInfo << "";
            }
        }

        file.close();
    }
    else
    {
        for(int i=0; i<strlistData.count(); i++)
            strlistInfo << "";
    }

    qDebug() << "LCore:readHWDetailsFile::3:: return strlistInfo = " << strlistInfo;
    return strlistInfo;
}

// cppcheck-suppress unusedFunction
void LCore::ModifyChromiumPreferencesFile(QStringList proxyOption)
{
    qDebug() << "LCore:ModifyChromiumPreferencesFile::3:: Start. ";
    if( proxyOption.at(0) != "1")
    {
        if(QFile::exists(QString(CHROMIUM_PREF_FILE)))
            QFile::remove(QString(CHROMIUM_PREF_FILE));
        return;
    }

    QString line;

    if(proxyOption.at(1).simplified().length())   line.append(" --proxy-server=http://").append(proxyOption.at(1).simplified());
    if(proxyOption.at(2).toInt())   line.append(":").append(proxyOption.at(2));

    if(proxyOption.at(3).toInt() == 0)
    {
        if(proxyOption.at(4).simplified().length())   line.append(" --proxy-server=https://").append(proxyOption.at(4).simplified());
        if(proxyOption.at(5).toInt())   line.append(":").append(proxyOption.at(5));

        if(proxyOption.at(6).simplified().length())   line.append(" --proxy-server=ftp://").append(proxyOption.at(6).simplified());
        if(proxyOption.at(7).toInt())   line.append(":").append(proxyOption.at(7));

        QString option;
        if(proxyOption.at(10).toInt())
            option = "sock4";
        else
            option = "sock5";
        if(proxyOption.at(8).simplified().length())   line.append(" --proxy-server=").append(option).append("://").append(proxyOption.at(8).simplified());
        if(proxyOption.at(9).toInt())   line.append(":").append(proxyOption.at(9));
    }

    QFile outputFile(QString(CHROMIUM_PREF_FILE));
    if( outputFile.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&outputFile);
        if(line.length())
            out << " --user-data-dir" + line + "\n";
    }
    outputFile.close();
    sync();

    qDebug() << "LCore:ModifyChromiumPreferencesFile::3:: End. ";
}

void LCore::updateResolvConf(const QString& type)
{
    qDebug() << "LCore:updateResolvConf::3:: Start. ";

    //------- This is to get contains from /etc/ppp/resolv.conf -------
    QStringList dnsList;
    QFile file(QString(PPP_RESOLV_CONF_FILE));
    if(!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    QTextStream in(&file);
    while (!in.atEnd())
    {
        QString line = in.readLine();
        dnsList << line;
    }
    file.close();

    if(dnsList.count())
    {
        QFile afile(QString(RESOLV_CONF_FILE));
        if(type == "connect")
        {
            QStringList strlistFinal;
            strlistFinal << dnsList;
            QStringList origList = readTable("NetworkDetails","","PrimaryDNS,SecondaryDNS");

            for(int i = 0; i< origList.count(); i++)
            {
                if(isValidIP(origList.at(i)))                         // added to remove ... entry from /etc/resolve.conf by ritesh
                    strlistFinal << "nameserver "+origList.at(i);
            }

            if(afile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&afile);

                //      out << "domain vdi.com" << "\n";
                //      strlistFinal << dnsList;

                for(int i = 0; i < strlistFinal.count(); i++)
                {
                    out << strlistFinal.at(i) << "\n";
                }
                afile.close();
                sync();
            }
            else
            {
                //--------- This is to update /etc/resolv.conf file ----------
                if(!afile.open(QIODevice::ReadOnly | QIODevice::Text))
                    return;

                QFile tfile(QString(TEMP_RESOLV_FILE));
                if(!tfile.open(QIODevice::WriteOnly | QIODevice::Text))
                    return;

                QTextStream out(&tfile);
                QTextStream inn(&afile);
                while (!inn.atEnd())
                {
                    QString line = inn.readLine();
                    if(dnsList.indexOf(line.simplified()) < 0)
                        out << line.simplified() << "\n";
                }

                tfile.close();
                sync();

                if(QFile::exists(QString(PPP_RESOLV_CONF_FILE)) && QFile::exists(QString(RESOLV_CONF_FILE)) && QFile::exists(QString(TEMP_RESOLV_FILE)))
                {
                    QFile::remove(QString(RESOLV_CONF_FILE));
                    QFile::copy(QString(TEMP_RESOLV_FILE), QString(QString(RESOLV_CONF_FILE)));
                    //                QFile::remove(QString(TEMP_RESOLV_FILE));
                    QFile::remove(QString(PPP_RESOLV_CONF_FILE));
                }
            }
            afile.close();
            sync();
        }
    }

    qDebug() << "LCore:updateResolvConf::3:: End. ";
}

int LCore::getTimeFormat()
{
    qDebug() << "LCore:getTimeFormat::3:: Start. ";

    QStringList strMode = readTable(QString("TaskbarProperties"), "", "Mode");
    QStringList strlistHrFormat;
    if(!strMode.isEmpty() && strMode.at(0).toInt())
    {
        strlistHrFormat = readTable(QString("TaskbarProperties"), "", "TimeFormat");
    }
    else
    {
        strlistHrFormat = readTable(QString("ApplianceProperties"), "", "TimeFormat");
    }

    int nTimeFormat = 1;        //default 12Hr so '1'

    if(strlistHrFormat.count())
    {
        if(strlistHrFormat.first().startsWith("%I:%M:%S %p     "))  /// Added 5 spaces for language translation. In translation time is not shown properly in Desktop mode if format is 12Hrs @ Ritesh 1Dec2016.
            nTimeFormat = 1;
        else
            nTimeFormat = 0;
    }
    else
        nTimeFormat = 1;

    return nTimeFormat;
}

// cppcheck-suppress unusedFunction
void LCore::WritePowerTermPSL_File(QStringList terminal_details)
{
    qDebug() << "LCore:WritePowerTermPSL_File::3:: Start. ";

    QString filename = QString(POWERTERM_CONFIG_DIR) + terminal_details.at(0) + ".psl";
    QFile file(filename);
    if (file.open(QIODevice::WriteOnly | QIODevice::Text ))
    {
        QTextStream out(&file);
        out << "ok = [ session open ]" << "\n";

        if(!terminal_details.at(21).toInt())
            out << "menu hide" << "\n";

        QString strPkgVersion = getPkgVersion("PowerTerm");
        int nCode = strPkgVersion.section(".",0,0).toInt();
        if(nCode >= 8)
            out << "keycode 113 left" << "\n";
        file.close();
        file.setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::WriteUser | QFile::ExeUser | QFile::ReadGroup | QFile::WriteGroup | QFile::ExeGroup | QFile::ReadOther | QFile::WriteOther | QFile::ExeOther);
        sync();
    }
    qDebug() << "LCore:WritePowerTermPSL_File::3:: return ";
    return;
}

void LCore::Launch2XClientAppsOnMenu(const QString& connectionName , int value)
{
    qDebug() << "LCore:Launch2XClientAppsOnMenu::3:: Start. ";

    QString Menufile = "/usr/share/icewm/menu";
    QString Tmpfile("/tmp/.menu");

    QFile mfile(Menufile);
    QFile tfile(Tmpfile);
    int flag=0;

    if (!mfile.open(QIODevice::ReadOnly | QIODevice::Text ))
        return ;

    if (!tfile.open(QIODevice::WriteOnly | QIODevice::Text ))
        return ;

    QTextStream out(&tfile);
    while (!mfile.atEnd())
    {

        QString line = mfile.readLine();
        if(line.contains("prog ") && line.contains(QString(MENU_ICON_PATH)+"2X-Client.png") && line.contains("xalf -s LaunchCommand \""+connectionName+"\" 2X-Client") )
        {
            flag = 1;
            break;
        }
        else if(line.contains("menu \""+connectionName+"\" \""+MENU_ICON_PATH+"2X-Client.png\" {"))
        {
            flag = 2;
            break;
        }
        else
            out << line;
    }

    QString xclientFileName = QString(CLIENT2X_DIR) +"2xclient."+connectionName;
    QFile file(xclientFileName);

    if((flag==1 || flag==2) && value)
    {
        if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        {}
        else
        {
            out << "\tmenu \""+connectionName+"\" \""+MENU_ICON_PATH+"2X-Client.png\" {\n";
            out << "\t\tprog \"Disconnect\" \""+QString(MENU_ICON_PATH)+"2X-Client.png\" xalf -s LaunchCommand \""+connectionName+"\" 2X-Client 0"+ "\n";

            QTextStream in(&file);
            QString line;
            while (!in.atEnd())
            {
                line = in.readLine();
                QString iconpath, appname, cmd;
                appname.clear();
                iconpath = line.section("\t",2,2);
                appname  = connectionName+ ":" + line.section("\t",0,0);
                qDebug() << "LCore:Launch2XClientAppsOnMenu::3:: appname :" << appname;
                cmd = "xalf -s LaunchCommand \""+ appname +"\" 2X-Client";
                qDebug() << "LCore:Launch2XClientAppsOnMenu::3:: cmd :" << cmd;
                out << "\t\tprog \""+appname+"\" \""+iconpath+"\" "+ cmd + "\n";
            }
            file.close();
            if(flag == 1)
                out << "\t}\n";
        }
    }

    if(value==0 )
    {
        qDebug() << "LCore:Launch2XClientAppsOnMenu::3:: value :" << value;
        if(flag==2)
        {
            while (!mfile.atEnd())
            {
                QString line = mfile.readLine();
                if(line == "\t}\n")
                    break;
            }
        }
        if(flag==1 || flag==2)
            out << "\tprog \""+connectionName+"\" \""+MENU_ICON_PATH+"2X-Client.png\" xalf -s LaunchCommand \""+connectionName+"\" 2X-Client" << "\n";

    }
    while (!mfile.atEnd()) {
        QString line = mfile.readLine();
        out << line;
    }

    tfile.close();
    mfile.close();
    sync();

    if(QFile::exists(Menufile))  QFile::remove(Menufile);
    QFile::copy( Tmpfile, Menufile);
    if(QFile::exists(Tmpfile))  QFile::remove(Tmpfile);

    qDebug() << "LCore:Launch2XClientAppsOnMenu::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::Launch2XClientAppsOnDesktop(const QString& connectionName, int value)
{
    qDebug() << "LCore:Launch2XClientAppsOnDesktop::3:: Start. ";

    QString xclinetFileName = QString(CLIENT2X_DIR) + "2xclient."+connectionName;
    if(!QFile::exists(xclinetFileName))
        return;

    QFile file(xclinetFileName);

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
    {}
    else
    {
        QTextStream in(&file);
        QString line;
        while (!in.atEnd())
        {
            line = in.readLine();
            QString iconpath, appname, cmd,strAppName;
            iconpath = line.section("\t",2,2);
            appname = connectionName +":" + line.section("\t",0,0);
            strAppName = line.section("\t",0,0);
            cmd = "xalf -s LaunchCommand \""+ appname +"\" 2X-Client";
            if(value)
            {
                QString columnType = "Name VARCHAR(100) , Date VARCHAR(50), Icon VARCHAR(50), Type VARCHAR(20), Path VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(Name, Path) ";
                QString columnValues = "'"+ strAppName +"', '02/07/2013', '"+ iconpath +"', 'Connection', '"+ cmd +"', 0, 0, 0, '', ''";
                writeTable("DesktopWidget", columnType, columnValues, "AppendNew");
            }
            else
                deleteEntry("DesktopWidget", "Name='"+strAppName+"' AND Path='"+cmd+"'");

            appname.clear();
        }
        file.close();
    }
    updateSharedMemory();

    qDebug() << "LCore:Launch2XClientAppsOnDesktop::3:: End. ";
}

// cppcheck-suppress unusedFunction
int LCore::authenticateLDAP(QStringList strlistArgs, int nLogin)
{
    qDebug() << "LCore:authenticateLDAP::3:: Start. ";

    QString strHost = strlistArgs.at(0);
    QString strBase = strlistArgs.at(1);
    QString strUsername = strlistArgs.at(2);
    QString strPassword = strlistArgs.at(3);
    bool bMapShare = QVariant(strlistArgs.at(4)).toBool();
    bool bEditPasswd = QVariant(strlistArgs.at(5)).toBool();

    Q_UNUSED(bMapShare);

    int nLDAPPort = LDAP_PORT;

    if(strHost.contains("ldap://"))
    {
        strHost = strHost.section("://", 1, 1);

    }
    QString strIP = strHost;

    if(strHost.contains(':'))
    {
        strIP = strHost.section(':', 0, -2);
        nLDAPPort = strHost.section(':', -1, -1).toInt();
    }

    if(!CheckServerExist(strIP, QString::number(nLDAPPort), QString()))
    {
        return 1;
    }


    strHost = strHost.prepend("ldap://");
    LDAP *ldap;
    struct berval creds;
    int desired_version = LDAP_VERSION3;
    char *ldap_host = strdup(strHost.toStdString().c_str());
    char *user_dn = strdup(QString("uid=%1,%2").arg(strUsername, strBase).toStdString().c_str());
    char *user_pw = strdup(strPassword.toStdString().c_str());

    int rc;
    rc = ldap_initialize(&ldap, ldap_host);
    if (rc != LDAP_SUCCESS) {
        free(ldap_host);
        free(user_dn);
        free(user_pw);
      ///  ldap_unbind_ext(ldap, nullptr, nullptr);
        qDebug() << "Failed to initialize LDAP connection.";
        return 2;
    }

    if(ldap_set_option(ldap, LDAP_OPT_PROTOCOL_VERSION, &desired_version) != LDAP_OPT_SUCCESS)
    {
        free(ldap_host);
        free(user_dn);
        free(user_pw);
        if(ldap != nullptr)
            ldap_unbind_ext(ldap, nullptr, nullptr);
        return 3;
    }

   // Prepare credentials
    creds.bv_val = user_pw;
    creds.bv_len = strlen(user_pw);

    // Perform SASL bind
    if(nLogin)
    {
        //rc = ldap_sasl_bind_s(ldap, strBase.toStdString().c_str(), LDAP_SASL_SIMPLE, &creds,  nullptr,  nullptr,  nullptr);
        rc = ldap_sasl_bind_s(ldap, user_dn, LDAP_SASL_SIMPLE, &creds,  nullptr,  nullptr,  nullptr);
    }
    else
    {
        //rc = ldap_sasl_bind_s(ldap, strBase.toStdString().c_str(), LDAP_AUTH_NONE, &creds,  nullptr,  nullptr,  nullptr);
        rc = ldap_sasl_bind_s(ldap, user_dn, LDAP_AUTH_NONE, &creds,  nullptr,  nullptr,  nullptr);
    }

    if (rc != LDAP_SUCCESS)
    {
        qDebug() << "LDAP authentication failed:" << ldap_err2string(rc);
        free(ldap_host);
        free(user_dn);
        free(user_pw);
        if(ldap != nullptr)
            ldap_unbind_ext(ldap, nullptr, nullptr);
        return 4;
    }

    if(bEditPasswd)
    {
        BerElement* ber;
        LDAPMessage* msg;

        char* base = strdup(strBase.toStdString().c_str());//"ou=policies,dc=os,dc=com";
        char* filter = "(objectClass=*)";
        char* dn = NULL;

        if(ldap_search_s(ldap, base, LDAP_SCOPE_SUBTREE, filter, NULL, 0, &msg) == LDAP_SUCCESS)
        {
            QFile file(QString(PASSWDFILE));
            if(file.open(QIODevice::Append | QIODevice::Text))
            {
                QTextStream out(&file);
                LDAPMessage* entry;
                for(entry = ldap_first_entry(ldap, msg); entry != NULL; entry = ldap_next_entry(ldap, entry))
                {
                    if((dn = ldap_get_dn(ldap, entry)) != NULL)
                        ldap_memfree(dn);

                    QString strUID, strUIDNumber, strGIDNumber, strGivenName, strLoginShell;
                    char* attr;

                    for(attr = ldap_first_attribute(ldap, entry, &ber); attr != NULL; attr = ldap_next_attribute(ldap, entry, ber))
                    {
                        char **vals;
                        if((vals = ldap_get_values(ldap, entry, attr)) != NULL)
                        {
                            int i;
                            for(i = 0; vals[i] != NULL; i++)
                            {
                                if(strcmp(attr, "uid") == 0)
                                    strUID = QString(vals[i]);

                                if(strcmp(attr, "uidNumber") == 0)
                                    strUIDNumber = QString(vals[i]);

                                if(strcmp(attr, "gidNumber") == 0)
                                    strGIDNumber = QString(vals[i]);

                                if(strcmp(attr, "givenName") == 0)
                                    strGivenName = QString(vals[i]);

                                if(strcmp(attr, "loginShell") == 0)
                                    strLoginShell = QString(vals[i]);
                            }

                            ldap_value_free(vals);
                        }

                        ldap_memfree(attr);
                    }

                    if(!strUID.isEmpty() && !strUIDNumber.isEmpty() && !strGIDNumber.isEmpty())
                    {
                        //nikhil:x:508:508:nikhil:/home/nikhil:/bin/bash
                        out << strUID << ":x:" << strUIDNumber << ":" << strGIDNumber << ":";
                        out << (strGivenName.isEmpty()?strUID:strGivenName) << ":";
                        //out << (bMapShare?QString(AUTHHOMEDIR)+strUID:QString("/root")) << ":";
                        out << QString(AUTHHOMEDIR) << strUID << ":";
                        out << (strLoginShell.isEmpty()?QString("/bin/bash"):strLoginShell) << "\n";
                    }

                    if(ber != NULL)
                        ber_free(ber, 0);
                }

                ldap_msgfree(msg);
                file.close();
                sync();
            }
        }
    }

    free(ldap_host);
    free(user_dn);
    free(user_pw);

    ldap_unbind_ext(ldap, nullptr, nullptr);

    qDebug() << "LCore:authenticateLDAP::3:: end. ";

    return 0; // Successful
}

// cppcheck-suppress unusedFunction
void LCore::createDefaultModularUSBTable(const QString& strDefault, const QString& strCheckModule)
{
    qDebug() << "LCore:createDefaultModularUSBTable::3:: Start. ";

    if(strCheckModule == "ModularUSB")
    {
        if(readTable(QString("ModularUSB"), "").isEmpty())
        {
            insertUDMValues(QString("ModularUSB"), strDefault, "0", "0", "", "", "", "", "", "", "0", "0");
            insertUDMValues(QString("ModularUSB"), strDefault, "1", "0", "", "", "", "", "", "", "0", "0");
            if(strDefault == "Deny All")
            {
                insertUDMValues(QString("ModularUSB"), strDefault, "0", "1", "Allow", "Hub (09)", "All", "Allow:Hub (09)", "09", "", "0","0"); //Default Entry : bez Hub should allow compulsory otherwise multiple udevd rules start (Hub required bez keyboard/mouse get deny in DenyAll case, so Hub should allow)
                insertUDMValues(QString("ModularUSB"), strDefault, QString::number(0), QString::number(1), "Allow", "Human Interface Device (03)", "All", "Allow:Human Interface Device (03)", "03", "", "0", "0");  //Default Entry : bez HID should allow compulsory for all images.
            }
        }
    }

    if(strCheckModule == "VMViewUDMSettings")
    {
        if(readTable(QString("VMViewGlobal"), "").isEmpty())
        {
            insertValues_VMView(QString("VMViewGlobal"), "0", "2", "0","0", "Select", "Select", "1","0","0","0","1","1","Server Settings","1","1","","None",0,0,0,0,0,"Info");  /// Cache default value change to 0 from 10 /// Set RTAV value to checked by default by ritesh 28th Feb 2017.  /// Again unset RATV Value by default on 4 March 2017

            QStringList strListVMViewGlobal = readDefaultsValue("VMViewGlobal"); //added to update vmview table if /sda1/data/.defaultvalues contains value,by namrata 27th april 2017
            if(strListVMViewGlobal.count())
            {
                foreach(QString strvalue,strListVMViewGlobal)
                {
                    QString strComnName = strvalue.section(":",0,0).simplified();
                    QString strcomnValue =strvalue.section(":",1,-1).remove("\"").simplified();
                    updateTable("VMViewGlobal", QStringList(""+strComnName+"='"+strcomnValue+"'"), "");
                }
            }
        }

        if(readTable(QString("VMViewUDMSettings"), "").isEmpty())
        {
            insertUDMValues(QString("VMViewUDMSettings"), strDefault, "0", "0", "", "", "", "", "", "", "0", "0");
            insertUDMValues(QString("VMViewUDMSettings"), strDefault, "1", "0", "", "", "", "", "", "", "0", "0");
            if(strDefault == "Deny All")
                insertUDMValues(QString("VMViewUDMSettings"), strDefault, "0", "1", "Allow", "Hub (09)", "All", "Allow:Hub (09)", "09", "",  "0", "0"); //Default Entry : bez Hub should allow compulsory otherwise multiple udevd rules start (Hub required bez keyboard/mouse get deny in DenyAll case, so Hub should allow)
        }
    }

    if(strCheckModule == "PNAUDMSettings")
    {
        if(readTable(QString("PNAgentGlobal"), "").isEmpty())
        {
            if(getOSDetails(QString(OSBUILD_FILE)).contains("GNP", Qt::CaseInsensitive))
                insertValues_PNAgent(QString("PNAgentGlobal"), "0", "0", "0", "0", "0","0","1","0","0","None", "1", "1", "1", "1", "1");
            else if(getOSDetails(QString(OSBUILD_FILE)).contains("EAD", Qt::CaseInsensitive))
                insertValues_PNAgent(QString("PNAgentGlobal"), "0", "0", "1", "0", "1","0","1","0","0","None", "1", "1", "1", "1", "1");
            else
                insertValues_PNAgent(QString("PNAgentGlobal"), "0", "0", "0", "0", "1","0","1","0","0","None", "1", "1", "1", "1", "1");

            QStringList strListPNAgentGlobal = readDefaultsValue("PNAgentGlobal"); //added to update vmview table if /sda1/data/.defaultvalues contains value,by namrata 27th april 2017
            if(strListPNAgentGlobal.count())
            {
                foreach(QString strvalue,strListPNAgentGlobal )
                {
                    QString strComnName = strvalue.section(":",0,0).simplified();
                    QString strcomnValue =strvalue.section(":",1,-1).remove("\"").simplified();
                    updateTable("PNAgentGlobal", QStringList(""+strComnName+"='"+strcomnValue+"'"), "");
                }
            }
        }

        if(readTable(QString("PNAUDMSettings"), "").isEmpty())
        {
            insertUDMValues(QString("PNAUDMSettings"), strDefault, "0", "0", "", "", "", "", "", "", "0", "0");
            insertUDMValues(QString("PNAUDMSettings"), strDefault, "1", "0", "", "", "", "", "", "", "0", "0");
            if(strDefault == "Deny All")
                insertUDMValues(QString("PNAUDMSettings"), strDefault, "0", "1", "Allow", "Hub (09)", "All", "Allow:Hub (09)", "09", "", "0", "0"); //Default Entry : bez Hub should allow compulsory otherwise multiple udevd rules start (Hub required bez keyboard/mouse get deny in DenyAll case, so Hub should allow)
        }
    }

    qDebug() << "LCore:createDefaultModularUSBTable::3:: End. ";
}

void LCore::insertUDMValues(const QString& strModuleName, const QString& strDefaultPer, const QString& strType, const QString& strStatus, const QString& strRule, const QString& strClass, const QString& strSubclass, const QString& strName, const QString& strParentID, const QString& strChildID, const QString& strEnableDisableCondition, const QString& strSerialNumber )
{
    qDebug() << "LCore:insertUDMValues::3:: Start. ";
    QString data, columnType, columnValues;
    columnType = " DefaultPermission VARCHAR(20), Type INTEGER, Status INTEGER, Permission VARCHAR(20), Parent VARCHAR(100), Child VARCHAR(200), Description VARCHAR(500), ParentID VARCHAR(20), ChildID VARCHAR(20), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(Type, Parent, Child, Extra2)";
    columnValues = " '"+ strDefaultPer +"', "+ strType +", "+ strStatus +", '"+ strRule +"', '"+ strClass +"', '"+ strSubclass +"', '"+ strName +"', '"+ strParentID +"', '"+ strChildID +"',"+ strEnableDisableCondition+", '"+ strSerialNumber +"', 0, '', '' ";
    data = writeTable(strModuleName, columnType, columnValues, "AppendNew");
    Q_UNUSED(data);
    qDebug() << "LCore:insertUDMValues::3:: End. ";
}

void LCore::insertValues_VMView(const QString& strModuleName, const QString& strLocalUDMSettings, const QString& strPreferences, const QString& strCache, const QString& RTAV, const QString& strRtavDev, const QString& strRtavOPDev, const QString& USBRedirection, const QString& SendCtrlAltDel, const QString& ShareableUSB, const QString& strEnableFIPS,const QString& strEnableFloatingBar,const QString& strRelaunchAppsMode, const QString& strProtocol,const QString& USBConnectAtStartup,const QString& USBConnectAtInsert, const QString& strDesktopPool, const QString& strPresetLoginInfo, int nEnableMultimediaRedirection, int nHEVC, int nCRL, int nOSProxySettings, int nSSLProxy, const QString& strloglevel)
{
    qDebug() << "LCore:insertValues_VMView::3:: Start. ";
    QString data, columnType, columnValues;

    columnType = " LocalUDMSettings INTEGER, Preferences INTEGER, Cache INTEGER, RTAV INTEGER, RTAVIPDevices VARCHAR(30), RTAVOPDevices VARCHAR(20),USBRedirection INTEGER, Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), Protocol VARCHAR(30), USBConnectAtStartup INTEGER, USBConnectAtInsert INTEGER, Extra6 INTEGER, Extra7 INTEGER, Extra8 INTEGER, Extra9 INTEGER, Extra10 INTEGER, Extra11 INTEGER, Extra12 INTEGER, Extra13 INTEGER, Extra14 VARCHAR(30), Extra15 VARCHAR(30), Extra16 VARCHAR(30), Extra17 VARCHAR(30), Extra18 VARCHAR(30), Extra19 VARCHAR(30), Extra20 VARCHAR(30)";
    columnValues = " "+ strLocalUDMSettings +", "+ strPreferences +", "+ strCache +", "+RTAV+",'"+strRtavDev+"', '"+strRtavOPDev+"', "+USBRedirection+" ,"+SendCtrlAltDel+", "+ShareableUSB+", "+ strEnableFIPS +", "+ strEnableFloatingBar +", "+strRelaunchAppsMode+",'"+strProtocol+"', '"+USBConnectAtStartup+"', '"+USBConnectAtInsert+"', '"+QString::number(nEnableMultimediaRedirection)+"', '"+QString::number(nHEVC)+"', '"+QString::number(nCRL)+"', '"+QString::number(nOSProxySettings)+"', '"+QString::number(nSSLProxy)+"', 0, 0, 0,'"+strDesktopPool+"','"+strPresetLoginInfo+"', '"+strloglevel+"', '', '', '', ''";
    data = writeTable(strModuleName, columnType, columnValues, "");
    Q_UNUSED(data);

    qDebug() << "LCore:insertValues_VMView::3:: End. ";
}

void LCore::insertValues_PNAgent(const QString& strModuleName, const QString& strLocalUDMSettings, const QString& strServerSideRendering, const QString& strHDX_RTME, const QString& strFlashRed, const QString& strClipboard, const QString& HDXOverUDP, const QString& ShowFloatingBar, const QString& CitrixDisconnectONChildClose, const QString& strFullScreenMode, const QString& strPresetLoginInfo, const QString& strBrowserContentRedirection, const QString& strMicrosoft_Teams, const QString& strSkype, const QString& strZoom, const QString& strWebEx, const QString& strCisco_VDI)
{
    qDebug() << "LCore:insertValues_PNAgent::3:: Start. ";
    QString data, columnType, columnValues;

    columnType = " LocalUDMSettings INTEGER,ServerSideRendering INTEGER,HDX_RTME INTEGER, FlashRedirection INTEGER, Clipboard INTEGER, Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), BrowserContentRedirection INTEGER, Extra6 INTEGER, Extra7 INTEGER, Extra8 INTEGER, Extra9 INTEGER, Extra10 VARCHAR(30), Extra11 VARCHAR(30), Extra12 VARCHAR(30), Extra13 VARCHAR(30), Extra14 VARCHAR(30)";
    columnValues = " "+ strLocalUDMSettings +", "+ strServerSideRendering +","+ strHDX_RTME +", "+strFlashRed+","+ strClipboard+", "+HDXOverUDP+", "+ShowFloatingBar+","+CitrixDisconnectONChildClose+","+QString(strFullScreenMode)+",'"+strPresetLoginInfo+"',"+ strBrowserContentRedirection +","+strMicrosoft_Teams+", "+strSkype+", "+strZoom+" , "+strWebEx+",'"+strCisco_VDI+"', '"+ +"','"+ +"', '"+ +"','"+ +"'";
    data = writeTable(strModuleName, columnType, columnValues, "");
    Q_UNUSED(data);
    qDebug() << "LCore:insertValues_PNAgent::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::insertDefaultValues_ImprivataGlobal()
{
    QString checkImprivata = readImprivataGlobalTable("Imprivata");
    QString strMacAddress =getMac().remove(":");
    if(strMacAddress.isEmpty())
    {
        strMacAddress =getMacForWifi().remove(":");
    }
    qDebug()<<"strMacAddress: "<<strMacAddress;
    system(QString("echo \"  strMacAddress:    = %1  \"  >> /root/ImprivataOS.log").arg(strMacAddress).toLatin1());

    bool bIsImprivataOS = false;
    QStringList strlistImprivataOS = readDefaultsValue("ImprivataOS");
    if(strlistImprivataOS.count() && strlistImprivataOS.at(0).toInt())
        bIsImprivataOS = true;

    bool bIsImprivataCloudDesktop = false;
    QString strcloudDesktop = checkClientisCloudDesktop();
    QStringList strlistImprivataCloudDesktop = readDefaultsValue("ImprivataCloudDesktop");
    if(strlistImprivataCloudDesktop.count() && strlistImprivataCloudDesktop.at(0).toInt())
        bIsImprivataCloudDesktop = true;

    // ***************************************REMOVE BELOW ondition before commit

    if(bIsImprivataCloudDesktop && strcloudDesktop == "CD")
    {
        system(QString("echo \"  Condition Success: bIsImprivataCloudDesktop   = %1 \n strcloudDesktop  =%2 \"  >> /root/ImprivataOS.log").arg("bIsImprivataCloudDesktop =true").arg(strcloudDesktop).toLatin1());
    }
    if( bIsImprivataOS && strMacAddress.startsWith(QString(COMPAREOSMACSTRING)))
    {
        system(QString("echo \"  Condition Success: bIsImprivataOS   = %1 \n strMacAddress  =%2 \"  >> /root/ImprivataOS.log").arg("bIsImprivataOS =true").arg(strMacAddress).toLatin1());
    }
    //******************************************************************

    if(checkForLenovoValidBoards() || readGrubFile(QString("ltm")) || ( bIsImprivataOS && strMacAddress.startsWith(QString(COMPAREOSMACSTRING))) || (bIsImprivataCloudDesktop && strcloudDesktop == "CD"))
    {
        QString str = (strcloudDesktop.contains("CD")?QString("ImprivataCloudDesktop") :QString("ImprivataOS"));

        system(QString("echo \"  read value from defaultvalue:    = %1 \n strMacAddress  =%2 \"  >> /root/ImprivataOS.log").arg(str).arg(strMacAddress).toLatin1());

        if(!checkImprivata.isEmpty())
        {
            if(checkImprivata == "Deactive")
            {
                writeImprivataGlobalTable("Imprivata", "Active");
            }
            return;
        }

        QStringList strListImprivata = readDefaultsValue("Imprivata");
        QStringList strListImprivataCanHideCancelButton = readDefaultsValue("ImprivataCanHideCancelButton");
        QStringList strListImprivataCanHideRebootShutdownButtons = readDefaultsValue("ImprivataCanHideRebootShutdownButtons");
        QStringList strListImprivataForceLogout = readDefaultsValue("ImprivataForceLogout");
        QStringList strListshowproxreadergif = readDefaultsValue("showproxreadergif");
        QStringList strListshowfingerprintgif = readDefaultsValue("showfingerprintgif");
        QStringList strListshowimprivatasystemtoolbuttons = readDefaultsValue("showimprivatasystemtoolbuttons");
        QStringList strListDisableVC = readDefaultsValue("DisableVC");

        if((!strListImprivata.isEmpty() && strListImprivata.at(0) == "Active") || QFile::exists("/usr/os-bin/Imprivata"))
        {
            writeImprivataGlobalTable("Imprivata", "Active");
        }

        if(!strListImprivataCanHideCancelButton.isEmpty())
        {
            if(strListImprivataCanHideCancelButton.at(0).toInt())
                writeImprivataGlobalTable("CancelButton", "0");
            else
                writeImprivataGlobalTable("CancelButton", "1");
        }

        if(!strListImprivataCanHideRebootShutdownButtons.isEmpty())
        {
            if(strListImprivataCanHideRebootShutdownButtons.at(0).toInt())
                writeImprivataGlobalTable("RebootAndShutdownButton", "0");
            else
                writeImprivataGlobalTable("RebootAndShutdownButton", "1");
        }

        if(!strListImprivataForceLogout.isEmpty())
        {
            if(strListImprivataForceLogout.at(0).toInt())
                writeImprivataGlobalTable("LogoutAndLockScreen", "1");
            else
                writeImprivataGlobalTable("LogoutAndLockScreen", "0");
        }

        if(!strListshowproxreadergif.isEmpty())
        {
            if(strListshowproxreadergif.at(0).toInt())
                writeImprivataGlobalTable("ShowProxReaderAnimation", "1");
            else
                writeImprivataGlobalTable("ShowProxReaderAnimation", "0");
        }
        else
        {
            writeImprivataGlobalTable("ShowProxReaderAnimation", "1");
        }

        if(!strListshowfingerprintgif.isEmpty())
        {
            if(strListshowfingerprintgif.at(0).toInt())
                writeImprivataGlobalTable("ShowFingerPrinterAnimation", "1");
            else
                writeImprivataGlobalTable("ShowFingerPrinterAnimation", "0");
        }
        else
        {
            writeImprivataGlobalTable("ShowFingerPrinterAnimation", "1");
        }

        if(!strListshowimprivatasystemtoolbuttons.isEmpty())
        {
            if(strListshowimprivatasystemtoolbuttons.at(0).toInt())
                writeImprivataGlobalTable("ShowSysteminfoLogsButton", "1");
            else
                writeImprivataGlobalTable("ShowSysteminfoLogsButton", "0");
        }
        else
        {
            writeImprivataGlobalTable("ShowSysteminfoLogsButton", "1");
        }

        if(!strListDisableVC.isEmpty())
        {
            if(strListDisableVC.at(0).toInt())
                writeImprivataGlobalTable("VirtualChannel", "0");
            else
                writeImprivataGlobalTable("VirtualChannel", "1");
        }
        else
        {
            writeImprivataGlobalTable("VirtualChannel", "1");
        }

        writeImprivataGlobalTable("AliasName", "1");
        writeImprivataGlobalTable("LaunchSelfServiceAfterLogin", "1");
        writeImprivataGlobalTable(QString("NetworkButton"), QString("1"));
    }
    else
    {
        if(!checkImprivata.isEmpty() && checkImprivata.trimmed() == "Active")
        {
            writeImprivataGlobalTable("Imprivata", "Deactive");

            QStringList strlstImprivata = readTable("SysConf", "Property='PromptLogin'", "Value");

            if(strlstImprivata.count() && strlstImprivata.first() == "Imprivata")
            {
                updateTable("sysconf", QStringList() << "Value='Admin'", "Property='PromptLogin'");
            }
            updateTable("sysconf", QStringList() << "Value='Disable'", "Property='Imprivata'");
        }
    }
}

QString LCore::getMd5Sum(QByteArray byteArray)
{
    qDebug() << "LCore:getMd5Sum::3:: Start.";

    QCryptographicHash hash(QCryptographicHash::Md5);
    hash.addData(byteArray);
    QByteArray result = hash.result();
    QString strMd5Sum = QString(result.toHex());

    qDebug() << "LCore:getMd5Sum::3:: return md5sum =" << strMd5Sum;
    return strMd5Sum;
}

// cppcheck-suppress unusedFunction
void LCore::writePtconnsFile(QString strConnName, QString strIP, QString strAnswerBackMessage, int nOption)
{
    qDebug() << "LCore:writePtconnsFile::3:: Start. ";

    QFile file(QString(PTCONNSPATH));
    if(nOption == 1)
    {
        if(file.open(QIODevice::Append | QIODevice::Text))
        {
            QTextStream out(&file);
            out << "\n" << QString("[") + strConnName + QString("]") + "\n";
            out << QString("IP = ") + strIP << "\n";
            if(!strAnswerBackMessage.isEmpty())
                out << QString("AnswerBackmessage = ") + strAnswerBackMessage << "\n";
            file.close();
            sync();
        }
    }
    else
    {
        if(file.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QStringList strlist;
            bool bIgnore = false;

            QTextStream in(&file);
            while(!in.atEnd())
            {
                QString strLine = in.readLine();

                if(strLine.isEmpty())
                    continue;

                if(strLine.startsWith('[') && bIgnore)
                    bIgnore = false;

                if(strLine.contains(strConnName))
                    bIgnore = true;

                if(!bIgnore)
                    strlist << strLine;
            }

            file.close();

            if(nOption == 2)
            {
                strlist << QString("[%1]").arg(strConnName);
                strlist << QString("IP = %1").arg(strIP);
                if(!strAnswerBackMessage.isEmpty())
                    strlist << QString("AnswerBackmessage = %1").arg(strAnswerBackMessage);
            }

            if(file.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&file);

                for(int i = 0; i < strlist.count(); i++)
                {
                    QString strLine = strlist.at(i);
                    if(strLine.startsWith('['))
                        out << "\n";
                    out << strLine << "\n";
                }

                file.close();
                sync();
            }
        }
    }

    QFile ptconnsfile(QString(PTCONNSPATH));
    ptconnsfile.open(QIODevice::ReadOnly | QIODevice::Text);
    QByteArray byteArraySFile = ptconnsfile.readAll();
    ptconnsfile.close();

    QString strptconnsMd5sum = getMd5Sum(byteArraySFile);

    QString ColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
    QString Values = "'" +QString("ptconnsMd5sum")+ "', '" + strptconnsMd5sum +"'";
    writeTable("SysConf", ColumnType, Values, "AppendNew");

    qDebug() << "LCore:writePtconnsFile::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::DisplayErrorMessageBox(QString title, QString message, QString strIconPath)
{
    if(message.trimmed().length())
    {
        //        QMessageBox msgBox(QMessageBox::Information, title,  message);
        //        msgBox.setWindowIcon(QIcon(strIconPath));
        //        msgBox.show();
        //        setWidgetGeometry(&msgBox, qApp);
        //        msgBox.exec();

        QDesktopWidget *dw = qApp->desktop();
        int nScreenNumber = dw->screenNumber(QCursor::pos());
        QWidget *pw = dw->screen(nScreenNumber);
        QMessageBox msgBox(QMessageBox::Information, title,  message, QMessageBox::Ok, pw);
        msgBox.setWindowIcon(QIcon(strIconPath));

        QSize mSize = msgBox.sizeHint();
        QRect screenRect = pw->rect();

        msgBox.move(QPoint((screenRect.width()-mSize.width())/2, (screenRect.height()-mSize.height())/2));

        msgBox.exec();
    }
}

// cppcheck-suppress unusedFunction
void LCore::createDenyAllFile()
{
    qDebug() << "LCore:createDenyAllFile::3:: Start. ";
    QFile rulefile(QString(MODULARFILEPATH));
    if (rulefile.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&rulefile);
        out << "SUBSYSTEMS==\"usb\", ACTION==\"add\", OPTIONS=\"ignore_device\", OPTIONS+=\"last_rule\", RUN+=\""+QString(USBID)+" /sys%p/driver/ %k\"" << "\n\n";
        out << "LABEL=\"no_more_rule\"" << "\n";
        rulefile.close();
        sync();
    }
    qDebug() << "LCore:createDenyAllFile::3:: End. ";
}

//for calculating free space in /root for cleanup
// cppcheck-suppress unusedFunction
QString LCore::calculateDiskFreeSpace()
{
    qDebug() << "LCore:calculateDiskFreeSpace::3:: Start. ";
    QString buff;
    char buffer[500];
    memset(buffer, 0, sizeof(buffer));
    QString strCommand = "df -P $HOME | tail -1 | awk '{print $4}'";
    FILE* pfile = popen(strCommand.toLatin1(),"r");
    if(pfile)
    {
        while(fgets(buffer, sizeof(buffer), pfile))
        {
            buffer[strlen(buffer)-1] = '\0';
            if(strlen(buffer) && strcmp(buffer,"Available") != 0)
                buff.append( buffer );
            memset(buffer, 0, sizeof(buffer));
        }
        pclose(pfile);
    }

    qDebug() << "LCore:calculateDiskFreeSpace::3:: End. ";
    return buff;
}

// cppcheck-suppress unusedFunction
void LCore::setPrimaryDevice()
{
    qDebug() << "LCore:setPrimaryDevice::3:: Start. ";
    if(qgetenv("BOARDARCH") != QString("via-arm"))
    {
        QString strDevice;
        QProcess *proc = new QProcess();
        proc->start("xrandr");
        proc->waitForFinished(-1);
        while(!proc->atEnd())
        {
            QString line = proc->readLine();
            if(line.section(" ", 1, 1) == "connected")
            {
                if(line.contains("primary"))
                {
                    strDevice.clear();
                    break;
                }

                if(strDevice.isEmpty())
                    strDevice = line.section(" ", 0, 0);
            }
        }
        delete proc;

        if(!strDevice.isEmpty())
        {
            QString strCmd = QString("xrandr.orig --output %1 --primary").arg(strDevice);
            QProcess::execute(strCmd);
        }
        QFile::remove("/tmp/xrandrout");
    }

    qDebug() << "LCore:setPrimaryDevice::3:: End. ";
}

void LCore::setGateways(const QString& strType, const QString& strDevice)
{
    qDebug() << "LCore:setGateways::3:: Start. ";

    if(getNetworkDeviceLinkStatus(strDevice,strType) == false)
    {
        qDebug() << QString("%1 is not connected").arg(strDevice);
        return;
    }

    QString strRoute;
    QList<QStringList> listGateways;

    QStringList strListNetwork = readTable("NetworkDetails", "NetworkType='"+ strType +"'", "Gateway");

    if(strListNetwork.count())
        strRoute = strListNetwork.at(0);

    listGateways = readCompleteTable("Gateway", "");

    if(!strRoute.isEmpty() || listGateways.count())
    {
        QStringList arguments;

        arguments.clear();
        arguments << "del" << "default"<< "dev" << strDevice;
        QProcess::execute("route", arguments);

        if(strRoute.length())
        {
            arguments.clear();
            arguments << "add" << "default" << "gw" << strRoute << "dev" << strDevice;
            QProcess::execute("route", arguments);
        }

        foreach(const QStringList& listValues, listGateways)
        {
            arguments.clear();
            if(listValues.count() >= 3)
            {
                arguments << "add" << "-net"  << listValues.at(1) << "netmask" << listValues.at(2) << "gw" << listValues.at(0);
                qDebug() << "LCore:setGateways::3:: additional route = " << QProcess::execute("route", arguments);
            }
        }

        QString strEthernetDevice = getEthernetDevice();
        QStringList strListWirelessDevice = ListWirelessInterfaces();

        if(QFile::exists("/usr/os-bin/ifmetric"))
        {
            QNetworkInterface interface = QNetworkInterface::interfaceFromName(strEthernetDevice);
            if(interface.flags().testFlag(QNetworkInterface::IsRunning))
            {
                //qDebug()<<"ifmetric status"<<strDevice<<QProcess::execute("/usr/os-bin/ifmetric", QStringList() << strDevice << QString::number(50));
                if(!strListWirelessDevice.isEmpty())
                {
                    QProcess::execute("/usr/os-bin/ifmetric", QStringList() << strListWirelessDevice.first() << QString::number(100));
                }
            }
            else if(!strListWirelessDevice.isEmpty())
            {
                QString strWirelessDevice = strListWirelessDevice.first();
                QNetworkInterface interfacen = QNetworkInterface::interfaceFromName(strWirelessDevice);
                if(interfacen.flags().testFlag(QNetworkInterface::IsRunning))
                {
                    if(isWifiConfigured(strWirelessDevice))
                    {
                        QProcess::execute("/usr/os-bin/ifmetric", QStringList() << strWirelessDevice << QString::number(0));
                    }
                    //QProcess::execute("/usr/os-bin/ifmetric", QStringList() << strEthernetDevice << QString::number(100));
                }
            }
        }
    }
    qDebug() << "LCore:setGateways::3:: End. ";
}

void LCore::writeHostnameInDHCPConf(QString strHostname)
{
    qDebug() << "LCore:writeHostnameInDHCPConf::3:: Start. ";
    QStringList list;
    bool bFound = false;

    QFile file(DHCP_CONF_FILE);
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        while(!in.atEnd())
        {
            QString line = in.readLine();
            if(line.startsWith("send host-name "))
            {
                bFound = true;
                line = QString("send host-name \"%1\";").arg(strHostname);
            }
            list << line;
        }

        file.close();
    }
    if(!bFound)
        list << QString("send host-name \"%1\";").arg(strHostname);

    if(file.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&file);
        for(int i = 0; i < list.count(); i++)
            out << list.at(i) << "\n";
        file.close();
    }

    sync();

    qDebug() << "LCore:writeHostnameInDHCPConf::3:: End. ";
}

QString LCore::OSBuildVersion()
{
    qDebug() << "LCore:OSBuildVersion::3:: Start. ";
    QString build;
    QFile file(QString(OSBUILD_FILE));
    if(file.exists())
    {
        if (file.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&file);
            build = in.readLine();
            file.close();
        }
    }
    qDebug() << "LCore:OSBuildVersion::3:: return build = " << build;
    return build;
}

// cppcheck-suppress unusedFunction
void LCore::updateGrubConf()
{
    qDebug() << "LCore:updateGrubConf::3:: Start. ";

    system("mount -o remount,rw,nodev /sda1 2> /dev/null");
    QFile myfile, tmpfile;

    if(QFile::exists(GRUBFILE))
    {
        myfile.setFileName(GRUBFILE);
        tmpfile.setFileName(TEMPGRUBFILE);
    }
    else
    {
        myfile.setFileName(EFIGRUBFILE);
        tmpfile.setFileName(EFITEMPGRUBFILE);
    }

    if(myfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream line(&myfile);
        if(tmpfile.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream mywfile(&tmpfile);
            while(!line.atEnd())
            {
                QString strDefault = line.readLine();
                bool found = strDefault.contains("default ");
                if(found)
                    mywfile << "default 1\n";
                else
                    mywfile << strDefault << "\n";
            }
            tmpfile.close();
        }
        myfile.close();
    }

    if(QFile::exists(GRUBFILE))
    {
        QFile::remove(GRUBFILE);
        QFile::copy(TEMPGRUBFILE, GRUBFILE);
    }
    else
    {
        QFile::remove(EFIGRUBFILE);
        QFile::copy(EFITEMPGRUBFILE, EFIGRUBFILE);
    }
    system("mount -o remount,ro,nodev /sda1 2> /dev/null");

    qDebug() << "LCore:updateGrubConf::3:: End. ";
}

// cppcheck-suppress unusedFunction
bool LCore::setSSHPassword(QString strNewPassword)
{
    qDebug() << "LCore:setSSHPassword::3:: Start. ";
    bool bReturnStatus = false;

    int nsyncPwdStatus = 1;

    QStringList list = readTable("SysConf", "Property='SyncPasswordValue'", "Value");
    if(list.count())
        nsyncPwdStatus = list.at(0).toInt();

    if(QFile::exists(JLRTEMPLATEFILE))
    {
        nsyncPwdStatus=0;
    }

    if(nsyncPwdStatus)
    {
        QProcess *process = new QProcess;
        process->start(QString("passwd"), QStringList() << QString("root"));
        process->waitForStarted(-1);
        QByteArray ba;
        ba.append(strNewPassword.toUtf8()+QString("\n"));
        process->write(ba);
        ba.clear();
        ba.append(strNewPassword.toUtf8()+QString("\n"));
        process->write(ba);
        process->closeWriteChannel();
        process->waitForFinished(-1);
        bReturnStatus = (!process->exitCode())?true:false;
        process->deleteLater();
    }

    qDebug() << "LCore:setSSHPassword::3:: return  bReturnStatus = " << bReturnStatus;
    return bReturnStatus;
}

//for creating link of that language, file is written.
// cppcheck-suppress unusedFunction
void LCore::createLanguageLink()
{
    qDebug() << "LCore:createLanguageLink::3:: Start. ";

    QStringList listValues = readTable("SysConf", "Property='Language'", "Value");
    if(listValues.count())
    {
        QString strSource = QString(TRANSLATIONPATH) + listValues.at(0);
        unlink(TRANSLATIONLINK);
        if(QFile::exists(strSource))
            QFile::link(strSource, QString(TRANSLATIONLINK));
    }

    QMap<QString,QString>mapLang;
    mapLang.insert("English", "en_US.utf8");
    mapLang.insert("German" , "de_DE.utf8");
    mapLang.insert("French" , "fr_FR.utf8");
    mapLang.insert("Spanish" , "es_ES.utf8");
    mapLang.insert("Chinese" , "zh_CN.utf8");
    mapLang.insert("Russian" , " ");
    mapLang.insert("Japanese" , "ja_JP.utf8");
    QString strLanguage = listValues.at(0);
    QString strLangValue = mapLang.value(strLanguage);

    QFile file(QString(LANGUAGE_PATH));
    if (file.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&file);
        out << "export LANG=" << strLangValue;
        if(strLanguage == "French")
            out << "\nexport LC_ALL=" << "fr_FR.utf8";
        else
            out << "\nexport LC_ALL=" << strLangValue;
        file.close();
        sync();
    }

    if(getOSDetails(QString(OSBUILD_FILE)).contains("BLK", Qt::CaseInsensitive) &&  (listValues.count() && listValues.at(0)== "English"))
        system(QString("export LANG=\"en_US.utf8\"").toLatin1());

    QProcess::execute(QString("rm"), QStringList()<<"/usr/share/icewm/themes/xp/taskbar/icewm.xpm");          // 18/08/2017 -- taskbar's name are change in other language
    QProcess::execute(QString("cp"), QStringList()<< "/usr/os-bin/images/"+listValues.at(0).toLower()+".xpm"  <<"/usr/share/icewm/themes/xp/taskbar/icewm.xpm");

    qDebug() << "LCore:createLanguageLink::3:: End. ";
}

void LCore::ExecuteVMSSettings()
{
    qDebug() << "LCore:ExecuteVMSSettings::3:: Start. ";

    if(QFile::exists("/tmp/.executevmssettings"))
    {
        return;
    }

    QFile filevms("/tmp/.executevmssettings");
    if(filevms.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        filevms.close();
    }

    const char* cunicode = "Æ";
    QString strVmsAutoCheck , strToken = QString::fromUtf8(cunicode); //("1Æ1Æ1Æ");
    QString strSpecialChar = "1" + strToken + "1" + strToken + "1" + strToken;
    QString strDeleteHostEntery;
    QString columnType, columnValues;
    columnType = "DHCPParams INTEGER, CurrentServerIP VARCHAR(20), OldServerIP VARCHAR(20), PortNo INTEGER,"
                 "GroupName VARCHAR(100), pollInterval INTEGER, CommunicationType VARCHAR(50), WebServiceName VARCHAR(20), ClientStatus INTEGER, CACertificate VARCHAR(200)" ;

    QStringList strVMSDHCPParams = readTable("ClientSettings","","DHCPParams, ClientStatus, CurrentServerIP");
    QStringList dhcpparams = readTable("DHCPParams", "");

    QString strPrevDHCPIP ;

    bool exists = QFile::exists("/sda1/data/.AutoVmsCheck");

    if(exists)
    {
        QFile fileAutoVmsCheck("/sda1/data/.AutoVmsCheck");
        bool open = fileAutoVmsCheck.open(QIODevice::ReadOnly | QIODevice::Text);

        if(open)
        {
            QTextStream in(&fileAutoVmsCheck);
            while (!in.atEnd())
            {
                strVmsAutoCheck = in.readLine();
                strVmsAutoCheck = strVmsAutoCheck.simplified();
            }
        }
        fileAutoVmsCheck.close();
    }

    bool AutoDHCPVmsCheck = QFile::exists("/sda1/data/.AutoDHCPVmsCheck");

    QString strreadDHCPIP;
    if(AutoDHCPVmsCheck)
    {
        QFile fileAutoDHCPVmsCheck("/sda1/data/.AutoDHCPVmsCheck");
        bool openAutoDHCPVmsCheck = fileAutoDHCPVmsCheck.open(QIODevice::ReadOnly | QIODevice::Text);
        if(openAutoDHCPVmsCheck)
        {
            QTextStream in(&fileAutoDHCPVmsCheck);
            while (!in.atEnd())
            {
                strreadDHCPIP = in.readLine();
                if(strreadDHCPIP.contains("DHCPIP"))
                {
                    strPrevDHCPIP = strreadDHCPIP.section("=",-1).trimmed();
                }
            }
            QFile::remove("/sda1/data/.AutoDHCPVmsCheck");
        }
        fileAutoDHCPVmsCheck.close();
    }

    QStringList strClientStatus = readTable("ClientSettings","");
    if(!strVmsAutoCheck.isEmpty())
    {
        if(strVmsAutoCheck == "0" || strVmsAutoCheck == "1")
        {
            if(strClientStatus.count() > 0)
            {
                bool bcheck = false;
                if(IsImpactClient() && strClientStatus.at(1) != "WebIAS")
                {
                    bcheck = true;
                }
                else if(strClientStatus.at(1) != "unifiedx")
                {
                    bcheck = true;
                }
                else if((!strPrevDHCPIP.isEmpty()) && (strClientStatus.at(1) != strPrevDHCPIP) && (dhcpparams.count()))
                {
                    bcheck = true;
                }

                if(bcheck)
                {
                    if(((strClientStatus.count() > 1) && (strClientStatus.at(1) != "0.0.0.0")) && (strVMSDHCPParams.count()>0 && strVMSDHCPParams.at(0) == "1") && (strVMSDHCPParams.count()>1 && strVMSDHCPParams.at(1) == "1"))
                    {
                        QFile::remove("/tmp/.executevmssettings");
                        return;
                    }
                }

                if(bcheck == false)
                {
                    QStringList strListHBeats = readTable("ClientSettings","","pollInterval");
                    if((strListHBeats.count() > 0) && (!strListHBeats.at(0).isEmpty()))
                    {
                        strFusionmsHBeats = strListHBeats.at(0);
                    }

                }
            }
        }
    }

    int nCheckStatus = 0;
    if((strVMSDHCPParams.count()) && (strVMSDHCPParams.at(0) == "1") && (strVMSDHCPParams.at(1) == "1"))
    {
        if(IsImpactClient())
        {
            strDeleteHostEntery = deleteEntry(QString("HostsSettings"), QString("HostsName='WebIAS'"));
        }
        else
        {
            strDeleteHostEntery = deleteEntry(QString("HostsSettings"), QString("HostsName='unifiedx'"));
        }

        sync();
        QFile hostFile("/etc/hosts");
        QFile outputFile("/etc/tmpHosts");

        if(hostFile.open(QIODevice::ReadOnly) && outputFile.open(QIODevice::ReadWrite | QIODevice::Text))
        {
            QTextStream in(&hostFile);
            QTextStream out(&outputFile);
            while(!in.atEnd())
            {
                QString line = in.readLine();
                line.append("\n");
                if(IsImpactClient())
                {
                    if(!line.contains("webias"))
                    {
                        out<<line;
                    }
                }
                else
                {
                    if(!line.contains("unifiedx"))
                    {
                        out<<line;
                    }
                }
                
            }
        }
        hostFile.close();
        outputFile.close();

        hostFile.remove();
        outputFile.rename(outputFile.fileName(),hostFile.fileName());

        sync();

        nCheckStatus = FusionmsIsRunningStatus();
    }

    qDebug() << "LCore:ExecuteVMSSettings::3:: ExecuteVMSSettings 1 = " << nCheckStatus;


    if(nCheckStatus == 1)  //Fusionms-HTTPS
    {
        QString strHostIP;
        if(strDeleteHostEntery == "Successfull")
        {
            executeResolveIpScript();
        }
        if(IsImpactClient())
        {
            strHostIP = getIPFromServerHostName("webias");
        }
        else
        {
            strHostIP = getIPFromServerHostName("unifiedx");
        }
        qDebug() << "LCore:ExecuteVMSSettings::3:: getIPFromServerHostName = " << strHostIP;

        QString columnHostType = "HostsIP VARCHAR(50),HostsName VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";
        QString columnValuesN;

        if(IsImpactClient()== true)
        {
            columnValuesN = "'"+strHostIP+"','webias',0, 0, 0, '', '' ";
        }
        else
        {
            columnValuesN = "'"+strHostIP+"','unifiedx',0, 0, 0, '', '' ";
        }
        writeTable( "HostsSettings", columnHostType, columnValuesN, "AppendNew");

        QString strDefault = strSpecialChar + "DEFAULT";

        if(IsImpactClient() == true)
        {
            if(!strFusionmsHBeats.isEmpty())
            {
                columnValues = "1, 'webias', '', 443, '" + strDefault + "', '" + strFusionmsHBeats + "', 'HTTPS', 'VMSService', 1, ''";
            }
            else
            {
                columnValues = "1, 'webias', '', 443, '" + strDefault + "', 60, 'HTTPS', 'VMSService', 1, ''";
                strFusionmsHBeats = "60";
            }
        }
        else
        {
            if(!strFusionmsHBeats.isEmpty())
            {
                columnValues = "1, 'unifiedx', '', 443, '" + strDefault + "', '" + strFusionmsHBeats + "', 'HTTPS', 'VMSService', 1, ''";
            }
            else
            {
                columnValues = "1, 'unifiedx', '', 443, '" + strDefault + "', 60, 'HTTPS', 'VMSService', 1, ''";
                strFusionmsHBeats = "60";
            }
        }

        writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
        sync();
        updateVmsLogsFile("HeartBeatInterval",strFusionmsHBeats);

    }
    else if(nCheckStatus == 2)  //fusionms-HTTP
    {
        if(strDeleteHostEntery == "Successfull")
        {
            executeResolveIpScript();
        }
        QString  strHostIP,columnHostType,columnValuesN;

        if(IsImpactClient() == true)
        {
            strHostIP = getIPFromServerHostName("webias");

            columnHostType = "HostsIP VARCHAR(50),HostsName VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";
            columnValuesN = "'"+strHostIP+"','webias',0, 0, 0, '', '' ";
        }
        else
        {
            strHostIP = getIPFromServerHostName("unifiedx");

            columnHostType = "HostsIP VARCHAR(50),HostsName VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";
            columnValuesN = "'"+strHostIP+"','unifiedx',0, 0, 0, '', '' ";
        }
        writeTable( "HostsSettings", columnHostType, columnValuesN, "AppendNew");

        QString strDefault = strSpecialChar + "DEFAULT";

        if(IsImpactClient() == true)
        {
            if(!strFusionmsHBeats.isEmpty())
            {
                columnValues = "1, 'webias', '', 80, '" + strDefault + "', '" + strFusionmsHBeats + "', 'HTTP', 'VMSService', 1, ''";
            }
            else
            {
                columnValues = "1, 'webias', '', 80, '" + strDefault + "', 60, 'HTTP', 'VMSService', 1, ''";
                strFusionmsHBeats = "60";
            }
        }
        else
        {
            if(!strFusionmsHBeats.isEmpty())
            {
                columnValues = "1, 'unifiedx', '', 80, '" + strDefault + "', '" + strFusionmsHBeats + "', 'HTTP', 'VMSService', 1, ''";
            }
            else
            {
                columnValues = "1, 'unifiedx', '', 80, '" + strDefault + "', 60, 'HTTP', 'VMSService', 1, ''";
                strFusionmsHBeats = "60";
            }
        }

        writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
        sync();
        updateVmsLogsFile("HeartBeatInterval",strFusionmsHBeats);
    }
    else if((!nCheckStatus) && ((strVMSDHCPParams.count()) && (strVMSDHCPParams.at(1) == "1")))  //DHCP
    {
        QString strDefault = strSpecialChar + "DEFAULT";

        QStringList dhcpparamsn = readTable("DHCPParams", "");
        if(dhcpparamsn.count() && strVMSDHCPParams.at(0) == "1")
        {
            QString strCurrentServerIP = QString(dhcpparamsn.at(0)).remove("\"");
            QString strPortNo = QString(dhcpparamsn.at(5)).remove("\"");
            //    QString strPollInterval = QString(dhcpparams.at(2)).remove("\"");
            QString strCommunicationType = QString(dhcpparamsn.at(3)).remove("\"");

            int nStatus = 0;
            QProcess proc;
            QStringList strlstArgs;
            strlstArgs << QString("-n") << QString("-p") << strPortNo << strCurrentServerIP << QString("--open");
            proc.start("nmap", strlstArgs);
            proc.waitForFinished(-1);
            while(!proc.atEnd())
            {
                QString strProc = proc.readLine().simplified();
                if(strProc.contains("Host is up"))
                {
                    nStatus = 1;
                    break;
                }
            }

            if(nStatus)
            {
                strDefault = strSpecialChar + QString(dhcpparams.at(1)).remove("\"");

                if(!strFusionmsHBeats.isEmpty())
                {
                    columnValues = "1, '"+strCurrentServerIP+"', '', '"+strPortNo+"', '" +strDefault+"', '" + strFusionmsHBeats + "', '"+strCommunicationType+"', 'VMSService', 1, '' ";
                }
                else
                {
                    columnValues = "1, '"+strCurrentServerIP+"', '', '"+strPortNo+"', '" +strDefault+"', '60', '"+strCommunicationType+"', 'VMSService', 1, '' ";
                    strFusionmsHBeats = "60";
                }

                writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
                updateVmsLogsFile("HeartBeatInterval",strFusionmsHBeats);

                int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);
                if(status != 0)
                {
                    mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");
                    system(QString("echo DHCPIP=%1 > /sda1/data/.AutoDHCPVmsCheck").arg(strCurrentServerIP).toLatin1());
                    mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
                }
            }
            else
            {
                QStringList clientSettings = readTable(QString(CLIENTSETTINGS), "");
                if(clientSettings.isEmpty())
                {
                    columnValues = "1, '0.0.0.0', '', 443, '" + strDefault + "', 60, 'HTTPS', 'VMSService', 1, '' ";
                    writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
                    updateVmsLogsFile("HeartBeatInterval","60");
                }
            }
        }
        else    //Manual
        {
            QStringList clientSettings = readTable(QString(CLIENTSETTINGS), "");

            bool bIsTCS;
            bIsTCS = false;
            QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
            if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
                bIsTCS = true;

            if(clientSettings.isEmpty())
            {
                if(bIsTCS) // set TCS IP and port Number by Default in database ( IP: 10.249.235.144, Heart Beat Interval: 300 sec)
                {
                    QString strGroupName = strSpecialChar + "DEFAULT";
                    QString columnclientsettingsValues = "1, '10.249.235.144', '', 443, '" + strGroupName + "', 300, 'HTTPS', 'VMSService', 1, '' ";

                    writeTable(QString(CLIENTSETTINGS), columnType, columnclientsettingsValues, "");
                }
                else
                {
                    columnValues = "1, '0.0.0.0', '', 443, '" + strDefault + "', 60, 'HTTPS', 'VMSService', 1, '' ";
                    writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
                    updateVmsLogsFile("HeartBeatInterval","60");
                }
            }
            else
            {
                int nCheckDHCP = clientSettings.at(0).toInt();
                QString strCurrentIP = clientSettings.at(1);
                QString strOldServerIP = clientSettings.at(2);
                QString strPortNo = clientSettings.at(3);
                QString strCommunicationType = clientSettings.at(6);

                //when Manual is setted, after reboot previous Manual settings should be set as it is even network have 'fusionms'
                QString strGroupName = clientSettings.at(4);
                QString strPollInterval = clientSettings.at(5);
                QString strCertificate = clientSettings.at(9);

                QStringList strlistUpdated;
                strlistUpdated << "DHCPParams='" +QString::number(nCheckDHCP)+ "'" << "CurrentServerIP='" +strCurrentIP+ "'" << "OldServerIP='" +strOldServerIP+ "'" << "PortNo='" +strPortNo+ "'" << "GroupName='" +strGroupName+ "'" << "pollInterval='" +strPollInterval+ "'" << "CommunicationType='" +strCommunicationType+ "'" << "CACertificate='" +strCertificate+ "'";
                updateTable(QString(CLIENTSETTINGS), strlistUpdated, "");
                sync();
                updateVmsLogsFile("HeartBeatInterval",strPollInterval);
                QFile::remove("/tmp/.executevmssettings");
                return;
            }
        }

        sync();
    }
    QFile::remove("/tmp/.executevmssettings");
    qDebug() << "LCore:ExecuteVMSSettings::3:: End. ";
}

//for getting all hosts from network
// cppcheck-suppress unusedFunction
int LCore::FusionmsStatus()
{
    qDebug() << "LCore:FusionmsStatus::3:: Start. ";

    int nStatus = 0;

    QProcess process;
    if(IsImpactClient() == true)
    {
        process.start("nmap -n -p 443 webias --open");
        process.waitForFinished(-1);
    }
    else
    {
        process.start("nmap -n -p 443 unifiedx --open");
        process.waitForFinished(-1);
    }

    QString output(process.readAllStandardOutput());
    QString output1(process.readAllStandardError());

    if(output1.contains("Failed to resolve"))
    {
        nStatus = 0;
        return nStatus;
    }
    if(!output.contains("down"))
        nStatus = 1;    //HTTPS
    else
        nStatus = 0;

    if(!nStatus)
    {
        QProcess processn;
        if(IsImpactClient()== true )
        {
            processn.start("nmap -n -p 80 webias --open");
            processn.waitForFinished(-1);
        }
        else
        {
            processn.start("nmap -n -p 80 unifiedx --open");
            processn.waitForFinished(-1);
        }
        QString outputn(processn.readAllStandardOutput());
        if(!outputn.contains("down"))
            nStatus = 2;    //HTTP
        else
            nStatus = 0;
    }

    qDebug() << "LCore:FusionmsStatus::3:: return nStatus = " << nStatus;
    return nStatus;
}

int LCore::FusionmsIsRunningStatus()
{
    qDebug() << "LCore:FusionmsIsRunningStatus::3:: Start";

    int nStatus = 0;
    int checkfusionms = 0;

    QString strHostIP;
    if(IsImpactClient()== true)
    {
        bool bIswebias =  executeNmap("webias");

        if(bIswebias)
        {
            nStatus = 1;
            strHostIP = getIPFromServerHostName("webias");
        }
        else
        {
            nStatus = 0;
        }
    }
    else
    {
        bool bIsFusionms =  executeNmap("unifiedx");

        if(bIsFusionms)
        {
            nStatus = 1;
            strHostIP = getIPFromServerHostName("unifiedx");
        }
        else
        {
            nStatus = 0;
        }
    }

    if(nStatus)
    {
        QString strcurl = QString("curl -sS -w '%{http_code}' -k https://%1/VMSService/LinuxService.asmx?WSDL --connect-timeout 5 -o /tmp/.curl_fusionms").arg(strHostIP);

        QProcess process;
        process.start(strcurl);
        process.waitForFinished(-1);

        QStringList strlist = QString(process.readAllStandardOutput()).split('\n');

        if(process.exitCode() == 0 && strlist.contains("'200'"))
        {
            checkfusionms = 1;
        }

        if(!checkfusionms) // HTTP
        {
            QString strcurln = QString("curl -sS -w '%{http_code}' -k http://%1/VMSService/LinuxService.asmx?WSDL --connect-timeout 5 -o /tmp/.curl_fusionms").arg(strHostIP);

            QProcess processn;
            processn.start(strcurln);
            processn.waitForFinished(-1);

            QStringList strlistn = QString(processn.readAllStandardOutput()).split('\n');

            if(processn.exitCode() == 0 && strlistn.contains("'200'"))
            {
                checkfusionms = 2;
            }
        }

        QFile::remove("/tmp/.curl_fusionms");
    }

    qDebug() << "LCore:FusionmsIsRunningStatus::3:: --- checkfusionms --- " << checkfusionms ;

    return checkfusionms;
}


void LCore::executeResolveIpScript()
{
    qDebug() << "LCore:executeResolveIpScript::3:: Start. ";
    QStringList strLines, strListDefault;
    QList<QStringList> strListHosts = readCompleteTable(QString(HOSTSETTINGS_TABLE), "");

    foreach(const QStringList& strListData, strListHosts)
        strLines += strListData.at(0)+"\t"+strListData.at(1);

    QString ipaddr = getIPAddress("Ethernet");
    if(ipaddr.isEmpty())
        ipaddr = getIPAddress("Wireless");

    QFile hostFile(HOSTFILE);
    if(hostFile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream hostIN(&hostFile);
        while(!hostIN.atEnd())
        {
            QString line = hostIN.readLine();
            line.append("\n");

            if(line.startsWith("127.0") || line.startsWith("#") || line.startsWith("::") || line.startsWith("ff") || line.startsWith(ipaddr))
                strListDefault << line.simplified();
        }
        hostFile.close();
    }


    if(hostFile.open( QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&hostFile);
        for(int i=0; i<strListDefault.count(); i++)
            out << strListDefault.at(i) <<"\n";

        for(int i=0; i<strLines.count(); i++)
            out << strLines.at(i) <<"\n";


        hostFile.close();
    }
    qDebug() << "LCore:executeResolveIpScript::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::copyModularUSBDatabase(const QString& tableName)
{
    qDebug() << "LCore:copyModularUSBDatabase::3:: Start. ";

    deleteEntry(tableName, "drop");

    QString columnType;
    QList<QStringList> strListValues = readCompleteTable("ModularUSB", "");
    columnType = " DefaultPermission VARCHAR(20), Type INTEGER, Status INTEGER, Permission VARCHAR(20), Parent VARCHAR(100), Child VARCHAR(200), Description VARCHAR(500), ParentID VARCHAR(20), ChildID VARCHAR(20), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(Type, Parent, Child)";

    foreach(const QStringList& strListEntry, strListValues)
    {
        QString data, columnValues;
        columnValues = " '"+ strListEntry.at(0) +"', "+ strListEntry.at(1) +", "+ strListEntry.at(2) +", '"+ strListEntry.at(3) +"', '"+ strListEntry.at(4) +"', '"+ strListEntry.at(5) +"', '"+ strListEntry.at(6)+"', '"+ strListEntry.at(7) +"', '"+ strListEntry.at(8)+"', '"+ strListEntry.at(9)+"','"+ strListEntry.at(10)+"', '"+ strListEntry.at(11)+"', '"+ strListEntry.at(12)+"', '"+ strListEntry.at(13)+"'";
        data = writeTable(tableName, columnType, columnValues, "AppendNew");
        Q_UNUSED(data);
    }

    qDebug() << "LCore:copyModularUSBDatabase::3:: End. ";
}

//for  PNA UDM settings
// cppcheck-suppress unusedFunction
void LCore::writeUSBFile(bool)
{
    qDebug() << "LCore:writeUSBFile::3:: Start. ";

    if(qgetenv("BOARDARCH") == QString("via-arm"))
    {
        if(!QFile::exists(QString(PNAFILEPATH)+".orig"))
            QFile::copy(PNAFILEPATH,QString(PNAFILEPATH)+".orig");
    }

    QStringList listValues;
    QFile file(PNAFILEPATH);
    if (file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        bool bFound = false;
        while (!file.atEnd())
        {
            QString line = file.readLine();

            if(line.contains("#GENERAL RULES"))
            {
                bFound = true;
                listValues.append(line);
                continue;
            }

            if(line.contains("ALLOW: vid=147e") || line.contains("DENY: vid=147e") || line.contains("ALLOW: vid=0c27") || line.contains("DENY: vid=0c27"))
            {
                listValues.append(line);
                continue;
            }

            if(bFound == false || (!line.contains("DENY") && !line.contains("ALLOW") && !line.contains("CONNECT")))
            {
                qDebug() << "line  = "<< line;
                listValues.append(line);
            }
        }
        file.close();
    }

    QList<QStringList> listClasses;
    QList<QStringList> pnaDeviceRuleList = readCompleteTable("PNAUDMSettings", "Type=1");
    foreach(const QStringList& localDeviceRuleInfoList,  pnaDeviceRuleList)
    {
        listClasses.append(localDeviceRuleInfoList);
    }

    bool bIsAudio = false;
    QList<QStringList> pnaClassRuleList = readCompleteTable("PNAUDMSettings", "Type=0");
    foreach(const QStringList& localCassRuleInfoList,  pnaClassRuleList)
    {
        listClasses.append(localCassRuleInfoList);
        if(!localCassRuleInfoList.isEmpty() && localCassRuleInfoList.count() > 4)
        {
            if(localCassRuleInfoList.at(4) == "Audio (01)")
            {
                bIsAudio = true;
            }
        }
    }

    for (int i = 0; i < listClasses.count(); ++i)
    {
        QStringList list = listClasses.at(i);
        bool bConnect = false;
        if(list.count() > 3 && !list.at(3).isEmpty() && list.at(3).toLower() == "allow")
        {
            bConnect = true;
        }
        if((list.count() > 3 && !list.at(3).isEmpty()) && (list.count() > 7 && !list.at(7).isEmpty()))
        {
            QString strAllowDenyClass, strAllowDenyConnect;
            if(!list.at(1).toInt())
            {
                strAllowDenyClass = list.at(3).toUpper()+": class="+list.at(7);
                if(bConnect == true)
                    strAllowDenyConnect = "CONNECT: class="+list.at(7);
                if(list.at(5) != "All")
                {
                    strAllowDenyClass.append(" subclass="+list.at(8));
                    if(bConnect == true)
                        strAllowDenyConnect.append(" subclass="+list.at(8));
                }
                strAllowDenyClass.append(" # "+list.at(4).section(" ", 0, 0)+"\n");
                if(bConnect == true)
                    strAllowDenyConnect.append(" # "+list.at(4).section(" ", 0, 0)+"\n");


                if(list.at(3).toUpper() == "DENY" && list.at(4) == "Video (0e)" && !bIsAudio)
                {
                    strAllowDenyClass.append("ALLOW: class=01 # Audio \n");
                    if(bConnect == true)
                        strAllowDenyConnect.append("CONNECT: class=01 # Audio \n");
                }
            }
            else if(list.at(1).toInt() == 1)
            {
                strAllowDenyClass = list.at(3).toUpper()+": vid="+list.at(7);
                if(bConnect == true)
                    strAllowDenyConnect = "CONNECT: vid="+list.at(7);
                if(list.at(5) != "All")
                {
                    strAllowDenyClass.append(" pid="+list.at(8));
                    if(bConnect == true)
                        strAllowDenyConnect.append(" pid="+list.at(8));
                }
                strAllowDenyClass.append(" # "+list.at(4).section(" ", 0, 0)+"\n");
                if(bConnect == true)
                    strAllowDenyConnect.append(" # "+list.at(4).section(" ", 0, 0)+"\n");
            }

            listValues.append(strAllowDenyClass);
            if(bConnect == true)
                listValues.append(strAllowDenyConnect);
        }
    }

    QString strRemainingClasses = "ALLOW: # Ultimate fallback: allow everything else";

    if(!pnaClassRuleList.isEmpty()) //for first two lines
    {
        QStringList strList = pnaClassRuleList.at(0);
        if(!strList.isEmpty())
        {
            if(strList.at(0) == "Allow All")
                strRemainingClasses = "ALLOW: # Ultimate fallback: allow everything else";
            else if(strList.at(0) == "Deny All")
                strRemainingClasses = "DENY: # Ultimate fallback: deny everything else";
        }
    }

    listValues.append(QString("DENY:  class=03 subclass=01 prot=01 # HID Boot keyboards")+"\n"); //should deny human interface devices
    listValues.append(QString("DENY:  class=03 subclass=01 prot=02 # HID Boot mice")+"\n");
    listValues.append(QString("DENY:  class=03 subclass=00 # Touch Panel")+"\n");

    if( getOSDetails(QString(OSBUILD_FILE)).contains("LiveCloudDesktop", Qt::CaseInsensitive) )
        listValues.append(QString("DENY:  class=08 # Mass Storage")+"\n");

    if(getOSDetails(QString(OSBUILD_FILE)).contains("AXA", Qt::CaseInsensitive) || getOSDetails(QString(OSBUILD_FILE)).contains("GNP", Qt::CaseInsensitive))
    {
        listValues.append(QString("DENY:  class=01 # Citrix HDX Audio for USB Headphone")+"\n");
        listValues.append(QString("DENY:  class=02 # Communications and CDC-Control")+"\n");
        listValues.append(QString("DENY:  class=09 # Hub devices")+"\n");
        listValues.append(QString("#DENY:  class=ff")+"\n");
        listValues.append(QString("DENY:  class=03 subclass=00 # Touch Panel")+"\n");
        listValues.append(QString("DENY:  class=0a # CDC-Data")+"\n");
        listValues.append(QString("DENY:  class=0b # Smartcard")+"\n");
        listValues.append(QString("DENY:  class=0e # UVC (default via HDX RealTime Webcam Video Compression)")+"\n");
        listValues.append(QString("DENY:  class=e0 # Wireless controller")+"\n");
        listValues.append(QString("DENY:  class=08 # Mass Storage")+"\n");
    }
    listValues.append(strRemainingClasses+"\n");

    file.setFileName(PNAFILEPATH);
    if(file.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&file);
        for(int i = 0; i < listValues.count(); i++)
            out << listValues.at(i);
        file.close();
    }

    if(isTableExists("TouchScreen"))
    {
        QStringList strList = readTable("TouchScreen", "");
        if(!strList.isEmpty() && !strList.at(17).isEmpty() && !strList.at(18).isEmpty())
        {
            excludeVIDPID(strList.at(17),strList.at(18));
        }
    }

    if( checkForUSBImage())   // Added pendrive  for block;
        liveImageUSBRestrict("PNAgent");

    qDebug() << "LCore:writeUSBFile::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::copyUSBTestTable(const QString& tableName)
{
    qDebug() << "LCore:copyUSBTestTable::3:: Start. ";

    QString columnType;
    QList<QStringList> strListValues = readCompleteTable(QString(TESTVMVIEW), "");
    columnType = " DefaultPermission VARCHAR(20), Type INTEGER, Status INTEGER, Permission VARCHAR(20), Parent VARCHAR(100), Child VARCHAR(200), Description VARCHAR(500), ParentID VARCHAR(20), ChildID VARCHAR(20), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(Type, Parent, Child)";

    if(strListValues.count())
    {
        deleteEntry(tableName, "drop");

        foreach(const QStringList& strListEntry, strListValues)
        {
            QString data, columnValues;
            columnValues = " '"+ strListEntry.at(0) +"', "+ strListEntry.at(1) +", "+ strListEntry.at(2) +", '"+ strListEntry.at(3) +"', '"+ strListEntry.at(4) +"', '"+ strListEntry.at(5) +"', '"+ strListEntry.at(6)+"', '"+ strListEntry.at(7) +"', '"+ strListEntry.at(8)+"', '"+ strListEntry.at(9)+"','"+ strListEntry.at(10)+"', '"+ strListEntry.at(11)+"', '"+ strListEntry.at(12)+"', '"+ strListEntry.at(13)+"'";
            data = writeTable(tableName, columnType, columnValues, "AppendNew");
            Q_UNUSED(data);
        }
    }

    qDebug() << "LCore:copyUSBTestTable::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::writeVMViewUDMFile(bool bCopyLocalUDM)
{
    qDebug() << "LCore:writeVMViewUDMFile::3:: Start. ";

    QMap<QString, QString> mapClassFamily;
    QFile file(VMVIEWCLASSMAPFILE);
    if (file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        int nReadFlag = 0;
        while (!file.atEnd())
        {
            QString line = file.readLine().simplified();

            if(nReadFlag)
                mapClassFamily.insert(line.section(" ", 0, 0).trimmed(), line.section(" ", 1, 1).trimmed());

            if(line.contains("="))
                nReadFlag = 1;
        }
        file.close();
    }

    if(mapClassFamily.count())
    {
        QStringList listValues;
        QList<QStringList> listClasses = readCompleteTable("VMViewUDMSettings", "");
        QString strCheck;
        int nCount = 0;

        for (int i = 0; i < listClasses.size(); ++i)
        {
            QStringList list = listClasses.at(i);
            strCheck.clear();
            strCheck.append(list.at(0));
            if(nCount > 1)
            {
                QString strAllowDenyClass;
                if(!list.at(1).toInt())
                {
                    if(list.at(3).toLower() == "deny")
                        strAllowDenyClass = "viewusb.ExcludeFamily = \"";
                    else
                        strAllowDenyClass = "viewusb.IncludeFamily = \"";

                    strAllowDenyClass.append(mapClassFamily.key(list.at(7))+"\"");
                }
                else if(list.at(1).toInt() == 1 && !list.at(7).isEmpty())
                {
                    if(list.at(3).toLower() == "deny")
                        strAllowDenyClass = "viewusb.ExcludeVidPid = \"";
                    else
                        strAllowDenyClass = "viewusb.IncludeVidPid = \"";
                    strAllowDenyClass.append("vid-"+list.at(7));
                    if(list.at(5) != "All")
                        strAllowDenyClass.append("_pid-"+list.at(8));
                    strAllowDenyClass.append("\"");
                }

                listValues.append(strAllowDenyClass);
            }
            nCount++;
        }

        QString strExcludeFamily,strExcludeVidPid, strIncludeFamily, strIncludeVidPid;
        foreach(const QString& strLine, listValues)
        {
            if(strLine.startsWith("viewusb.ExcludeFamily"))
            {
                QString str = QString(strLine.section("=", 1,1).remove("\"")).simplified();
                if(!str.isEmpty())
                    strExcludeFamily.append(QString(str +";"));
            }
            else if(strLine.startsWith("viewusb.IncludeFamily"))
            {
                QString str = QString(strLine.section("=", 1,1).remove("\"")).simplified();
                if(!str.isEmpty())
                    strIncludeFamily.append(QString(str +";"));
            }
            else if(strLine.startsWith("viewusb.ExcludeVidPid"))
            {
                QString strVidpid = QString(strLine.section("=", 1,1).remove("\"")).simplified();
                if(!strVidpid.isEmpty())
                {
                    if(!strVidpid.contains("pid"))
                        strVidpid.append("_pid-****");
                    strVidpid.append(";");
                    strExcludeVidPid.append(strVidpid);
                }
            }
            else if(strLine.startsWith("viewusb.IncludeVidPid"))
            {
                QString strVidpid = QString(strLine.section("=", 1,1).remove("\"")).simplified();
                if(!strVidpid.isEmpty())
                {
                    if(!strVidpid.contains("pid"))
                        strVidpid.append("_pid-****");
                    strVidpid.append(";");
                    strIncludeVidPid.append(strVidpid);
                }
            }
        }

        QMap <QString , QString > strMap;
        QStringList strDefaultList = readDefaultsValue("DisableMassStorage");
        if(!strDefaultList.isEmpty() && strDefaultList.at(0) == "1" )            // Deny mass storage
        {
            QFile filen("/tmp/.storagedevice");

            if(filen.exists() && filen.size() != 0)
            {
                if(filen.open(QIODevice::ReadOnly | QIODevice::Text))
                {
                    QTextStream network(&filen);
                    while(!network.atEnd())
                    {
                        QString strVIDPID = network.readLine().section("=", 1);
                        if(!strVIDPID.isEmpty())
                        {
                            strMap.insert(strVIDPID, "VIDPID");
                        }
                    }
                    filen.close();
                }
                sync();

                foreach(const QString& strVidPid, strMap.keys())
                {
                    QString str;
                    QString strVID = strVidPid.section(",", 0, 0);
                    QString strPID = strVidPid.section(",", 1);

                    if(!strVID.isEmpty())
                    {
                        str =(QString("vid-"+strVID));
                    }
                    if(!strPID.isEmpty())
                    {
                        str.append(QString("_pid-"+strPID));
                    }
                    if(!str.isEmpty())
                    {
                        strExcludeVidPid.append(QString(str + ";"));
                    }
                }
            }
        }

        QFile fileConfig(VMVIEWFILEPATH);
        QStringList linesConfig;
        if(fileConfig.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&fileConfig);
            while (!in.atEnd())
            {
                QString line = in.readLine();
                if(!line.startsWith("viewusb.ExcludeFamily") && !line.startsWith("viewusb.ExcludeVidPid") && !line.startsWith("viewusb.IncludeFamily") && !line.startsWith("viewusb.IncludeVidPid ") && !line.startsWith("viewusb.ExcludeAllDevices") && !line.startsWith("rtav.IsDisabled"))
                {
                    qDebug() << " take "  << line;
                    linesConfig << line;
                }
            }
            fileConfig.close();
        }

        if(fileConfig.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&fileConfig);

            for (int i = 0; i < linesConfig.count(); ++i)
                out << linesConfig.at(i) << "\n";

            if(nCount > 2)
            {

                if(!strExcludeVidPid.isEmpty())
                {
                    strExcludeVidPid.chop(1);
                    out << "viewusb.ExcludeVidPid = \"" << strExcludeVidPid << "\"\n";
                }

                if(!strIncludeVidPid.isEmpty())
                {
                    strIncludeVidPid.chop(1);
                    out << "viewusb.IncludeVidPid = \"" << strIncludeVidPid << "\"\n";
                }

                if(!strExcludeFamily.isEmpty())
                {
                    strExcludeFamily.chop(1);    /// remove last ; ///
                    out << "viewusb.ExcludeFamily = \"" << strExcludeFamily << "\"\n";
                }

                if(!strIncludeFamily.isEmpty())
                {
                    strIncludeFamily.chop(1);
                    if(!strIncludeFamily.isEmpty())
                        out << "viewusb.IncludeFamily = \"" << strIncludeFamily << "\"\n";
                }

                //if(strExcludeFamily.isEmpty() && strExcludeVidPid.isEmpty() && (strCheck == "Deny All"))
                if(strCheck == "Deny All")
                {
                    out << "viewusb.ExcludeAllDevices = \"True\"" << "\n";
                }
            }

            QStringList strListValue = readTable("VMViewGlobal", "", "RTAV");
            if(strListValue.count() && strListValue.at(0) == "1")
            {
                out << "rtav.IsDisabled = \"0\"" << "\n";

            }
            else
                out << "rtav.IsDisabled = \"1\"" << "\n";

            fileConfig.close();
        }
    }

    if(isTableExists("TouchScreen"))
    {
        QStringList strList = readTable("TouchScreen", "");
        if(!strList.isEmpty() && !strList.at(17).isEmpty() && !strList.at(18).isEmpty())
        {
            excludeVIDPID(strList.at(17),strList.at(18));
        }
    }

    if( checkForUSBImage())   // Added pendrive  for block;
        liveImageUSBRestrict("VMView");

    qDebug() << "LCore:writeVMViewUDMFile::3:: End. ";
}

// cppcheck-suppress unusedFunction
void LCore::executeVMViewGlobal()
{
    qDebug() << "LCore:executeVMViewGlobal::3:: Start. ";

    QStringList strlistEnable = readTable("VMViewGlobal", "", "USBRedirection");
    QStringList strPermission = readTable("ModularUSB", "Parent='Mass Storage (08)'" , "Permission");

    if((strlistEnable.count() && strlistEnable.at(0) == "1") || (strPermission.count() && !strPermission.contains("Deny")))
    {
        if(QFile::exists(QString(USBD)))
        {
            QProcess::execute(USBD);
        }
    }
    else
    {
        QProcess::execute("sh /etc/daemon/vmware-USBArbitrator stop");
        /// QProcess not work so used system.
        system(QString("/etc/daemon/vmware-USBArbitrator stop").toLatin1());
        if(QFile::exists(QString(USBD)))
        {
            ::sleep(0.4);
            QProcess::execute("killall "+QString(USBD));
        }
    }
    qDebug() << "LCore:executeVMViewGlobal::3:: End. ";
}

void LCore::forLog(QString cmd)
{
    qDebug() << "LCore:forLog::3:: Start. ";

    QString str;
    QProcess *proc = new QProcess;
    cmd.replace("DROP"," LOG --log-level 4");  /// Change for log 2 May 2016 Namrata.
    proc->start(cmd.remove("'"));
    proc->waitForFinished(-1);
    str.append(proc->readAllStandardError());

    qDebug() << "LCore:forLog::3:: End. ";
}

// cppcheck-suppress unusedFunction
QString LCore::readOemName()
{
    qDebug() << "LCore:readOemName::3:: Start. ";
    QString strOemName;
    QFile oemhostfile(QString(OEMHOSTNAMEFILE));
    if(oemhostfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&oemhostfile);
        while(!in.atEnd())
        {
            QString strline = in.readLine();
            if(strline.contains("[HostName]"))
            {
                strOemName =in.readLine().trimmed().left(3);
                break;
            }
        }
    }

    qDebug() << "LCore:readOemName::3:: return strOemName = " << strOemName;
    return strOemName;
}

QString LCore::getIPFromServerHostName(const QString& strHostname)
{
    qDebug() << "LCore:getIPFromServerHostName::3:: Start. ";
    QString strHostIP;
    QProcess proc;
    QStringList strlstArgs;
    strlstArgs << "hosts" << strHostname ;
    proc.start("getent" , strlstArgs);
    proc.waitForFinished(-1);
    while(!proc.atEnd())
    {
        QString strProc = proc.readLine().simplified();
        strHostIP  = strProc.section(" ",0, 0);
    }
    QString cmd = "nmblookup " + strHostname;
    QProcess proc1;
    if(strHostIP.isEmpty()) // if we not getting IP of 'getent then we use 'nmblookup'
    {
        proc1.start(cmd);
        proc1.waitForFinished(-1);

        while(!proc1.atEnd())
        {
            QString strProc1 = proc1.readLine().simplified();
            strHostIP = strProc1.section(" ",0,0);
        }
    }

    qDebug() << "LCore:getIPFromServerHostName::3:: return strHostIP = " << strHostIP;
    return strHostIP;
}

bool LCore::CheckforFileContents(QString filename)
{
    qDebug() << "LCore:CheckforFileContents::3:: Start. ";

    bool bStatus = false;
    QFile mfile(filename);
    if(mfile.open(QIODevice::ReadOnly | QIODevice::Text ))
    {
        QTextStream in(&mfile);
        QString strLine;
        while(!in.atEnd())
            strLine = in.readAll();
        if(!strLine.simplified().isEmpty())
            bStatus = true;
    }

    qDebug() << "LCore:CheckforFileContents::3:: return bstatus = " << bStatus;
    return bStatus;
}

// cppcheck-suppress unusedFunction
void LCore::WriteModuleDotIni()
{
    qDebug() << "LCore:WriteModuleDotIni::3:: Start. ";

    QStringList listCitrix = readTable("PNAgentGlobal","");
    if(listCitrix.count())
    {
        QFile file(QString(MODULEINIFILE));
        QFile tmpFile(QString(MODULEINIFILE_TMP));
        if(file.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            if(tmpFile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&tmpFile);
                QTextStream  in(&file);
                while(!in.atEnd())
                {
                    QString line = in.readLine().simplified();
                    QString strNewline = line;

                    if(line.contains("MultiMedia="))
                    {
                        /*
                          As suggested by Prashant sir to work webcam in PNA or ICA we have to pass it On, bydefault in package it's Off
                        */
                        strNewline.replace("Off","On");
                    }
                    if(line.contains("HDXRTME="))
                    {
                        if(listCitrix.at(2).toInt() || listCitrix.at(12).toInt())   // HDXRTME
                            strNewline.replace("Off","On");
                        else
                            strNewline.replace("On","Off");
                    }
                    if(line.contains("HDXFlashEnableServerSideContentFetching="))
                    {
                        if(listCitrix.at(3).toInt())    // FlashRedirection
                            strNewline = "HDXFlashEnableServerSideContentFetching=Disabled";
                        else
                            strNewline = "HDXFlashEnableServerSideContentFetching=Enabled";
                    }
                    if(line.contains("HDXFlashUseServerHttpCookies="))
                    {
                        if(listCitrix.at(3).toInt())  // FlashRedirection
                            strNewline = "HDXFlashUseServerHttpCookies=Disabled";
                        else
                            strNewline = "HDXFlashUseServerHttpCookies=Enabled";
                    }
                    if(line.contains("Clipboard ="))
                    {
                        if(listCitrix.at(4).toInt())  // Clipboard
                            strNewline = "Clipboard = On";
                        else
                            strNewline = "Clipboard = Off";
                    }
                    if(line.startsWith("WebPageRedirection=")) ///changes done for browser content redirection --Varsha
                    {
                        if(listCitrix.at(10).toInt())  // Clipboard
                            strNewline = "WebPageRedirection= On";
                        else
                            strNewline = "WebPageRedirection= Off";
                    }
                    if(line.startsWith("VDWEBRTC="))
                    {
                        if(listCitrix.at(11).toInt())  // Clipboard
                            strNewline = "VDWEBRTC=On";
                        else
                            strNewline = "VDWEBRTC=Off";
                    }
                    if(line.startsWith("ZoomMedia="))
                    {
                        if(listCitrix.at(13).toInt())  // Clipboard
                            strNewline = "ZoomMedia=On";
                        else
                            strNewline = "ZoomMedia=Off";
                    }
                    if(line.startsWith("CiscoVirtualChannel="))
                    {
                        if(listCitrix.at(15).toInt())  // Clipboard
                        {
                            //                            QString strCiscoService = QString(SERVICESPATH) + "/Cisco-JVDI";
                            //                            QProcess::startDetached(strCiscoService, QStringList() << QString("start"));

                            strNewline = "CiscoVirtualChannel=On";
                        }
                        else
                        {
                            //                            QString strCiscoService = QString(SERVICESPATH) + "/Cisco-JVDI";
                            //                            QProcess::startDetached(strCiscoService, QStringList() << QString("stop"));

                            strNewline = "CiscoVirtualChannel=Off";
                        }
                    }
                    if(line.startsWith("CiscoMeetingsVirtualChannel="))
                    {
                        if(listCitrix.at(14).toInt())  // Clipboard
                            strNewline = "CiscoMeetingsVirtualChannel=On";
                        else
                            strNewline = "CiscoMeetingsVirtualChannel=Off";
                    }

                    out << strNewline << "\n";
                }
                file.close();
                tmpFile.close();
            }
        }
        QFile::remove(MODULEINIFILE);
        QFile::copy(MODULEINIFILE_TMP,MODULEINIFILE);
        sync();
        QFile::remove(MODULEINIFILE_TMP);
    }

    qDebug() << "LCore:WriteModuleDotIni::3:: End. ";
}

bool LCore::checkForLaptop()
{
    qDebug() << "LCore:checkForLaptop::3::Start. ";

    bool bCheckForBattery = false;

    QDir dir("/sys/class/power_supply");
    dir.setFilter(QDir::AllDirs | QDir::Files | QDir::Dirs | QDir::NoDotAndDotDot);
    QStringList list = dir.entryList();
    qDebug() << "LCore:checkForLaptop::3:: Batterylist."<<list;

    for(int i = 0 ; i < list.count(); i++)
    {
        if(list.at(i).contains("BAT"))
        {
            bCheckForBattery = true;
            break;
        }
    }

    if(bCheckForBattery == true)
        return bCheckForBattery;
    else if(QFile::exists("/proc/acpi/battery"))         // For kernel version 3.3
        return true;
    else
        return false;
}

// cppcheck-suppress unusedFunction
QString LCore::readOemFile(QString arg)
{
    qDebug() << "LCore:readOemFile::3:: Start. ";

    QString strOemName;
    QFile oemhostfile(QString(OEMHOSTNAMEFILE));
    if(oemhostfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&oemhostfile);
        while(!in.atEnd())
        {
            QString strline = in.readLine();
            if(strline.contains(arg))
            {
                strOemName =in.readLine().trimmed();
                break;
            }
        }
    }

    qDebug() << "LCore:readOemFile::3:: return strOemName = " << strOemName;
    return strOemName;
}

QString LCore::encryptDecryptString(QString strSourceString, int ntype)
{
    qDebug() << "LCore:encryptDecryptString::3:: Start. ";
    // 0 : Encrpytion
    // 1 : Decryption

    if(strSourceString.trimmed().isEmpty())
        return "";

    bool bPasswordCheck = false;

    QStringList strlistPasswordLogic = readDefaultsValue("PWDConvert");
    if(strlistPasswordLogic.count())
    {
        bPasswordCheck = strlistPasswordLogic.at(0).toInt();
    }

    if(bPasswordCheck == true || QFile::exists(QString(CHECKPWDFILE)) == true)
    {
        AESEncryptionLib AESLib;

        std::string strValue = AESLib.EncryptDecryptStringAES(strSourceString.trimmed().toStdString(), ntype);

        QString strPassword = QString::fromStdString(strValue);

        return strPassword.trimmed();
    }
    else if(QFile::exists(QString(CHECKPWDFILE)) == false)
    {
        QString strCommand;
        if(QFile::exists("/usr/os-bin/encrypt_255"))
            strCommand = "/usr/os-bin/encrypt_255 "+strSourceString;
        else
            strCommand = "/usr/os-bin/encrypt "+strSourceString;
        QProcess *proc1 = new QProcess();
        if(ntype)
        {
            //decryption
            proc1->start(strCommand);
            proc1->waitForFinished(-1);
            QStringList strlist;
            while(!proc1->atEnd())
            {
                QString line = proc1->readLine().data();
                line.remove("\n").simplified();
                strlist<<line;
            }

            if(strlist.count())
                return QString::fromUtf8(strlist.first().toLatin1().constData());
            else
                return "";
        }
        else
        {
            proc1->start("/usr/os-bin/encrypt", QStringList() << strSourceString);
            proc1->waitForFinished(-1);
            QStringList strlist;
            while(!proc1->atEnd())
            {
                QString line = proc1->readLine().data();
                line.remove("\n").simplified();
                strlist<<line;
            }
            if(strlist.count())
                return strlist.first();
            else
                return "";
        }
    }
}

// cppcheck-suppress unusedFunction
QString LCore::encryptDecryptStringOLD(QString SourceString, int ntype)
{
    qDebug() << "LCore:encryptDecryptString::3:: Start. ";
    // 0 : Encrpytion
    // 1 : Decryption

    if(SourceString.trimmed().isEmpty())
        return "";

    QString cmd;
    if(QFile::exists("/usr/os-bin/encrypt_255"))
        cmd = "/usr/os-bin/encrypt_255 "+SourceString;
    else
        cmd = "/usr/os-bin/encrypt "+SourceString;
    QProcess *proc1 = new QProcess();
    if(ntype)
    {
        //decryption
        proc1->start(cmd);
        proc1->waitForFinished(-1);
        QStringList strlist;
        while(!proc1->atEnd())
        {
            QString line = proc1->readLine().data();
            line.remove("\n").simplified();
            strlist<<line;
        }

        if(strlist.count())
            return QString::fromUtf8(strlist.first().toLatin1().constData());
        else
            return "";
    }
    else
    {
        proc1->start("/usr/os-bin/encrypt",QStringList()<<SourceString);
        proc1->waitForFinished(-1);
        QStringList strlist;
        while(!proc1->atEnd())
        {
            QString line = proc1->readLine().data();
            line.remove("\n").simplified();
            strlist<<line;
        }
        if(strlist.count())
            return strlist.first();
        else
            return "";
    }
}

int LCore::ConvertToAscii(const string& strKey)
{
    int key = 0;
//    char *cDec = new char[strKey.size()+1];
    char *cDec = convertQstringToCharArray(strKey);
    for(int i=0; i<strKey.size(); i++)
        key += cDec[i];
    delete cDec;
    return key;
}

string LCore::encrypDncryRescuePasswd(const string& SourceString, int ntype)
{
    int nKey = ConvertToAscii(string(ENCKEY));
//    char *cString = new char[SourceString.size()+1];
    char *cString = convertQstringToCharArray(SourceString);
    for(int i=0; i<SourceString.length(); i++)
    {
        if(!ntype)
            cString[i] -= nKey;
        else
            cString[i] += nKey;
    }
    return cString;
}

char* LCore::convertQstringToCharArray(QString value)
{
    QByteArray valueArray = value.toLatin1();
    char *toChar = new char[valueArray.size() + 1];
    strcpy(toChar, valueArray.data());
    return toChar;
}

// cppcheck-suppress unusedFunction
int LCore ::encryptString(void* buffer,int buffer_len, char* IV,char* key,int key_len)
{
    MCRYPT td = mcrypt_module_open("rijndael-128", NULL, "cbc", NULL);
    int blocksize = mcrypt_enc_get_block_size(td);
    if( buffer_len % blocksize != 0 ){return 1;}
    mcrypt_generic_init(td, key, key_len, IV);
    mcrypt_generic(td, buffer, buffer_len);
    mcrypt_generic_deinit (td);
    mcrypt_module_close(td);
    return 0;
}

// cppcheck-suppress unusedFunction
int LCore::decryptString(void* buffer,int buffer_len,char* IV,char* key,int key_len)
{
    MCRYPT td = mcrypt_module_open("rijndael-128", NULL, "cbc", NULL);
    int blocksize = mcrypt_enc_get_block_size(td);
    if( buffer_len % blocksize != 0 ){return 1;}
    mcrypt_generic_init(td, key, key_len, IV);
    mdecrypt_generic(td, buffer, buffer_len);
    mcrypt_generic_deinit (td);
    mcrypt_module_close(td);
    return 0;
}

char* LCore::convertQstringToCharArray(string value)
{
    char *toChar = new char[value.size() + 1];
    strcpy(toChar, value.c_str());
    return toChar;
}

// cppcheck-suppress unusedFunction
void LCore::encryptDecryrptShowterminal(const string& arg, const string& filename)
{
    string message;
    ifstream input(filename.c_str());
    stringstream sstr;
    while(input >> sstr.rdbuf());
    cout << sstr.str() << std::endl;

    if(arg == "ENC")
    {
        message = encrypDncryRescuePasswd(sstr.str(),0);
        cout<<"message: "<< message << endl;
        remove(filename.c_str());
        ofstream myfile;
        myfile.open (filename.c_str());
        myfile << message;
        myfile.close();
    }
    else if(arg == "DEC")
    {
        message = encrypDncryRescuePasswd(sstr.str(),1);
        cout<<"message DEC: "<< message << endl;
        remove(filename.c_str());
        ofstream myfile;
        myfile.open(filename.c_str());
        myfile << message;
        myfile.close();
    }
}

QString LCore::getLenovoMT()  /// getLenovo Machine Type
{
    /// Code for Lenevo thinclient
    QString strMTs="";

    /// /tmp/.dmesg File write at startup 3
    QFile file("/tmp/.dmesg");
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        while(!in.atEnd())
        {
            QString strBoardDetials  = in.readLine().simplified();
            if(strBoardDetials.contains("DMI:"))
            {
                strMTs = QString(strBoardDetials.section("LENOVO",1,1)).simplified().left(4);
                system(QString("echo \"Checking License = %1\" >> /data/licen.txt").arg(strMTs).toLatin1());
                break;
            }
        }
        file.close();
    }

    return strMTs;
}

bool LCore::isLM600(QString strMTs)
{
    QStringList strListMTs;
    strListMTs << "10G8" << "10G9" << "10GA" << "10GB" << "10GC" << "10GD" << "10GE" << "10GF" << "10GG" << "10GH" << "10GJ" << "10GK" << "10GL" << "10GM" << "10KG"<< "10KH" <<"10KJ" << "10KK" << "10JU" << "10KD" << "10JV";

    if(strListMTs.contains(strMTs))
        return true;
    else
        return false;
}

bool LCore::isL14W(QString strMTs)
{
    QStringList strListMTs;
    strListMTs << "81MQ" << "82N8" << "82N9";

    if(strListMTs.contains(strMTs))
        return true;
    else
        return false;
}

bool LCore::isLM625(QString strMTs)
{
    QStringList strListMTs;
    strListMTs << "10TL" << "10UY" << "10V0" << "10V1" << "10V2";

    if(strListMTs.contains(strMTs))
        return true;
    else
        return false;
}

// cppcheck-suppress unusedFunction
bool LCore::isLM700(QString strMTs)
{
    QStringList strListMTs;
    strListMTs << "10JM" << "10JN" <<"10JQ" << "10JR" << "10JS" << "10JT" << "10HY" << "10J0";

    if(strListMTs.contains(strMTs))
        return true;
    else
        return false;
}
bool LCore::isM715qRR(QString strMTs)
{
    QStringList strListMTs;
    strListMTs << "10VL" << "10VM" << "10VN" << "10VQ" ;

    if(strListMTs.contains(strMTs))
        return true;
    else
        return false;
}

bool LCore::isM715q(QString strMTs)
{
    QStringList strListMTs;
    strListMTs << "10RA" << "10RB" << "10RC" << "10RD" ;

    if(strListMTs.contains(strMTs))
        return true;
    else
        return false;
}

bool LCore::isL480(QString strMTs)
{
    QStringList strListMTs;
    strListMTs << "20LS" << "20LT";

    if(strListMTs.contains(strMTs))
        return true;
    else
        return false;
}
bool LCore::isM75n(QString strMTs)
{
    QStringList strListMTs;
    strListMTs << "11G4" << "11G5" << "11G6" << "11G7"<<"11BW"<<"11BX" ;

    if(strListMTs.contains(strMTs))
        return true;
    else
        return false;
}

// cppcheck-suppress unusedFunction
int LCore::getSerialDevicesCount()
{
    int nCOMNumber = 0;
    QProcess *proc = new QProcess();
    proc->start("cat /proc/tty/driver/serial | grep \"tx:\"");
    proc->waitForFinished(-1);

    while (!proc->atEnd())
    {
        QString portoutput;
        if((portoutput=proc->readLine()).contains("tx:"))
        {
            nCOMNumber++;
        }
    }
    delete proc;

    return nCOMNumber;
}

QString LCore::getTimeZoneOffSet(QString strTimeZone)
{
    qDebug() << "LCore:getTimeZoneOffSet::3:: Start. ";
    QString strOffSet = "+0000";

    QFile tzoffsetfile(TIMEZONEOFFSET);
    if (tzoffsetfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&tzoffsetfile);

        while(!in.atEnd())
        {
            QString strLine = in.readLine();
            if(strLine.contains(strTimeZone))
            {
                strOffSet = strLine.section("=", 1,1);
                break;
            }
        }
        tzoffsetfile.close();
    }

    qDebug() << "LCore:getTimeZoneOffSet::3:: return strOffSet = " << strOffSet;
    return strOffSet;
}

// cppcheck-suppress unusedFunction
long int LCore::CalculateDifference(QString NewOffset, QString CurrentOffset)
{
    qDebug() << "LCore:CalculateDifference::3:: Start. ";
    QString strTimeZone;
    QList<QStringList> readlist;
    readlist = readCompleteTable(QString("TimeZone"), "");

    if(!readlist.isEmpty())
    {
        strTimeZone = readlist[0][0] +"/"+ readlist[0][1];
    }
    else
    {
        QStringList strTimeZoneList = readDummyTimeZoneFile();
        if(!strTimeZoneList.isEmpty())
        {
            strTimeZone = strTimeZoneList.at(0) +"/"+ strTimeZoneList.at(1);
        }
    }
    QString ccontinent = strTimeZone.section("/",0,0);
    QString region = strTimeZone.section("/",1,1);
    QString curryear = QDate::currentDate().toString("yyyy");

    int count = getDSTCommand(ccontinent, region, curryear).at(0).toInt();
    if(!count)
    {
        QTime currentTime, newTime;
        QString strOp1, strOp2;
        strOp1 = NewOffset.simplified().left(1);
        strOp2 = CurrentOffset.simplified().left(1);

        QString strNewHrsMin = NewOffset.right(4);
        QString strCurrentHrs = CurrentOffset.right(4);

        int nNewHrs = strNewHrsMin.left(2).toInt();
        int nNewMins = strNewHrsMin.right(2).toInt();

        int nCurrentHrs = strCurrentHrs.left(2).toInt();
        int nCurrentMins = strCurrentHrs.right(2).toInt();

        currentTime.setHMS(nCurrentHrs,nCurrentMins,0,0);
        newTime.setHMS(nNewHrs,nNewMins,0,0);

        if(strOp1 == "+" && strOp2 == "+")
        {
            int result = ((nNewHrs*60+nNewMins) - (nCurrentHrs*60+nCurrentMins))*60;
            qDebug() << "LCore:CalculateDifference::3:: return result 1 = " << result;
            return result;
        }
        else if(strOp1 == "+" && strOp2 == "-")
        {
            int result = ((nNewHrs*60+nNewMins) + (nCurrentHrs*60+nCurrentMins))*60;
            qDebug() << "LCore:CalculateDifference::3:: return result 2 = " << result;
            return result;
        }
        else if(strOp1 == "-" && strOp2 == "+")
        {
            int result = (-(nNewHrs*60+nNewMins) - (nCurrentHrs*60+nCurrentMins))*60;
            qDebug() << "LCore:CalculateDifference::3:: return result 3 = " << result;
            return result;
        }
        else if(strOp1 == "-" && strOp2 == "-")
        {
            int result = (-(nNewHrs*60+nNewMins) + (nCurrentHrs*60+nCurrentMins))*60;
            qDebug() << "LCore:CalculateDifference::3:: return result 4 = " << result;
            return result;
        }
    }
    else
    {
        QDateTime now = QDateTime::currentDateTime();
        qDebug() << "LCore:CalculateDifference::3:: current date"<<now <<"conversion "<<now.toString("dd.MM.yyyy HH:mm");

        QString dstcommand = "zdump -v " +QString(TIMEZONE_PATH) + strTimeZone;
        bool nCheckTimeDiff = false;
        QString line;
        long int result;
        QProcess proc;
        proc.start(dstcommand);
        proc.waitForFinished(-1);
        while (!proc.atEnd())
        {
            if((line = proc.readLine()).contains(curryear))
            {
                line = line.section(" = ",-1,-1).simplified();
                QString day = line.section(' ', 0, 0);
                QString mon = line.section(' ', 1, 1);
                QString dt = line.section(' ', 2, 2);
                QString ti = line.section(' ',3,3);
                QString yr = line.section(' ', 4, 4);
                QString format = day + QString(" ") + mon + QString(" ") + dt +QString(" ") +ti + QString(" ") + yr;

                if(now.secsTo(QDateTime::fromString(format)) > 0)
                {
                    QString offset = line.section("gmtoff=",1,1).simplified();
                    nCheckTimeDiff = true;
                    result = offset.toInt();
                    break;
                }
            }
        }
        if(!nCheckTimeDiff)                                                         //for all (now.secsTo(QDateTime::fromString(format)) is less than 0
        {
            QList<QStringList> dateListtttt ;
            proc.start(dstcommand);
            proc.waitForFinished(-1);

            while (!proc.atEnd())
            {
                if((line = proc.readLine()).contains(curryear))
                {
                    line = line.section(" = ",-1,-1).simplified();
                    QString isdst = line.section(' ', 6, 6);

                    if(isdst == "isdst=1" )
                    {
                        QString day = line.section(' ', 0, 0);
                        QString mon = line.section(' ', 1, 1);
                        QString dt = line.section(' ', 2, 2);
                        QString ti = line.section(' ',3,3);
                        QString yr = line.section(' ', 4, 4);

                        QString offset = line.section("gmtoff=",1,1).simplified();
                        QString format = day + QString(" ") + mon + QString(" ") + dt +QString(" ") +ti + QString(" ") + yr;
                        dateListtttt.append(QStringList()<< format << offset);
                    }
                }
            }
            if(!dateListtttt.isEmpty() && dateListtttt.count() == 2)
            {
                QDateTime date111 = QDateTime(QDateTime::fromString(dateListtttt[0][0]));
                QDateTime date222 = QDateTime(QDateTime::fromString(dateListtttt[1][0]));

                if(date111.secsTo(date222) > 0)
                {
                    QString offset = dateListtttt[0][1];
                    result = offset.toInt();

                }
                else
                {
                    QString offset = dateListtttt[1][1];
                    result = offset.toInt();
                }
            }
        }
        qDebug() << "LCore:CalculateDifference::3:: return result = " << result;
        return result;
    }
    return 0;
}

// cppcheck-suppress unusedFunction
QString LCore::getCurrentOffset()
{
    QString strCnOffset = "+0000";

    QStringList strOffSet = readTable("TimeZone", "", "Extra4");
    if(!strOffSet.isEmpty())
    {
        strCnOffset = strOffSet.at(0);
    }
    else
    {
        QStringList strTimeZoneList = readDummyTimeZoneFile();
        if(!strTimeZoneList.isEmpty())
        {
            strCnOffset = strTimeZoneList.at(2);
        }
    }

    return strCnOffset;
}

// cppcheck-suppress unusedFunction
void LCore::writeNSSwitch()
{
    qDebug() << "LCore:writeNSSwitch::3:: Start. ";

    QFile file(NSSWITCHFILE);
    QStringList strListLines;
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        while (!in.atEnd())
        {
            QString strLine = in.readLine().simplified();
            if((strLine.startsWith("passwd:") || strLine.startsWith("group:") || strLine.startsWith("shadow:")) && !strLine.contains("winbind"))
            {
                strListLines += strLine+" winbind";
            }
            else
                strListLines += strLine;
        }
        file.close();
    }

    if(file.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&file);
        for (int i = 0; i < strListLines.count(); ++i)
            out << strListLines.at(i) << "\n";
        file.close();
    }
    sync();

    qDebug() << "LCore:writeNSSwitch::3:: End. ";
}

// cppcheck-suppress unusedFunction
bool LCore::findICAApplication(const QString& strappname, const QString& strip)
{
    qDebug() << "LCore:findICAApplication::3:: Start. ";

    bool isapplication=false;
    QStringList args;
    QStringList strAppList;
    QProcess proc;

    args.clear();
    args << "getlist" <<"-m"<< "-A" << strip;


    proc.start(QString(PNABROWSE_BIN),args);

    while(proc.state() == QProcess::Starting || proc.state() == QProcess::Running)
        qApp->processEvents();

    proc.waitForFinished(-1);



    QString procOutput = proc.readAll();

    system(QString("echo \"application list %1\" > /root/.application").arg(procOutput).toLatin1());

    if(procOutput.length())
    {
        for(int i = 0; i < procOutput.size(); i++)
        {
            QString procItem = procOutput.section("\n", i, i);
            QString strapp = procItem.section("'",8,8);
            if(!strapp.isEmpty())
            {
                if(strapp.contains("0 0 0 0"))
                    strAppList<<procItem.section("'", 1, 1);
            }
        }
    }
    if(strAppList.count())
    {
        if(strAppList.contains(strappname))
            isapplication=true;
    }
    QProcess proc1;
    QStringList args1;
    args1 << "pnabrowse" << "nmap";
    proc1.start("killall", args1);
    proc1.waitForFinished();

    qDebug() << "LCore:findICAApplication::3:: return isapplication = " << isapplication;
    return isapplication;
}

QStringList LCore::readDefaultsValue(QString strModule)
{
    qDebug() << "LCore:readDefaultsValue::3:: Start. ";
    qDebug()<<"strModule : "<<strModule;
    //write to read default value from /sda1/data/.defaultvalus for ICAGlobal/VMViewGlobal/Services
    QStringList strListValues;
    QFile defaultFile(QString(DEFAULTVALUES));
    if(defaultFile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&defaultFile);
        while (!in.atEnd())
        {
            QString strLine = in.readLine().simplified();
            if(strLine.startsWith(strModule,Qt::CaseInsensitive))
                strListValues << strLine.section("=", 1, -1).simplified();
        }
    }

    qDebug() << "LCore:readDefaultsValue::3:: return "<<strModule<<" = " << strListValues;
    return strListValues;
}

// cppcheck-suppress unusedFunction
void LCore::writeFDMDetailsFile()
{
    qDebug() << "LCore:writeFDMDetailsFile::3:: Start. ";

    bool nCheckDriver = false;
    QFile myfile, tmpfile;

    if(QFile::exists(GRUBFILE))
    {
        myfile.setFileName(GRUBFILE);
        tmpfile.setFileName(TEMPGRUBFILE);
    }
    else
    {
        myfile.setFileName(EFIGRUBFILE);
        tmpfile.setFileName(EFITEMPGRUBFILE);
    }

    if(myfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream line(&myfile);

        while(!line.atEnd())
        {
            QString strDefault = line.readLine();
            if(!strDefault.startsWith("#") && strDefault.contains("kernel") && !strDefault.contains("mode=rescue"))
            {
                if(strDefault.contains("displaydriver"))
                {
                    nCheckDriver = true;
                }
            }
        }
    }
    myfile.close();

    QStringList listRead = readTable("ClientSettings", "");

    QStringList listHost =readTable("HostsSettings", "");

    if(listRead.count() || nCheckDriver)
    {
        int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);

        QStringList strData = readTable("SysConf", "Property='AllowLicense'", "Value");
        bool nCheckMount = false;

        if(status != 0)
        {
            nCheckMount = true;
            mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");
        }

        QString strFDMFile;

        if(qgetenv("BOARDARCH") == "via-arm")
            strFDMFile = QString(FDMCLIENT_DETAILSARM);
        else
            strFDMFile = QString(FDMCLIENT_DETAILS);

        QFile fdmData(strFDMFile);
        if(fdmData.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&fdmData);
            if(listRead.count())
            {
                out << "DHCPParams=" <<  listRead.at(0)<< "\n";
                out << "CurrentServerIP=" << listRead.at(1) << "\n";
                out << "OldServerIP=" << listRead.at(2) << "\n";
                out << "PortNo=" << listRead.at(3) << "\n";
                out << "GroupName=" << listRead.at(4) << "\n";
                out << "pollInterval=" << listRead.at(5) << "\n";
                out << "CommunicationType=" << listRead.at(6) << "\n";
                out << "WebServiceName=" << listRead.at(7) <<"\n";
                out << "ClientStatus=" << listRead.at(8) << "\n";
                //  out << "CACertificate=" << listRead.at(9) << "\n";
                out << "CACertificate=" << "" << "\n";
            }
            for(int i=0;i<listHost.count();i++)
            {
                if(listHost.at(i)==listRead.at(1))
                {
                    int n=0;
                    QString Host =listRead.at(1);
                    if(isValidIP(Host))
                    {
                        n=i+1;
                        out<<"HostIp="<<listHost.at(i)<<"\n";
                        out<<"HostName="<<listHost.at(n)<<"\n";
                    }else
                    {
                        n=i-1;
                        out<<"HostIp="<<listHost.at(n)<<"\n";
                        out<<"HostName="<<listHost.at(i)<<"\n";
                    }
                }

            }

            if(strData.count() && strData.at(0).startsWith("1"))
            {
                out << QString("AllowLicense=").append("1") << "\n";
                out << QString("EncryptedMac=").append(strData.at(0).section(",", 1, 1)) << "\n";
            }

            fdmData.close();
        }

        QStringList displyList;
        QString strDriver;
        QStringList strMultiDisplay = readDefaultsValue("EnableMultiDisplay");
        if(!strMultiDisplay.isEmpty() && strMultiDisplay.at(0).toInt())
        {
            displyList = readTable(QString("MultipleDisplay"), "PrimaryDisplay=2" );
            if(!displyList.isEmpty())
                strDriver = displyList.at(1);
        }
        else
        {
            displyList = readTable(QString("DisplaySettings") , "");
            if(!displyList.isEmpty())
                strDriver = displyList.at(0);
        }

        if(!strDriver.isEmpty())
        {
            if(!nCheckMount  && status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");


            if(myfile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream line(&myfile);
                if(tmpfile.open(QIODevice::WriteOnly | QIODevice::Text))
                {
                    QTextStream mywfile(&tmpfile);
                    while(!line.atEnd())
                    {
                        QString strDefault = line.readLine();
                        if(!strDefault.startsWith("#") && strDefault.contains("kernel") && !strDefault.contains("mode=rescue"))
                        {
                            if(strDefault.contains("displaydriver"))
                            {
                                strDefault.remove("displaydriver="+strDriver);
                                mywfile << strDefault << "\n";
                            }
                            else
                                mywfile << strDefault << "\n";
                        }
                        else
                            mywfile << strDefault << "\n";
                    }
                    tmpfile.close();
                }
                myfile.close();
            }
            if(QFile::exists(GRUBFILE))
            {
                QFile::remove(GRUBFILE);
                QFile::copy(TEMPGRUBFILE, GRUBFILE);
            }
            else
            {
                QFile::remove(EFIGRUBFILE);
                QFile::copy(EFITEMPGRUBFILE, EFIGRUBFILE);
            }
        }

        if(status != 0)
            mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
    }
    qDebug() << "LCore:writeFDMDetailsFile::3:: End. ";
}

void LCore::writeDHCP81optionINDns(bool ncheck)
{
    qDebug() << "LCore:writeDHCP81optionINDns::3:: Start. ";
    //entries are required for DHCP OPTION 81 and Host Entry in DNS.
    //send fqdn.fqdn "EXAMPLE.XYZ.COM";
    //send fqdn.server-update on;

    QStringList list;
    bool bFound = false;

    QStringList listhostName = readTable("SysConf", "Property='Hostname'", "Value");
    QStringList listDomainName = readTable("SysConf", "Property='Domain'", "Value");

    if(!listhostName.isEmpty() || !listDomainName.isEmpty())
        return;

    QString strhostDomain = listhostName.at(0)+"."+listDomainName.at(0);

    QFile file(DHCP_CONF_FILE);
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        while(!in.atEnd())
        {
            QString line = in.readLine();
            if(line.startsWith("send fqdn.fqdn") && ncheck )
            {
                line = "send fqdn.fqdn \""+strhostDomain+"\";";
                bFound = true;
            }
            if(!ncheck && line.startsWith("send fqdn.fqdn") )
                continue;
            if(!ncheck && line.startsWith("send fqdn.server-update on") )
                continue;

            list << line;
        }
        file.close();
    }

    if(!bFound && ncheck)
    {
        list <<"send fqdn.fqdn \""+strhostDomain+"\";";
        list << "send fqdn.server-update on;";
    }

    if(file.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&file);
        for(int i = 0; i < list.count(); i++)
            out << list.at(i) << "\n";
        file.close();
    }
    sync();

    qDebug() << "LCore:writeDHCP81optionINDns::3:: End. ";
}

//-- Added by manish 12/09/2017 for checking running process using ps -e
bool LCore::checkrunningProcService(QString ServProc)
{
    qDebug() << "LCore:checkrunningProcService::3:: Start.   Args "  << ServProc;

    bool found = false;
    QProcess *proc = new QProcess;
    proc->start(QString("pidof"), QStringList() << ServProc);
    proc->waitForFinished(-1);
    int nCheck = proc->exitCode();
    if(nCheck == 0)
    {
        found = true;
    }

    if(!found)
    {
        proc->start("ps -e");

        if(proc->waitForFinished(-1))
        {
            QStringList readAll = QString(proc->readAll()).split("\n");

            for(int i=0; i < readAll.count(); i++)
            {
                if(readAll[i].endsWith(ServProc, Qt::CaseInsensitive))
                {
                    found = true;
                    break;
                }
            }
        }
    }
    proc->deleteLater();

    qDebug() << "LCore:checkrunningProcService::3:: End.   returns " << found;
    return found;
}

// cppcheck-suppress unusedFunction
QString LCore::readContentsFromFile(QString FileName)
{
    qDebug() << "LCore:readContentsFromFile::3:: Start. ";

    QString strdata;
    QFile errfile(FileName);
    if(errfile.open(QIODevice::ReadOnly | QIODevice::Text ))
    {
        while (!errfile.atEnd())
            strdata = errfile.readAll().simplified();
    }
    if(!strdata.isEmpty())
        return strdata;
    else
        return NULL;
}

QMap<QString, QStringList> LCore::getClassNames()
{
    qDebug() << "LCore:getClassNames::3:: Start. ";

    QMap<QString, QStringList> mapReturn;
    QFile file(QString(USBIDSFILE));
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QString strClass;
        QStringList strlistClassChildren;

        QTextStream in(&file);
        bool bStartAdding = false;
        bool bStopReading = false;

        while(!in.atEnd())
        {
            QString line = in.readLine();

            if(bStartAdding && line.startsWith("# List "))
                bStopReading = true;

            if((line.startsWith("C ") && !line.contains("(Defined at Interface level)")) || bStopReading)
            {
                bStartAdding = true;

                if(!strClass.isEmpty())
                {
                    strClass.remove("C ");

                    QString strID = strClass.section(' ', 0, 0);
                    QString strName = strClass.section(' ', 1, -1);

                    QString strClassName = QString("%1 (%2)").arg(strName, strID);

                    strlistClassChildren.prepend("All");
                    mapReturn.insertMulti(strClassName, strlistClassChildren);
                    strClass.clear();
                    strlistClassChildren.clear();
                    if(bStopReading) break;
                }
                strClass = line.simplified();
            }
            else if(bStartAdding && line.startsWith('\t') && !line.startsWith("\t\t"))
            {
                line = line.simplified();

                QString strID = line.section(' ', 0, 0);
                QString strName = line.section(' ', 1, -1);

                QString strChildName = QString("%1 (%2)").arg(strName, strID);

                strlistClassChildren.append(strChildName);
            }
        }
        file.close();
    }

    mapReturn.remove("Hub (09)");
    return mapReturn;
}

// cppcheck-suppress unusedFunction
void LCore::insertDefaultPNA_UDMValues(bool bDummy)
{
    qDebug() << "LCore:insertDefaultPNA_UDMValues::3:: Start. ";

    QMap<QString, QString> classMap;
    QMap<QString, QStringList> subclassMap;

    QMap<QString, QStringList> classesMap = getClassNames();

    QList<QString> classes =  classesMap.keys();
    for(int i=0; i < classes.count(); i++)
    {
        QString classCode = classes.at(i).section(" ", -1).remove("(").remove(")");
        classMap.insert(classCode, classes.at(i));
    }

    QList<QStringList> subclasses =  classesMap.values();
    for(int i=0; i < subclasses.count(); i++)
    {
        QString classCode = classes.at(i).section(" ", -1).remove("(").remove(")");
        QStringList subclassCode = subclasses.at(i);
        subclassMap.insert(classCode, subclassCode);
    }

    QString defaultPermision;
    QFile defaultFile1(PNAFILEPATH);
    if (defaultFile1.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&defaultFile1);

        while(!in.atEnd())
        {
            QString strLine = in.readLine();
            if(!strLine.startsWith("#") && strLine.contains("Ultimate fallback"))
            {
                QString permision = strLine.section("#", 0, 0).simplified();
                if(permision == "ALLOW:" )
                    defaultPermision = "Allow All";
                else
                    defaultPermision = "Deny All";
            }
        }
    }
    defaultFile1.close();

    QFile defaultFile(PNAFILEPATH);
    if (defaultFile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&defaultFile);

        while(!in.atEnd())
        {
            QString strLine = in.readLine();

            if(!strLine.startsWith("#") && strLine.contains("=") && !strLine.contains(" class=03") && !strLine.contains(" class=09"))
            {
                if(strLine.contains("subclass"))
                {
                    QString subclassValue = strLine.section(" ", 1, 3).simplified();
                    QString mainClassValue =  subclassValue.section(" ", 0,0).simplified().section("=", 1);
                    QString mainsubClassValue =  subclassValue.section(" ", 1).simplified().section("=", 1);

                    QString rule = strLine.section(":", 0,0);
                    if(rule == "DENY")
                        rule = "Deny";
                    else if(rule == "ALLOW")
                        rule = "Allow";

                    QString parent = classMap.value(mainClassValue);
                    if(!parent.isEmpty())
                    {
                        QString child;
                        QStringList childList = subclassMap.value(mainClassValue);

                        for(int i=0;i < childList.count(); i++)
                        {
                            if(childList.at(i).contains(mainsubClassValue))
                            {
                                child = childList.at(i);
                            }
                        }
                        if(child.isEmpty())
                        {
                            child = "All";
                            mainsubClassValue = "";
                        }

                        if(bDummy)
                        {
                            insertUDMValues(QString("DefaultPNAUDMSettings"), defaultPermision, "0","1", rule,parent,child, ""+ rule + ":" + parent+"",mainClassValue,mainsubClassValue, "0", "0");
                        }
                        else
                        {
                            insertUDMValues(QString("PNAUDMSettings"), defaultPermision, "0","1", rule,parent,child, ""+ rule + ":" + parent+"",mainClassValue,mainsubClassValue, "0", "0");
                            insertUDMValues(QString("DefaultPNAUDMSettings"), defaultPermision, "0","1", rule,parent,child, ""+ rule + ":" + parent+"",mainClassValue,mainsubClassValue, "0", "0");
                        }
                    }
                }
                else
                {
                    QString classValue = strLine.section("#", 0, 0).simplified().section("=", 1);
                    QString rule = strLine.section(":", 0,0);

                    if(rule == "DENY")
                        rule = "Deny";
                    else if(rule == "ALLOW")
                        rule = "Allow";

                    QString parent = classMap.value(classValue);

                    if(!parent.isEmpty())
                    {
                        QString child = "All";
                        if(bDummy)
                        {
                            insertUDMValues(QString("DefaultPNAUDMSettings"), defaultPermision, "0","1", rule,parent,child, ""+ rule + ":" + parent+"",classValue,"", "0", "0");
                        }
                        else
                        {
                            insertUDMValues(QString("PNAUDMSettings"), defaultPermision, "0","1", rule,parent,child, ""+ rule + ":" + parent+"",classValue,"", "0", "0");
                            insertUDMValues(QString("DefaultPNAUDMSettings"), defaultPermision, "0","1", rule,parent,child, ""+ rule + ":" + parent+"",classValue,"", "0", "0");
                        }
                    }
                }
            }
        }
    }
    defaultFile.close();

    qDebug() << "LCore:insertDefaultPNA_UDMValues::3:: End. ";
}

// cppcheck-suppress unusedFunction
bool LCore::getEthernetConnectStatus()
{
    qDebug() << "LCore:getEthernetConnectStatus::3:: Start. ";

    bool nCheck = true;
    QString ethDevice = getEthernetDevice();
    QProcess proc;
    QStringList arguments;
    arguments << ethDevice;
    proc.start("ethtool", arguments);
    proc.waitForFinished(-1);

    while (!proc.atEnd())
    {
        QString line = proc.readLine();
        if(line.contains("Link detected: yes"))
        {
            nCheck = false;
            break;
        }
    }

    qDebug() << "LCore:getEthernetConnectStatus::3:: return nCheck = " << nCheck;
    return nCheck;
}

// cppcheck-suppress unusedFunction
void LCore::on_offImprivataForVC(const QString& strConnectionType, const QString& strType)
{
    qDebug() << "LCore:on_offImprivataForVC::3:: Start. ";
    bool bDisableVC = false;
    bool bImprivataPIE = false;
    QStringList strSmrtCrdTrtAsProx = readTable("Imprivata", "Property='SmartCardTreatAsProxCard'", "Value");
    QStringList strImprivataPIE = readTable("Imprivata", "Property='ImprivataPIE'", "Value");

    QStringList enableImprivata = readTable("SysConf", "Property='Imprivata'", "Value");
    QStringList checkImprivata = readDefaultsValue("Imprivata");
    QStringList strlstLoggedin = readTable(QString("Imprivata"), "Property='Status'", "Value");

    if(!checkImprivata.isEmpty() && checkImprivata.at(0) == "Active" && !enableImprivata.isEmpty() && enableImprivata.at(0) == "Enable" && !strlstLoggedin.isEmpty() && strlstLoggedin.at(0) == "loggedin")
    {
        QString strVirtualChannel = readImprivataGlobalTable("VirtualChannel");
        if(!strVirtualChannel.isEmpty() && strVirtualChannel == "0")        //VirtualChannel  (1,Enabled) (0,Disabled)
        {
            bDisableVC = true;
        }
    }
    else  // For Admin mode to Enable VC.
    {
        QString strVCOther = readImprivataGlobalTable("VirtualChannelOther");
        if(strVCOther.isEmpty() == false && strVCOther.toInt())
        {
            bDisableVC = false;
        }
    }


    if(strImprivataPIE.isEmpty() == false && strImprivataPIE.at(0).toInt())
    {
        bImprivataPIE = true;
    }
    qDebug()<<"bDisableVC = "<<bDisableVC;

    if(bImprivataPIE == false && strType == "On" && (strConnectionType == "VMView" || strConnectionType == "FreeRDP") && bDisableVC == false)
    {
        QDir dir;
        dir.mkpath("/usr/lib/vmware/rdpvcbridge/");
        QProcess::execute("ln", QStringList() << "-s" << "/usr/os-bin/libvchanimpclient.so" << "/usr/lib/vmware/rdpvcbridge/libvchanimpclient.so");
        dir.mkpath("/usr/lib/i386-linux-gnu/freerdp/");
        QProcess::execute("ln", QStringList() << "-s" << "/usr/os-bin/libvchanimpclient.so" << "/usr/lib/i386-linux-gnu/freerdp/libvchanimp-client.so");
        dir.mkpath("/usr/lib/i386-linux-gnu/freerdp2/");
        QProcess::execute("ln", QStringList() << "-s" << "/usr/os-bin/libvchanimpclient.so" << "/usr/lib/i386-linux-gnu/freerdp2/libvchanimp-client.so");
        dir.mkpath("/usr/lib/freerdp/");
        QProcess::execute("ln", QStringList() << "-s" << "/usr/os-bin/libvchanimpclient.so" << "/usr/lib/freerdp/libvchanimp-client.so");
        dir.mkpath("/usr/lib/freerdp2/");
        QProcess::execute("ln", QStringList() << "-s" << "/usr/os-bin/libvchanimpclient.so" << "/usr/lib/freerdp2/libvchanimp-client.so");
        dir.mkpath("/usr/local/lib/freerdp2/");
        QProcess::execute("ln", QStringList() << "-s" << "/usr/os-bin/libvchanimpclient.so" << "/usr/local/lib/freerdp2/libvchanimp-client.so");
        dir.mkpath("/usr/local/lib/freerdp3/");
        QProcess::execute("ln", QStringList() << "-s" << "/usr/os-bin/libvchanimpclient.so" << "/usr/local/lib/freerdp3/libvchanimp-client.so");
    }
    else if(bImprivataPIE == false && strType == "Off" && (strConnectionType == "VMView" || strConnectionType == "FreeRDP"))
    {
        QProcess::execute("rm", QStringList() << "/usr/lib/vmware/rdpvcbridge/libvchanimpclient.so");
        QProcess::execute("rm", QStringList() << "/usr/lib/i386-linux-gnu/freerdp/libvchanimp-client.so");
        QProcess::execute("rm", QStringList() << "/usr/lib/i386-linux-gnu/freerdp2/libvchanimp-client.so");
        QProcess::execute("rm", QStringList() << "/usr/lib/freerdp/libvchanimp-client.so");
        QProcess::execute("rm", QStringList() << "/usr/lib/freerdp2/libvchanimp-client.so");
        QProcess::execute("rm", QStringList() << "/usr/local/lib/freerdp2/libvchanimp-client.so");       
        QProcess::execute("rm", QStringList() << "/usr/local/lib/freerdp3/libvchanimp-client.so");
    }

    if(QFile::exists("/etc/vmware/config"))
    {
        QString line;
        bool bExcludeFound = false;
        bool bIncludeFound = false;

        QFile mFile("/etc/vmware/config"); //orignal file
        QFile tFile("/tmp/config");

        if (!mFile.open(QIODevice::ReadOnly | QIODevice::Text ))
            return;

        if (!tFile.open(QIODevice::WriteOnly | QIODevice::Text ))
            return;

        QTextStream out(&tFile);
        while (!mFile.atEnd())
        {
            line = mFile.readLine();

            if(line.startsWith("viewusb.ExcludeVidPid"))
            {
                QString strList = line.section('=', 1, 1).trimmed().remove("\"");
                QStringList strlistContents = strList.split(';');
                if(strType == "On")
                {
                    if(!strlistContents.contains("vid-0c27_pid-****"))
                    {
                        strlistContents.append("vid-0c27_pid-****");
                    }

                    if(!strlistContents.contains("vid-147e_pid-****"))
                    {
                        strlistContents.append("vid-147e_pid-****");
                    }
                }
                else
                {
                    strlistContents.removeOne("vid-0c27_pid-****");
                    strlistContents.removeOne("vid-147e_pid-****");
                }

                QString strContents = QString("viewusb.ExcludeVidPid = \"");
                for(int i = 0; i < strlistContents.size(); ++i)
                {
                    strContents.append(strlistContents.at(i));
                    strContents.append(";");
                }

                strContents.chop(1);
                strContents.append("\"\n");

                if(strlistContents.count())
                {
                    out << strContents;
                }

                bExcludeFound = true;
            }
            else if(line.startsWith("viewusb.IncludeVidPid"))
            {
                QString strList = line.section('=', 1, 1).trimmed().remove("\"");
                QStringList strlistContents = strList.split(';');
                if(strType == "Off")
                {
                    if(!strlistContents.contains("vid-0c27_pid-****"))
                    {
                        strlistContents.append("vid-0c27_pid-****");
                    }

                    if(!strlistContents.contains("vid-147e_pid-****"))
                    {
                        strlistContents.append("vid-147e_pid-****");
                    }
                }
                else
                {
                    strlistContents.removeOne("vid-0c27_pid-****");
                    strlistContents.removeOne("vid-147e_pid-****");
                }

                QString strContents = QString("viewusb.IncludeVidPid = \"");
                for(int i = 0; i < strlistContents.size(); ++i)
                {
                    strContents.append(strlistContents.at(i));
                    strContents.append(";");
                }

                strContents.chop(1);
                strContents.append("\"\n");

                if(strlistContents.count())
                {
                    out << strContents;
                }

                bIncludeFound = true;
            }
            else
            {
                out << line;
            }
        }

        if(bExcludeFound == false && strType == "On")
        {
            line.clear();
            line.append("viewusb.ExcludeVidPid = \"vid-0c27_pid-****;vid-147e_pid-****\"");
            out << line;
        }

        if(bIncludeFound == false && strType == "Off")
        {
            line.clear();
            line.append("viewusb.IncludeVidPid = \"vid-0c27_pid-****;vid-147e_pid-****\"");
            out << line;
        }

        tFile.close();
        mFile.close();
        QProcess::execute("sync");

        QFile::remove("/etc/vmware/config");
        QFile::copy("/tmp/config", "/etc/vmware/config");
        QFile::remove("/tmp/config");
        sync();
    }

    if(strConnectionType == "PNAgent")
    {
        QFileInfo fi(MODULEINIFILE);
        QString strFilePath = fi.canonicalFilePath();

        if(QFile::exists(MODULEINIFILE))
        {
            QFile mFile(strFilePath); //orignal file
            QFile tFile("/tmp/module.ini");

            if (!mFile.open(QIODevice::ReadOnly | QIODevice::Text ))
                return ;

            if (!tFile.open(QIODevice::WriteOnly | QIODevice::Text ))
                return ;

            QTextStream out(&tFile);
            while (!mFile.atEnd())
            {
                QString line = mFile.readLine();

                if(strType == "On" && bDisableVC == false)
                {
                    if(line.startsWith("Imprivata=Off") || line.startsWith("ImprivataPIE=Off"))
                    {
                        if(bImprivataPIE == true)
                        {
                            line.replace("ImprivataPIE=Off", "ImprivataPIE=On");
                        }
                        else
                        {
                            line.replace("Imprivata=Off", "Imprivata=On");
                        }
                    }
                }
                else if(strType == "Off")
                {
                    if(line.startsWith("Imprivata=On") || line.startsWith("ImprivataPIE=On"))
                    {
                        if(bImprivataPIE == true)
                        {
                            line.replace("ImprivataPIE=On", "ImprivataPIE=Off");
                        }
                        else
                        {
                            line.replace("Imprivata=On", "Imprivata=Off");
                        }
                    }
                }

                if(!strSmrtCrdTrtAsProx.isEmpty() && strSmrtCrdTrtAsProx.at(0).contains("true") && strType == "On")
                {
                    if(line.startsWith("SmartCard=On"))
                    {
                        line.replace("SmartCard=On", "SmartCard=Off");
                    }
                }
                else if(!strSmrtCrdTrtAsProx.isEmpty() && strSmrtCrdTrtAsProx.at(0).contains("true") && strType == "Off")
                {
                    if(line.startsWith("SmartCard=Off"))
                    {
                        line.replace("SmartCard=Off", "SmartCard=On");
                    }
                }
                out << line;
            }

            tFile.close();
            mFile.close();
            QProcess::execute("sync");

            QFile::remove(strFilePath);
            QFile::copy("/tmp/module.ini", strFilePath);
            QFile::remove("/tmp/module.ini");
            sync();
        }

        if(QFile::exists("/opt/Citrix/ICAClient/usb.conf"))
        {
            QFile mFile("/opt/Citrix/ICAClient/usb.conf"); //orignal file
            QFile tFile("/tmp/usb.conf");

            if (!mFile.open(QIODevice::ReadOnly | QIODevice::Text ))
                return;

            if (!tFile.open(QIODevice::WriteOnly | QIODevice::Text ))
                return;

            QTextStream out(&tFile);
            QString strFileData = mFile.readAll();
            QStringList strlistLines = strFileData.split('\n');

            for(int i = 0; i < strlistLines.count(); i++)
            {
                QString strLine = strlistLines.at(i);
                strLine = strLine.append('\n');

                if(strLine.contains("ALLOW: vid=147e") || strLine.contains("DENY: vid=147e") || strLine.contains("ALLOW: vid=0c27") || strLine.contains("DENY: vid=0c27"))
                {
                    continue;
                }
                else if(strLine.contains("GENERAL RULES"))
                {
                    out << strLine;

                    if(strType == "On")
                    {
                        out << QString("DENY: vid=147e\n");
                        out << QString("DENY: vid=0c27\n");
                    }
                    else if(strType == "Off")
                    {
                        out << QString("ALLOW: vid=147e\n");
                        out << QString("ALLOW: vid=0c27\n");
                    }
                }
                else
                {
                    out << strLine;
                }
            }

            tFile.close();
            mFile.close();
            QProcess::execute("sync");

            QFile::remove("/opt/Citrix/ICAClient/usb.conf");
            QFile::copy("/tmp/usb.conf", "/opt/Citrix/ICAClient/usb.conf");
            QFile::remove("/tmp/usb.conf");
            sync();
        }

    }


    if(!strSmrtCrdTrtAsProx.isEmpty() && strSmrtCrdTrtAsProx.at(0).contains("true") && strConnectionType == "VMView")
    {
        if(strType == "On")
        {
            QFile::copy("/usr/lib/pcoip/vchan_plugins/libscredirvchanclient.so", "/usr/lib/pcoip/vchan_plugins/libscredirvchanclient.so-orig");
            QFile::remove("/usr/lib/pcoip/vchan_plugins/libscredirvchanclient.so");
        }
        else if(strType == "Off")
        {
            QFile::copy("/usr/lib/pcoip/vchan_plugins/libscredirvchanclient.so-orig", "/usr/lib/pcoip/vchan_plugins/libscredirvchanclient.so");
            QFile::remove("/usr/lib/pcoip/vchan_plugins/libscredirvchanclient.so-orig");
        }
    }

    qDebug() << "LCore:on_offImprivataForVC::3:: End. ";
}

// cppcheck-suppress unusedFunction
int LCore::smbpasswd_admin(QString strPassword)
{
    qDebug() << "LCore:smbpasswd_admin::3:: Start. ";
    int nReturnValue = 0;
    QStringList strArg;
    strArg<<"-a"<<"-s"<<"admin";
    QProcess *process = new QProcess(this);
    process->start(QString("smbpasswd"), strArg);
    process->waitForStarted(-1);
    QByteArray ba;
    ba.append(strPassword.toUtf8()+QString("\n"));
    process->write(ba);
    process->write(ba);
    process->closeWriteChannel();
    process->waitForFinished(-1);
    nReturnValue = process->exitCode();
    delete process;
    qDebug() << "LCore:smbpasswd_admin::3:: End. ";
    return nReturnValue;
}

QString LCore::getHostNameFromDmidecode()
{
    qDebug() << "LCore:getHostNameFromDmidecode::3:: Start. ";

    QProcess proc;
    proc.start(QString("dmidecode"), QStringList() << "-t" << "Chassis");
    proc.waitForFinished(-1);
    QString line, hostname;
    while ( !proc.atEnd() )
    {
        if(( line = proc.readLine() ).contains("Asset Tag:"))
        {
            line = line.simplified();
            hostname = line.section(":", 1, 1).simplified();
            break;
        }
    }
    qDebug() << "LCore:getHostNameFromDmidecode::3:: return hostname = " << hostname;
    return hostname;
}


bool LCore::checkForLenovoValidBoards()
{
    QString strMTs="";
    QStringList strListMTs;
    strListMTs << "10G8" << "10G9" << "10GA" << "10GB" << "10GC" << "10GD" << "10GE" << "10GF" << "10KG" << "10KH" << "10GJ" << "10GK" << "10KD" <<"10KJ" << "10KK" << "10JM" << "10JN" <<"10JQ" << "10JR" << "10JS" << "10JT"<< "10JU" << "10JV" << "10HY" << "10J0" << "10M2" << "10M3" << "10M4" << "10M5" << "10RA" << "10RB" << "10RC" << "10RD" << "10TL" << "10UY" << "10V0" << "10V1" << "10V2" << "20J4" << "20J5" << "10VL" << "10VM" << "10VN" << "10VQ" << "20LS" << "20LT" <<  "10GG" << "10GH" << "10GL" << "10GM" << "10JU" <<"81MQ" << "82N8" << "82N9";
    strListMTs << "11G4" << "11G5" << "11G6" << "11G7"<<"11BW"<<"11BX" ;
    strMTs = getLenovoMT();

    if(strListMTs.contains(strMTs))
    {
        return true;
    }
    else
        return false;
}

QStringList LCore::findIPs()
{
    qDebug() << "LCore:findIPs::3:: Start. ";

    QStringList strlistItems;
    QList<QNetworkInterface> listNetworkInterfaces = QNetworkInterface::allInterfaces();
    QListIterator<QNetworkInterface> itr(listNetworkInterfaces);
    while(itr.hasNext())
    {
        QNetworkInterface networkInterface = itr.next();
        QString strInterfaceName = networkInterface.name();

        if(strInterfaceName == "lo")
            continue;

        bool status = networkInterface.flags().testFlag(QNetworkInterface::IsRunning);
        qDebug() << "NetworkInterface " << strInterfaceName <<" Connected Status :" << status ;
        if(status)
        {
            QList<QNetworkAddressEntry> listNetworkAddressEntry = networkInterface.addressEntries();
            QListIterator<QNetworkAddressEntry> eitr(listNetworkAddressEntry);
            while(eitr.hasNext())
            {
                QHostAddress hostAddress = eitr.next().ip();
                /// Don't remove this else it will give wroung output some time in fast execution.		//Mayur
                qDebug() << "LCore::findIPs::3 hostAddress " << hostAddress.toString();
                qDebug() << "               ";
                ::usleep(10000);
                if(hostAddress.scopeId().isEmpty() && hostAddress != QHostAddress(QHostAddress::LocalHost) && hostAddress != QHostAddress(QHostAddress::LocalHostIPv6) && hostAddress.protocol() == QAbstractSocket::IPv4Protocol)
                {
                    QString strIP = hostAddress.toString();
                    if(!strIP.isEmpty())
                    {
                        strlistItems << QString("%1:%2").arg(strInterfaceName, strIP);
                    }
                }
            }
        }
    }

    qDebug() << "LCore:findIPs::3:: return Available IP's = " << strlistItems;
    return strlistItems;
}

// cppcheck-suppress unusedFunction
void LCore::processApplicationLogFile()
{
    qDebug() << "LCore:processApplicationLogFile::3:: Start. ";
    int nMaxLinesCheck = 13000;

    QStringList strlistLines;
    int nLines = getNumberofLinesFromFile(DBGFILENAME, strlistLines);
    if(nLines > nMaxLinesCheck)
    {
        QFile updateData(DBGFILENAME);
        if(updateData.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&updateData);
            int nMinLinesToKeep = 5000;

            for(int i = strlistLines.length() - nMinLinesToKeep; i < strlistLines.count(); i++)
            {
                out << strlistLines.at(i) << "\n";
            }
            updateData.close();
        }
    }
    qDebug() << "LCore:processApplicationLogFile::3:: End. ";
}

int LCore::getNumberofLinesFromFile(QString path, QStringList &strlistLines)
{
    strlistLines.clear();
    if(QFile(path).exists())
    {
        QFile readData(path);
        if(readData.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&readData);
            while(!in.atEnd())
            {
                QString strData = in.readLine().trimmed();
                strlistLines << strData;
            }
            readData.close();
        }
    }

    return strlistLines.count();
}

QStringList LCore::getavailableIP()
{    
    qDebug() << "LCore:getavailableIP::3:: Start. ";

    QStringList strListIP;
    /// Called in QFutureWatcher because it HANGING UP image.
    QFutureWatcher<void> applyclickedwatcher;
    QFuture<QStringList> applyclickedfuture = QtConcurrent::run(this, &LCore::findIPs);
    applyclickedwatcher.setFuture(applyclickedfuture);
    while(applyclickedwatcher.isRunning())
        qApp->processEvents();

    if(applyclickedfuture.result().count())
    {
        strListIP << applyclickedfuture.result();
    }
    else
    {
        strListIP.clear();
    }

    qDebug() << "LCore:getavailableIP::3:: return strListIP = " << strListIP;
    return strListIP;
}

int LCore::WEBLauncherStatus()
{
    qDebug() << "LCore:WEBLauncherStatus::3:: Start. ";

    int nStatus = 0;
    QProcess process;
    process.start("nmap -n -p 80 wslauncher --open");
    process.waitForFinished(-1);

    QString output(process.readAllStandardOutput());

    QString output1(process.readAllStandardError());

    if(output1.contains("Failed to resolve"))
    {
        nStatus = 0;
        return nStatus;
    }
    if(!output.contains("down") && output.contains("80/tcp open"))
    {
        nStatus = 2;    //HTTP
    }
    else
        nStatus = 0;

    if(!nStatus)
    {
        QProcess processn;
        processn.start("nmap -n -p 443 wslauncher --open");
        processn.waitForFinished(-1);

        QString outputn(processn.readAllStandardOutput());

        QString output1n(processn.readAllStandardError());
        if(output1n.contains("Failed to resolve"))
        {
            nStatus = 0;
            return nStatus;
        }
        if(!outputn.contains("down") && outputn.contains("443/tcp open"))
        {
            nStatus = 1;    //HTTPS
        }
        else
            nStatus = 0;
    }

    qDebug() << "LCore:WEBLauncherStatus::3:: return nStatus = " << nStatus;
    return nStatus;
}

// cppcheck-suppress unusedFunction
bool LCore::getWirelessInterfaceConnectedStatus()
{
    qDebug() << "LCore:getWirelessInterfaceConnectedStatus::3:: Start. ";

    bool nCheck = false;
    QStringList wirelesslist =  ListWirelessInterfaces();
    QProcess proc;
    foreach(const QString& wireless, wirelesslist)
    {
        QStringList arguments;
        arguments << wireless;
        proc.start("ethtool", arguments);
        proc.waitForFinished(-1);

        while (!proc.atEnd())
        {
            QString line = proc.readLine();
            if(line.contains("Link detected: yes"))
            {
                nCheck = true;
                break;
            }
        }
        if(nCheck)
            break;
    }

    qDebug() << "LCore:getWirelessInterfaceConnectedStatus::3:: return nCheck = " << nCheck;
    return nCheck;
}

// cppcheck-suppress unusedFunction
bool LCore::getWiredInterfaceConnectedStatus()
{
    qDebug() << "LCore:getWiredInterfaceConnectedStatus::3:: Start. ";

    bool nCheck = false;
    QString ethDevice = getEthernetDevice();
    QProcess proc;
    QStringList arguments;
    arguments << ethDevice;
    proc.start("ethtool", arguments);
    proc.waitForFinished(-1);

    while (!proc.atEnd())
    {
        QString line = proc.readLine();
        if(line.contains("Link detected: yes"))
        {
            nCheck = true;
            break;
        }
    }

    qDebug() << "LCore:getWiredInterfaceConnectedStatus::3:: return nCheck = " << nCheck;
    return nCheck;
}

bool LCore::getNetworkDeviceLinkStatus(const QString& strDevice, const QString& strType)
{
    bool bLinkDetected = false;

    QProcess *proc = new QProcess;
    QStringList arguments;
    arguments << strDevice;
    proc->start("ethtool", arguments);
    proc->waitForFinished(-1);

    while(!proc->atEnd())
    {
        QString line = proc->readLine();
        if(line.contains("Link detected: yes"))
        {
            bLinkDetected = true;
            break;
        }
    }
    proc->deleteLater();

    QProcess *procwifi = new QProcess;
    if(strType == QString("Wireless") && !bLinkDetected)
    {

        procwifi->start("cat /proc/net/wireless");
        procwifi->waitForFinished(-1);

        while (!procwifi->atEnd())
        {
            QString strwifioutput = procwifi->readLine();
            if(strwifioutput.contains(strDevice))
            {
                bLinkDetected = true;
                break;
            }
        }
    }
    procwifi->deleteLater();

    return bLinkDetected;
}


QString LCore::checkPassord(const QString& strPassword, const QString& strBIOSSettingPath)
{
    qDebug() << "LCore:checkPassord::3:: Start. ";

    QString strCheckStatus;
    QString strFileName = QString("%1/password_kbd_lang").arg(strBIOSSettingPath);
    echoCommand(strFileName, QString("us"));

    strFileName = QString("%1/password_encoding").arg(strBIOSSettingPath);
    echoCommand(strFileName, QString("ascii"));

    strFileName = QString("%1/password_type").arg(strBIOSSettingPath);
    echoCommand(strFileName, QString("pap"));

    strFileName = QString("%1/password").arg(strBIOSSettingPath);
    echoCommand(strFileName, strPassword);

    strFileName = QString("%1/Password Count Exceeded Error").arg(strBIOSSettingPath);

    bool bCheckFile = false;
    if(!QFile::exists(strFileName))
    {
        strFileName = QString("%1/PasswordCountExceededError").arg(strBIOSSettingPath);
        bCheckFile = true;
    }

    QString strPeviousState, strNewState;
    QFile SettingFilePath(strFileName);
    if(SettingFilePath.open(QIODevice::ReadOnly))
    {
        strPeviousState = SettingFilePath.readAll();
        if(bCheckFile)
        {
            strPeviousState = strPeviousState.simplified().section(" ",0,0);
        }
        else
        {
            strPeviousState = strPeviousState.section(";",0,0);
        }
    }
    SettingFilePath.close();

    if(strPeviousState == "Enabled")
    {
        strNewState = "Disabled";
    }
    else if(strPeviousState == "Enable")
    {
        strNewState = "Disable";
    }
    else if(strPeviousState == "Disabled")
    {
        strNewState = "Enabled";
    }
    else if(strPeviousState == "Disable")
    {
        strNewState = "Enable";
    }

    strCheckStatus = echoCommand(strFileName, strNewState);

    qDebug() << "LCore:checkPassord::3:: return strCheckstatus = " << strCheckStatus;
    return strCheckStatus;
}

QString LCore::echoCommand(QString filename, QString data)
{
    qDebug() << "LCore:echoCommand::3:: Start. ";

    QFile::remove("/tmp/wmiout");

    QString strCmd = QString("echo '%1' > \"%2\"").arg(data, filename);
    int nStatus = system(strCmd.toLatin1());
    ::sleep(1);
    QString strStatus = QString("Failed");

    if(QString::number(nStatus) == "0")
    {
        strStatus = "Success";
    }

    qDebug() << "LCore:echoCommand::3:: return strStatus = " << strStatus;
    return strStatus;
}

// cppcheck-suppress unusedFunction
bool LCore::checkPasswordState(QString strSettingsPath)
{
    qDebug() << "LCore:checkPasswordState::3:: Start. ";

    bool bActive = false;
    QString strPasswordSettingsPath = QString("%1/password_settings").arg(strSettingsPath);
    qDebug()<<" strPasswordSettingsPath :"<<strPasswordSettingsPath;
    QFile file(strPasswordSettingsPath);
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        while(!in.atEnd())
        {
            QString line = in.readLine();
            if(line.startsWith("password_state:"))
            {
                QString state = line.trimmed();
                state = state.section(" ", -1);
                if(state == "0x2" || state == "0x3")
                {
                    bActive = true;
                }
                break;
            }
        }
    }


    qDebug() << "LCore:checkPasswordState::3:: return bActive = " << bActive;
    return bActive;
}

// cppcheck-suppress unusedFunction
QString LCore::getBIOSSettingPath()
{
    qDebug() << "LCore:getBIOSSettingPath::3:: Start. ";

    QProcess proc;
    proc.start("find / -name password");
    proc.waitForFinished(-1);
    QString strPath ;
    while(!proc.atEnd())
    {
        strPath = proc.readLine().trimmed();
        if(strPath.contains("wmi_bus")) // condition added to confirm proper bios path
        {
            break;
        }
    }
    strPath.remove("/password");

    qDebug() << "LCore:getBIOSSettingPath::3:: return strpath = " << strPath;
    return strPath;
}

// cppcheck-suppress unusedFunction
QStringList LCore::getBootSequenceList(QString strSettingsPath)
{  
    qDebug() << "LCore:getBootSequenceList::3:: Start. ";

    QString strBootOrderFilePath = QString("%1/Primary Boot Sequence").arg(strSettingsPath);

    if(!QFile::exists(strBootOrderFilePath))
    {
        strBootOrderFilePath = QString("%1/PrimaryBootSequence").arg(strSettingsPath);
    }

    if(!QFile::exists(strBootOrderFilePath))
    {
        strBootOrderFilePath = QString("%1/BootOrder").arg(strSettingsPath);
    }

    if(!QFile::exists(strBootOrderFilePath))
    {
        strBootOrderFilePath = QString("%1/BootPriority").arg(strSettingsPath);
        QFile bootPriorityFile(strBootOrderFilePath);
        if(bootPriorityFile.exists())
        {
            QString strFirstElement;

            if(bootPriorityFile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                strFirstElement = bootPriorityFile.readLine().trimmed();
                bootPriorityFile.close();
            }

            if(strFirstElement == QString("UEFI First"))
            {
                strBootOrderFilePath = QString("%1/EFI-BootOrder").arg(strSettingsPath);
            }
            else
            {
                strBootOrderFilePath = QString("%1/Legacy-BootOrder").arg(strSettingsPath);
            }
        }
    }

    QFile sequenceFile(strBootOrderFilePath);
    if(!sequenceFile.exists())
    {
        return QStringList();
    }
    else
    {
        QStringList strlistBootOrder;

        if(sequenceFile.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QString strLine = sequenceFile.readAll();
            QChar charSpitter = ',';
            if(strLine.contains(QString("\n")) && !strLine.section("\n", 1, 1).isEmpty())
            {
                strLine = strLine.section("\n", 1, 1).trimmed();
            }

            qDebug() << "LCore:getBootSequenceList::3:: strLine : " << strLine;
            if(!strLine.contains(","))
            {
                charSpitter = ':';
                if(strLine.contains("[")){
                    strLine=strLine.replace(";[Excluded from boot order","");
                    strLine =strLine.section("]",0,0);

                }
                else
                {
                    strLine = strLine.section(';', 0, 0);
                }
                //strLine = strLine.section(';', 0, 0);
            }

            strlistBootOrder = strLine.trimmed().split(charSpitter);

            if(strLine.contains(','))
            {
                qDebug()<<"LCore:getBootSequenceList::3:: strlistBootOrder at 0" <<strlistBootOrder.at(0).simplified().section(' ',1,1);
                QString strFirst = strlistBootOrder.first();
                strlistBootOrder.removeFirst();
                strlistBootOrder.prepend(strFirst.simplified().section(' ',0,1));
            }
            sequenceFile.close();
        }

        qDebug() << "LCore:getBootSequenceList::3:: return strlistBootOrder = " << strlistBootOrder;
        return strlistBootOrder;
    }
}

// cppcheck-suppress unusedFunction
QStringList LCore::getBootSequenceListExclude(QString strSettingsPath) //Aboli
{
    qDebug()<<"LCore getBootSequenceListExclude::starts"<<endl;
    QString strBootOrderFilePath = QString("%1/Primary Boot Sequence").arg(strSettingsPath);
    qDebug()<<"strBootOrderFilePath : "<<strBootOrderFilePath<<endl;
    qDebug()<<"strSettingPath : "<<strSettingsPath<<endl;
    if(!QFile::exists(strBootOrderFilePath))
    {
        strBootOrderFilePath = QString("%1/PrimaryBootSequence").arg(strSettingsPath);
    }

    if(!QFile::exists(strBootOrderFilePath))
    {
        strBootOrderFilePath = QString("%1/BootOrder").arg(strSettingsPath);
    }

    QFile sequenceFile(strBootOrderFilePath);
    if(!sequenceFile.exists())
    {
        return QStringList();
    }
    else
    {
        QStringList strlistBootOrder;

        if(sequenceFile.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QString strLine =sequenceFile.readAll();
            if(strLine.contains(QString("\n")) && !strLine.section("\n", 1, 1).isEmpty())
            {
                strLine = strLine.section("\n", 0, 0).trimmed();
                qDebug()<<"strLine1 : "<<strLine;
                strlistBootOrder<<strLine.split(':');

            }
            else
            {
                strLine = strLine.section(';', 0,0);
                qDebug()<<"strLine1 : "<<strLine;
                strlistBootOrder<<strLine.split(":");
                qDebug()<<"str2 : "<<strlistBootOrder;

            }

            qDebug()<<"End of ::3 getBootSequenceListExclude";
            sequenceFile.close();
        }
        qDebug()<<"strlistbootorder : "<<strlistBootOrder;
        return strlistBootOrder;
    }
}

// cppcheck-suppress unusedFunction
QString LCore::ChangeBIOSPassword(const QString& strBIOSSettingsPath, const QString& strCurrentPassword, const QString& strNewPassword)
{
    qDebug() << "LCore:ChangeBIOSPassword::3:: Start. ";

    QString strResult;
    strResult = checkPassord(strCurrentPassword,strBIOSSettingsPath);

    if(strResult == "Success")
    {
        QString strFileName = QString("%1/password_change").arg(strBIOSSettingsPath);
        strResult = echoCommand(strFileName, strNewPassword);
    }
    else
    {
        strResult = "Wrong current password.";
    }

    qDebug() << "LCore:ChangeBIOSPassword::3:: End. ";
    return strResult;
}

// cppcheck-suppress unusedFunction
QString LCore::ChangeBootSequence(const QString& strBIOSSettingsPath, const QString& strCurrentPassword, const QString& strBootSequence, bool bCurrentPassIsEnabled, const QString& strList)
{
    qDebug() << "LCore:ChangeBootSequence::3:: Start. ";
    int count=0;
    QString strResult;
    strResult = checkPassord(strCurrentPassword,strBIOSSettingsPath);

    if(strResult == "Success" || !bCurrentPassIsEnabled)
    {
        QString strFileName = QString("%1/Primary Boot Sequence").arg(strBIOSSettingsPath);

        if(!QFile::exists(strFileName))
        {
            strFileName = QString("%1/PrimaryBootSequence").arg(strBIOSSettingsPath);
        }

        if(!QFile::exists(strFileName))
        {
            strFileName = QString("%1/BootOrder").arg(strBIOSSettingsPath);
        }

        if(!QFile::exists(strFileName))
        {
            strFileName = QString("%1/BootPriority").arg(strBIOSSettingsPath);
            QFile bootPriorityFile(strFileName);
            if(bootPriorityFile.exists())
            {
                QString strFirstElement;

                if(bootPriorityFile.open(QIODevice::ReadOnly | QIODevice::Text))
                {
                    strFirstElement = bootPriorityFile.readLine().trimmed();
                    bootPriorityFile.close();
                }

                if(strFirstElement == QString("UEFI First"))
                {
                    strFileName = QString("%1/EFI-BootOrder").arg(strBIOSSettingsPath);
                }
                else
                {
                    strFileName = QString("%1/Legacy-BootOrder").arg(strBIOSSettingsPath);
                }
            }
        }
            //strResult = echoCommand(strFileName, strBootSequence);
          strResult = echoCommand(strFileName, strList);
        if(strResult == "Success")
        {
            count++;
        }

        strFileName = QString("%1/Manufacturer Boot Sequence").arg(strBIOSSettingsPath);

        if(!QFile::exists(strFileName))
        {
            strFileName = QString("%1/ManufacturerBootSequence").arg(strBIOSSettingsPath);
        }

        strResult = echoCommand(strFileName, strList);

        if(strResult == "Success")
        {
            count++;
        }
        strFileName = QString("%1/Error Boot Sequence").arg(strBIOSSettingsPath);

        if(!QFile::exists(strFileName))
        {
            strFileName = QString("%1/ErrorBootSequence").arg(strBIOSSettingsPath);
        }

        strResult = echoCommand(strFileName, strList);

        if(strResult == "Success")
        {
            count++;
        }
        strFileName = QString("%1/Primary Boot Sequence").arg(strBIOSSettingsPath);

        if(!QFile::exists(strFileName))
        {
            strFileName = QString("%1/PrimaryBootSequence").arg(strBIOSSettingsPath);
        }

        strResult = echoCommand(strFileName, strList);

        if(strResult == "Success")
        {
            count++;
        }



    }
    if(count >0)
        return "Success";
    else
        return "Failed";

    qDebug() << "LCore:ChangeBootSequence::3:: return strresult = " << strResult;

    // }

    /*else
    {
        if(strResult == "Success" || !bCurrentPassIsEnabled)
        {
            strFileName = QString("%1/Primary Boot Sequence").arg(strBIOSSettingsPath);

            if(!QFile::exists(strFileName))
            {
                strFileName = QString("%1/PrimaryBootSequence").arg(strBIOSSettingsPath);
            }

            if(!QFile::exists(strFileName))
            {
                strFileName = QString("%1/BootOrder").arg(strBIOSSettingsPath);
            }

            if(!QFile::exists(strFileName))
            {
                strFileName = QString("%1/BootPriority").arg(strBIOSSettingsPath);
                QFile bootPriorityFile(strFileName);
                QString strFirstElement;
                if(bootPriorityFile.exists())
                {
                    if(bootPriorityFile.open(QIODevice::ReadOnly | QIODevice::Text))
                    {
                        strFirstElement = bootPriorityFile.readLine().trimmed();
                        bootPriorityFile.close();
                    }

                    if(strFirstElement == QString("UEFI First"))
                    {
                        strFileName = QString("%1/EFI-BootOrder").arg(strBIOSSettingsPath);
                    }
                    else
                    {
                        strFileName = QString("%1/Legacy-BootOrder").arg(strBIOSSettingsPath);
                    }
                }
            }

            strResult = echoCommand(strFileName, strBootSequence);
        }

        qDebug() << "LCore:ChangeBootSequence::3:: return strresult = " << strResult;
        return strResult;
    }*/
}

// cppcheck-suppress unusedFunction
QString LCore::RestoreDefaultConf(const QString& strBIOSSettingsPath, const QString& strCurrentPassword)
{
    QString strFileRead ,strOSOptimiziedDefaultsState;
    bool bCheckState = false;

    QString strFileOSOptimiziedDefaults =  QString("%1/OS Optimized Defaults").arg(strBIOSSettingsPath) ;

    if(QFile::exists(strFileOSOptimiziedDefaults))
    {
        QFile fileCheck(strFileOSOptimiziedDefaults);
        if(fileCheck.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            strFileRead = fileCheck.readAll();
            strOSOptimiziedDefaultsState = strFileRead.section(';',0,0);
            qDebug() <<"strOSOptimiziedDefaultsState : "<< strOSOptimiziedDefaultsState;
        }
    }
    else
    {
        return "Failed to restore" ;
    }

    if(strOSOptimiziedDefaultsState == "Disabled")
        bCheckState = true;

    if(bCheckState)
    {
        QFile file(QString("/root/.BiosRestore"));                                                              //File is written for VMSClient and removed in VMSClient pollserver
        if(file.open(QIODevice::WriteOnly | QIODevice::Text))
            file.close();

        QString filename = QString("%1/load_default_settings").arg(strBIOSSettingsPath) ;
        system(QString("(sleep 5 ; reboot ) &").toLatin1());
        echoCommand(filename,"Restore");
    }
    else
    {
        return "Failed to restore" ;
    }
}

// cppcheck-suppress unusedFunction
bool LCore::checkBoardTypeForBIOS()
{
    qDebug() << "LCore:checkBoardTypeForBIOS::3:: Start. ";

    bool bValid = false;
    QProcess proc;
    proc.start("dmidecode -s system-product-name");
    proc.waitForFinished(-1);
    QString strManufacture;
    while(!proc.atEnd())
    {
        strManufacture = proc.readLine().trimmed();
    }

    QString strBoardName = getLenovoMT();
    qDebug() << "getLenovoMT() "<<strBoardName;

    if(!strManufacture.contains("INVALID"))
    {
        if(isLM600(strBoardName) || isLM625(strBoardName) || isM715q(strBoardName) || isM715qRR(strBoardName) || isM75n(strBoardName))
        {
            bValid = true;
        }
    }

    qDebug() << "LCore:checkBoardTypeForBIOS::3:: return bValid = " << bValid;
    return bValid;
}

bool LCore::executeNmap(const QString& strIP)
{
    qDebug() << "LCore:executeNmap::3:: Start. ";

    QProcess *process;
    QStringList strlistArgs;
    QString strOutput;
    strlistArgs << QString("-sP") << strIP;
    process = new QProcess;
    process->start(QString("nmap"), strlistArgs);
    process->waitForFinished(-1);
    strOutput = process->readAll();
    process->deleteLater();

    if(strOutput.contains("Host is up"))
    {
        qDebug() << "LCore:executeNmap::3:: IP = " << strIP << " return Value = true";
        return true;
    }
    else
    {
        qDebug() << "LCore:executeNmap::3:: IP = " << strIP << " return Value = false";
        return false;
    }

}

// cppcheck-suppress unusedFunction
bool LCore::checkNetworkIP(const QString& strNetworkType, const QString& strDevice)
{
    qDebug() << "LCore:checkNetworkIP::3:: Start. ";

    bool bNetworkIPFound = true;
    QStringList strlist;
    int nNetworkMode = 2;

    strlist = readTable("NetworkDetails", "NetworkType = '"+strNetworkType+"'");

    if(strlist.count())
    {
        nNetworkMode = strlist.at(0).toInt();
    }

    if(nNetworkMode == 2)
    {
        bNetworkIPFound = false;
        int nCheckCounter = 0;


        while(nCheckCounter < 10)
        {
            QNetworkInterface interface = QNetworkInterface::interfaceFromName(strDevice);
            QList<QNetworkAddressEntry> entries = interface.addressEntries();
            if(entries.count() > 0)
            {
                qDebug() << "LCore:checkNetworkIP::3:: IP address found";
                bNetworkIPFound = true;
                break;
            }

            nCheckCounter++;
            ::sleep(0.2);                   // Commented to speed up launching connections fast.
        }
    }

    qDebug() << "LCore:checkNetworkIP::3:: return ip found = " << bNetworkIPFound;
    return bNetworkIPFound;
}

// cppcheck-suppress unusedFunction
int LCore::getWifiSignalStrength()
{
    qDebug() << "LCore:getWifiSignalStrength::3:: Start. ";

    int nSignalValue = -100;
    QStringList strlistWifiDevices;
    strlistWifiDevices = ListWirelessInterfaces();

    if(strlistWifiDevices.count())
    {
        QString strWifiDevice = strlistWifiDevices.at(0);

        QProcess *procWifiSignal = new QProcess();
        QStringList strlistArguments;
        strlistArguments << QString("dev") << strWifiDevice << QString("link");
        procWifiSignal->start(QString("iw"), strlistArguments);
        procWifiSignal->waitForFinished(-1);

        while(!procWifiSignal->atEnd())
        {
            QString line = procWifiSignal->readLine();

            if(line.contains("signal"))
            {
                nSignalValue = line.section(":",1,1).section(" ",1,1).toInt();
                qDebug() << "LCore:getWifiSignalStrength::3::  Signal Value : " << nSignalValue ;
                break;
            }
        }

        procWifiSignal->deleteLater();
    }

    qDebug() << "LCore:getWifiSignalStrength::3:: return signal value = " << nSignalValue;
    return nSignalValue;
}

// cppcheck-suppress unusedFunction
bool LCore::isEfiImage()
{
    qDebug() << "LCore:isEfiImage::3:: Start. ";
    bool bCheck = false;
    QString strOutput;
    QProcess proc;

    QString strLabel= "findfs LABEL=EFI";
    int nStatus = system(strLabel.toLatin1());

    if(nStatus != 0)
    {
        strLabel = "findfs LABEL=efi";
    }

    proc.start(strLabel);
    proc.waitForFinished(-1);
    strOutput = proc.readAllStandardOutput();
    if(strOutput.contains("/dev/"))
    {
        bCheck = true;
    }

    qDebug() << "LCore:isEfiImage::3:: return bCheck = " << bCheck;
    return bCheck;
}

// cppcheck-suppress unusedFunction
void LCore::getKeyCode(QString Key)
{
    QProcess *process = new QProcess;
    QString cmd = "/bin/sh -c \" xmodmap -pke | grep -i \""+QString(Key)+"\" \"";
    process->start(cmd.toLatin1());
    process->waitForFinished(-1);
    QString strOutput = process->readAll().trimmed();
    process->deleteLater();

    QString strColumnName = Key + "KeyCode";
    QString columnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
    QString columnValues = "'"+ strColumnName+"', '"+strOutput+"'";
    writeTable(QString("SysConf"), columnType, columnValues, "AppendNew");
}

void LCore::disableKeyCode(QString Key)
{
    QProcess *process = new QProcess;
    QString cmd = "/bin/sh -c \" xmodmap -pke | grep -i \""+QString(Key)+"\" \"";
    process->start(cmd.toLatin1());
    process->waitForFinished(-1);
    while(!process->atEnd())
    {
        ///to handle multiple KeyCode as on xkill multiple key code appers.
        QString line = process->readLine().trimmed();
        if(!line.isEmpty())
        {
            QString strCmd =  QString("xmodmap") + QString(" -e ")+ QString("'"+ line.section("=", 0, 0)+ "="+ "'");
            system(strCmd.toLatin1());
        }
    }
    sync();
    delete process;
}

// cppcheck-suppress unusedFunction
void LCore::LaunchFreeRDPAppsOnDesktop(QString connectionName, int value) ///New Implementation of FreeRDP("Display Apps on Desktop" and "SSO")--varsha
{
    qDebug() << "LCore:LaunchFreeRDPAppsOnDesktop::3:: Start. ";

    QDir dir (QString(RDWeb_LIST_DIR));
    QStringList list = dir.entryList(QDir::Dirs | QDir::NoDotAndDotDot);

    for(int j = 0; j < list.size(); ++j)
    {
        QString conDirname = list.at(j);
        QString newPath = RDWeb_LIST_DIR +connectionName.section(":",0,0)+ "/"+"list";
        QFile file(newPath);

        if(file.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&file);
            QString output;
            while(!in.atEnd())
            {
                output = in.readLine();
                QString app_name,icon_path,can_name;

                app_name = output.section("\t", 0, 0).trimmed().remove("'");
                icon_path = RDWeb_LIST_DIR +conDirname+"/"+output.section("\t", 1, 1).trimmed().remove("'");
                can_name =output.section("\t", 2, 2).trimmed().remove("'");
                qDebug() << "LCore:LaunchFreeRDPAppsOnDesktop::3:: icon_path :" <<  "----6-------" << icon_path;
                qDebug() << "LCore:LaunchFreeRDPAppsOnDesktop::3:: app_name :" << "-----6--- " << app_name;
                qDebug() << "LCore:LaunchFreeRDPAppsOnDesktop::3:: can_name :" << "-----6--- " << can_name;
                QString cmd;
                cmd = "xalf -s LaunchCommand \""+ connectionName.section(":",0,0).trimmed()+":"+app_name +"\" FreeRDP";

                qDebug() << "LCore:LaunchFreeRDPAppsOnDesktop::3:: cmd : " << cmd;
                if(value)
                {
                    QString columnType = "Name VARCHAR(100) , Date VARCHAR(50), Icon VARCHAR(50), Type VARCHAR(20), Path VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(Name, Path) ";
                    QString columnValues = "'"+ app_name.trimmed() +"', '02/07/2013', '"+ icon_path +"', 'Connection', '"+ cmd +"', 0, 0, 0, '', ''";
                    writeTable("DesktopWidget", columnType, columnValues, "AppendNew");
                }
                else
                {
                    qDebug() << "LCore:LaunchFreeRDPAppsOnDesktop::3:: delete icons status :" << deleteEntry("DesktopWidget", "Name='"+app_name.trimmed()+"' AND Path='"+cmd+"'");
                }
            }
        }

        file.close();
        sync();
    }

    updateSharedMemory();

    qDebug() << "LCore:LaunchFreeRDPAppsOnDesktop::3:: End. ";
}

QString LCore::getActiveWindowId()
{
    QStringList strlistArguements;
    strlistArguements << QString("getactivewindow");
    QProcess *process = new QProcess(this);
    process->start(QString("xdotool"), strlistArguements);
    process->waitForFinished(-1);
    QString strActiveWindowId = process->readAll();
    process->deleteLater();
    strActiveWindowId = strActiveWindowId.simplified();
    return strActiveWindowId;
}

QString LCore::getWindowClass(const QString& strWindowId)
{
    if(strWindowId.isEmpty())
        return "";

    QString strClassName;
    QStringList strlistArguments;
    strlistArguments << QString("-root") << QString("-id") << strWindowId;
    QProcess *process = new QProcess(this);
    process->start(QString("xprop"), strlistArguments);
    process->waitForFinished(-1);
    while(!process->atEnd())
    {
        QString strLine = process->readLine().simplified();
        if(strLine.startsWith(QString("WM_CLASS")))
        {
            strClassName = strLine.section(',', -1, -1).simplified().remove('\"');
            break;
        }
    }
    process->deleteLater();

    return strClassName;
}

// cppcheck-suppress unusedFunction
void LCore::callWindowFocusHackForCitriWorkSpcae()
{
    QString strActiveWindowIdCitrix;
    QStringList strlistArguements;
    QProcess *process = new QProcess(this);
    strlistArguements << "search"<< "--classname"<<"Wfica";
    process->start(QString("xdotool"), strlistArguements);
    process->waitForFinished(-1);
    strActiveWindowIdCitrix = process->readAll();
    QStringList listWindowList = strActiveWindowIdCitrix.split("\n");

    for(int i=0; i < listWindowList.count(); i++)
    {
        strlistArguements.clear();
        strlistArguements << QString("getwindowname") << listWindowList.at(i);
        process->start(QString("xdotool"), strlistArguements);
        process->waitForFinished(-1);
        QString strWindowName = process->readAll().trimmed();

        if( strWindowName.length() && strWindowName != "wfica")
        {
            system(QString("xdotool windowactivate %1").arg(listWindowList.at(i)).toLatin1());
        }
    }
    process->deleteLater();
}

// cppcheck-suppress unusedFunction
void LCore::sendClickSignal(QString strActiveWindowId , bool nFileWriteCheck)
{
    qDebug()<<"LCore::sendClickSignal    "<< strActiveWindowId << "\t" << nFileWriteCheck;

    if(strActiveWindowId.isEmpty())
    {
        strActiveWindowId = getActiveWindowId();
    }
    // This is done because if connection is launched and screen saver is active then after come out from screen saver we don't have control on keyboard because mouse cursor is on back side.
    // we can't directly use keyboard till we click on connection window.

    QString strClassName = getWindowClass(strActiveWindowId);

    if(strClassName.contains(QString("vmware-view"), Qt::CaseInsensitive) || strClassName.contains(QString("Wfica"), Qt::CaseInsensitive))
    {
    }
    else
    {
        qDebug()<<" return";
        return;
    }

    QString strActiveX;
    QString strActiveY;
    QString strActiveScreen;
    QStringList strlistArguements;
    strlistArguements << QString("getmouselocation") << QString("--shell");
    QProcess *process = new QProcess(this);
    qDebug()<<"xdotool "<<strlistArguements;
    process->start(QString("xdotool"), strlistArguements);
    process->waitForFinished(-1);
    while(!process->atEnd())
    {
        QString strLine = process->readLine().simplified();
        qDebug()<<"strLine = "<< strLine;
        if(strLine.startsWith(QString("X=")))
        {
            strActiveX = strLine.section('=', -1, -1);
        }
        else if(strLine.startsWith(QString("Y=")))
        {
            strActiveY = strLine.section('=', -1, -1);
        }
        else if(strLine.startsWith(QString("SCREEN=")))
        {
            strActiveScreen = strLine.section('=', -1, -1);
        }
    }
    process->deleteLater();

    if(nFileWriteCheck)
    {
        QFile file(QString(FOCUSWINDOWCONTENTFILE));
        if(file.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&file);
            out << "WINDOWID=" << strActiveWindowId << "\n";
            file.close();
        }
    }

    QString strCmd = QString("(sleep 1; xdotool mousemove --screen %1 %2 %3; xdotool click 2; xdotool windowactivate window=%4) &").arg(strActiveScreen, strActiveX, strActiveY, strActiveWindowId);
    qDebug()<<"strCmd = "<<strCmd;
    system(strCmd.toLatin1());
}

// cppcheck-suppress unusedFunction
QString LCore::executeIPsecEnrollment(const QString& strIPsecUrl, const QString& strChallengePassword, const QString& strCNValue)
{
    QString strEnrollmentStatus = "";
    QProcess *proc = new QProcess;
    QStringList args;
    args << strIPsecUrl << strChallengePassword << strCNValue;
    proc->start(SCEPENROLL, args);
    proc->waitForFinished(-1);

    QStringList strOutputList = QString(proc->readAllStandardOutput()).split('\n');
    if(strOutputList.count())
    {
        for(int i = 0; i < strOutputList.count(); i++)
        {
            if(strOutputList.at(i).startsWith("Error"))
            {
                strEnrollmentStatus = strOutputList.at(i).section(": ", 1,1);
                break;
            }
        }
    }

    delete proc;
    return strEnrollmentStatus;
}

// cppcheck-suppress unusedFunction
QString LCore::getCertificateRequestEnrollmentStatus(QStringList args)
{
    QString strEnrollmentStatus = "";
    QProcess *proc = new QProcess();
    proc->start("/usr/sbin/certwrapper.sh", args);
    proc->waitForFinished(-1);

    if(proc->exitCode() != 0)
    {
        strEnrollmentStatus = "Error";
    }

    delete proc;
    return strEnrollmentStatus;
}

// cppcheck-suppress unusedFunction
int LCore::getConnectionEdingTime(const QString& ConnectionName, const QString& ConnectionType)
{
    int ncount=0;
    QStringList connection_property;
    if(ConnectionType == "2X-Client" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if( ConnectionType == "PNAgent")
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra2");
    }
    else if(ConnectionType == "FreeRDP")
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra9");
    }
    else if(ConnectionType == "VMView" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra7");
    }
    if(ConnectionType == "SSH" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if( ConnectionType == "X11")
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra2");
    }
    else if(ConnectionType == "REXEC")
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if(ConnectionType == "VNC" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    if(ConnectionType == "RDP" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if( ConnectionType == "Browser")
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra6");
    }
    else if(ConnectionType == "VPN" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if(ConnectionType == "ICA" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra3");
    }
    else if(ConnectionType == "Propalms" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if(ConnectionType == "ShellScript" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if(ConnectionType == "Tarantella" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if(ConnectionType == "VWorkspace" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if(ConnectionType == "SFTP" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if(ConnectionType == "Telnet" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if(ConnectionType == "Spice" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "Extra1");
    }
    else if(ConnectionType == "PCOIPClient" )
    {
        connection_property = readTable(ConnectionType, "Name='"+ConnectionName+"'", "AutoReconnectDelay");
    }

    if(connection_property.count())
    {
        ncount=connection_property.first().toInt();
    }

    return ncount;
}

// cppcheck-suppress unusedFunction
void LCore::setReconnetingInTCCenter(const QString& ConnectionName, const QString& ConnectionType, const QString& status)
{    
    QFutureWatcher<void> applyclickedwatcher;
    QFuture<void> applyclickedfuture = QtConcurrent::run(this, &LCore::sendReconnectingSignal, ConnectionName, ConnectionType, status);
    applyclickedwatcher.setFuture(applyclickedfuture);
    while(applyclickedwatcher.isRunning())
        qApp->processEvents();
}

void LCore::sendReconnectingSignal(const QString& ConnectionName, const QString& ConnectionType, const QString& status)
{
    QStringList conValues;
    conValues << "Status='"+status+"'";
    updateTable("ConnectionTable", conValues , "ConnectionType='"+ConnectionType+"' AND ConnectionName='"+ConnectionName+"'");
    //SendSignalToTC();             /// Due to this Segmentation fault comes so done below.
    SendSignalToTC("ChangeStatus",ConnectionName,ConnectionType);
    //  sendMessageToTCCenter(QString(TCCENTERSTATUSFile), "Connection Reconnecting");
    sendMessageToTCCenter(QString(DESKTOPAPPACTIVEFile), "Connection Reconnecting");
}

void LCore::sendMessageToTCCenter(const QString& serverName, const QString& strMessage)
{
    writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter:: strMessage ", strMessage+" Servername  "+serverName);

    QLocalSocket *client_socket = new QLocalSocket;
    int nRetry = 0;

    client_socket->connectToServer(serverName);

    while(!client_socket->waitForConnected())
    {
        qDebug() << "Client Server error :: " << client_socket->errorString();
        if(serverName == "/tmp/OSSigHandler")
            writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter::client_socket->errorString() ", client_socket->errorString());

        if(nRetry == 2)
        {
            client_socket->disconnectFromServer();
            client_socket->close();
            client_socket->abort();
            client_socket->connectToServer(serverName);
        }

        if(nRetry > 3)
        {
            break;
        }

        qDebug() << "Connecting to server";
        ::usleep(400);
        nRetry++;
    }

    QLocalSocket::LocalSocketState socketState = client_socket->state();

    if(socketState == QLocalSocket::UnconnectedState)
    {
        qDebug() << "socketState UnconnectedState 1";
        if(serverName == "/tmp/OSSigHandler")
        {
            writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter::QLocalSocket::ConnectedState ", "Connecting to server");
        }

        client_socket->connectToServer(serverName);
        ::usleep(400);
    }

    if(socketState == QLocalSocket::ConnectedState)
    {
        if(serverName == "/tmp/OSSigHandler")
            writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter::QLocalSocket::ConnectedState ", "Signal is send from socket");

        qDebug() << QString("Signal is send from socket");
        QByteArray block;
        block.clear();
        QDataStream out(&block, QIODevice::WriteOnly);
        out.setVersion(QDataStream::Qt_4_8);
        out << strMessage;
        out.device()->seek(0);
        client_socket->write(block);
        bool  bWriteStataus = client_socket->waitForBytesWritten(60000);

        if(serverName == "/tmp/OSSigHandler")
            writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter::bWriteStataus ", QString::number(bWriteStataus));

        bool bflush =  client_socket->flush();
        if (bflush == false)
        {
            if(serverName == "/tmp/OSSigHandler")
                writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter::flush command got falild ", client_socket->errorString());

            // Additional error handling code here
        }
        else
        {
            if(serverName == "/tmp/OSSigHandler")
                writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter::after Flush successful ", QString::number(bflush));
            qDebug() << "Flush successful!";
        }
    }
    else
    {
        if(socketState == QLocalSocket::UnconnectedState)
        {
            if(serverName == "/tmp/OSSigHandler")
                writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter::socketState UnconnectedState ", "socketState UnconnectedState");

            qDebug() << "socketState UnconnectedState";
        }
        else if(socketState == QLocalSocket::ConnectingState)
        {
            if(serverName == "/tmp/OSSigHandler")
                writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter::QLocalSocket::ConnectingState) ", "QLocalSocket::ConnectingState)");
            qDebug() << "socketState ConnectedState";
        }
        else if(socketState == QLocalSocket::ClosingState)
        {
            if(serverName == "/tmp/OSSigHandler")
                writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter::socketState ClosingState) ", "socketState ClosingState)");
            qDebug() << "socketState ClosingState ";
        }
        qDebug() << QString("Failed to write data to the socket");
    }

    if(serverName == "/tmp/OSSigHandler")
        writeLogsOnDefaultValue("LCore::SEndMessageToTCCenter::END ", "END");

    client_socket->close();


    client_socket->deleteLater();
}

// cppcheck-suppress unusedFunction
void LCore::CheckLockScreenRunning()
{
    if(checkrunningProcService("LockScreen"))
    {
        bool bCheckLockScreen = true;
        while(bCheckLockScreen)
        {
            if(!checkrunningProcService("LockScreen"))
            {
                bCheckLockScreen = false;
                break;
            }
        }
        Q_UNUSED(bCheckLockScreen);
    }
}

void LCore::ExecuteTouchScreenAfterDisplaySettings()
{
    QStringList strAdvanceSettingsList = readTable("TouchScreen", "", "swapXY,InversionType");
    if(!strAdvanceSettingsList.isEmpty() && (strAdvanceSettingsList.at(0).toInt() || strAdvanceSettingsList.at(1).toInt()))
    {
        /// This is done because touchscreen Advance settings not work after reboot/shutdown and since we don't had any solution so returns after advance touchscreen settings.
        return;
    }

    if(getScreenCount() > 1)
    {
      QProcess::execute(ENABLETOUCHSCREEONDUALDISPLAY);
    }
    /// Following code is done because touchscreen properly works in all display modes.
    QStringList data = readTable(QString("DisplaySettings"), "");
    if(!data.isEmpty())
    {
        QStringList touchscreen_settings = readTable("TouchScreen", "","Model");
        if(touchscreen_settings.count())
        {
            QString strTouchId, strSwapCmd, strInversionCmd;
            strTouchId = getTouchDeviceID(touchscreen_settings.at(0));

            if(data.at(3) == "Inverted")
            {
                strSwapCmd = "xinput set-prop "+ strTouchId +" \"Evdev Axes Swap\" 0";
                strInversionCmd = "xinput set-prop "+ strTouchId +" \"Evdev Axis Inversion\"  1 1";
            }
            else if(data.at(3) == "Clockwise")
            {
                strSwapCmd = "xinput set-prop "+ strTouchId +" \"Evdev Axes Swap\" 1";
                strInversionCmd = "xinput set-prop "+ strTouchId +" \"Evdev Axis Inversion\"  0 1";
            }
            else if(data.at(3) == "Anti-clockwise")
            {
                strSwapCmd = "xinput set-prop "+ strTouchId +" \"Evdev Axes Swap\" 1";
                strInversionCmd = "xinput set-prop "+ strTouchId +" \"Evdev Axis Inversion\"  1 0";
            }
            else
            {
                strSwapCmd = "xinput set-prop "+ strTouchId +" \"Evdev Axes Swap\" 0";
                strInversionCmd = "xinput set-prop "+ strTouchId +" \"Evdev Axis Inversion\"  0 0";
            }

            // we can fire system commands only because QProcess does not works sometimes.
            //            system(strSwapCmd.toLatin1());
            //            system(strInversionCmd.toLatin1());

            // Made script as to successful execution required sleep.
            QFile wfile("/root/.touchafterdisplay.sh");

            if(wfile.exists())
                wfile.remove();

            if(wfile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&wfile);
                out << "#!/bin/bash \n";
                out << "sleep 5" <<"\n";
                out << strSwapCmd.toLatin1() <<"\n";
                out << strInversionCmd.toLatin1() <<"\n";
            }

            wfile.close();
            wfile.setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::ExeUser | QFile::ReadGroup | QFile::ExeGroup | QFile::ReadOther | QFile::ExeOther);
            QProcess::startDetached("/root/.touchafterdisplay.sh");
        }
    }
}

// cppcheck-suppress unusedFunction
void LCore::updateHostnameValuesafterTarExtract(int ncheckValue)
{
    if(ncheckValue)  //writing to data base after tar extract
    {
        QFile HostNameFile(QString("/tmp/hostNameBy"));
        if(HostNameFile.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QString ColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
            QTextStream in(&HostNameFile);
            while (!in.atEnd())
            {
                QString strhostValue = in.readLine();

                if(strhostValue.section(":",0,0).trimmed() == QString("HostnamePref"))
                {

                    writeTable("SysConf", ColumnType, "'HostnamePref', '"+QString(strhostValue.section(":",1,1).trimmed())+"'", "AppendNew");
                }
                else if(strhostValue.section(":",0,0).trimmed() == QString("Hostname"))
                {
                    writeTable("SysConf", ColumnType, "'Hostname', '"+QString(strhostValue.section(":",1,1).trimmed())+"'", "AppendNew");

                }
                else if(strhostValue.section(":",0,0).trimmed() == QString("HostnameBy"))
                {
                    writeTable("SysConf", ColumnType, "'HostnameBy', '"+QString(strhostValue.section(":",1,1).trimmed())+"'", "AppendNew");
                }
            }
            HostNameFile.close();
            sync();
        }
    }
    else //reding from database before tar extract
    {
        QFile hostNameFile(QString("/tmp/hostNameBy"));
        if(hostNameFile.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&hostNameFile);

            QStringList strHostNameValue ;
            strHostNameValue = readTable("SysConf", "Property='HostnameBy'", "Value");
            if(strHostNameValue.count() && !strHostNameValue.first().isEmpty())
            {
                out <<"HostnameBy :"<<strHostNameValue.first()<<"\n";
            }
            strHostNameValue.clear();
            strHostNameValue =readTable("SysConf", "Property='Hostname'", "Value");
            if(strHostNameValue.count() && !strHostNameValue.first().isEmpty())
            {
                out <<"Hostname :"<<strHostNameValue.first()<<"\n";
            }
            strHostNameValue.clear();
            strHostNameValue = readTable("SysConf", "Property='HostnamePref'", "Value");
            if(strHostNameValue.count() && !strHostNameValue.first().isEmpty())
            {
                out <<"HostnamePref :"<<strHostNameValue.first()<<"\n";
            }

            hostNameFile.close();
        }
    }
}

QString LCore::getTouchDeviceID(QString strDeviceName)
{
    QString strGlobal_ID;
    QStringList listArguments;
    listArguments.clear();
    char line[100];
    memset(line, 0, sizeof(line));
    QString str = "xinput | grep -i \""+ strDeviceName +"\" | grep -i id";
    FILE *fp = popen(str.toLatin1(), "r");
    fgets(line, sizeof(line), fp);
    line[strlen(line)-1] = '\0';
    pclose(fp);
    QString idname;
    idname=line;
    strGlobal_ID=idname.simplified().section("id=",1,1).section(" ",0,0);

    if(strGlobal_ID.isEmpty())
    {
        QProcess proc;
        proc.start("xinput_calibrator", QStringList() << "--list");
        proc.waitForFinished(-1);
        while (!proc.atEnd())
        {
            QString linen = proc.readLine();
            if(linen.contains("id=") && linen.contains(strDeviceName))
                strGlobal_ID = linen.simplified().section("id=", 1, 1);
        }
    }
    return strGlobal_ID;
}

void LCore::excludeVIDPID(const QString& strVID, const QString& strPID, const QString& strCondition)
{
    qDebug() << "LCore:excludeVIDPID::3:: " << strVID << strPID << strCondition;
    bool nAdd = true;

    if(strVID.isEmpty())
        return;

    if( strCondition.isEmpty() || strCondition == "PNAgent" )
    {
        QFile fileConfig(PNAFILEPATH);
        QStringList linesConfig;
        int nCount = 0;

        if(fileConfig.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&fileConfig);
            bool n = false;
            int nCheck = 0;
            while (!in.atEnd())
            {
                QString line = in.readLine();
                if(!line.isEmpty() && ( line.contains("DENY:") ) && (line.contains(QString("vid:%1").arg(strVID)) || line.contains(QString("vid=%1").arg(strVID))) && (line.contains(QString("pid:%1").arg(strPID)) || line.contains(QString("pid=%1").arg(strPID))))
                {
                    nAdd = false;
                }

                linesConfig << line;

                ++nCheck;
                if((line.startsWith("DENY:") || line.startsWith("ALLOW:")) && !n )
                {
                    n = true;
                    nCount = nCheck;
                }
            }
            fileConfig.close();
        }

        if(fileConfig.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&fileConfig);

            QString stradd = QString("DENY: vid=%1 pid=%2").arg(strVID,strPID);
            for (int i = 0; i < linesConfig.count()-1; i++)
            {
                if((i == nCount-1) && nAdd)
                {
                    out << stradd << "\n";
                }
                out << linesConfig.at(i) << "\n";
            }

            out << linesConfig.at(linesConfig.count()-1) << "\n";

            fileConfig.close();
        }
    }

    if( strCondition.isEmpty() || strCondition == "VMView" )
    {
        nAdd = true;
        QFile filevmviewConfig(VMVIEWFILEPATH);
        QStringList VmviewConfig;
        if(filevmviewConfig.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&filevmviewConfig);
            while (!in.atEnd())
            {
                QString line = in.readLine();
                if(!line.isEmpty() && (line.contains("viewusb.ExcludeVidPid")) && (line.contains(QString("vid-%1_pid-%2").arg(strVID,strPID))))
                {
                    nAdd = false;
                }
                VmviewConfig << line;
            }
            filevmviewConfig.close();
        }

        if(nAdd)
        {
            QStringList newValueList;
            QString strExcludeVidPid, strExcludeFamily, strIncludeFamily, strIncludeVidPid , strExcludeAllDevices;

            for (int i = 0; i < VmviewConfig.count(); i++)
            {
                if( VmviewConfig.at(i).contains("viewusb.ExcludeVidPid"))
                {
                    QString str = VmviewConfig.at(i).section("\"", 0,1);
                    str.append(QString(";vid-%1_pid-%2\"").arg(strVID,strPID));
                    strExcludeVidPid = str ;
                    nAdd = false;
                }
                else if( VmviewConfig.at(i).contains("viewusb.ExcludeFamily"))
                {
                    strExcludeFamily = VmviewConfig.at(i);
                }
                else if( VmviewConfig.at(i).contains("viewusb.IncludeVidPid"))
                {
                    strIncludeVidPid = VmviewConfig.at(i);
                }
                else if( VmviewConfig.at(i).contains("viewusb.IncludeFamily"))
                {
                    strIncludeFamily = VmviewConfig.at(i);
                }
                else if( VmviewConfig.at(i).contains("viewusb.ExcludeAllDevices"))
                {
                    strExcludeAllDevices = VmviewConfig.at(i);
                }
                else
                {
                    newValueList << VmviewConfig.at(i);
                }
            }

            if(nAdd)
            {
                strExcludeVidPid = QString("viewusb.ExcludeVidPid = \"vid-%1_pid-%2\"").arg(strVID,strPID);
            }

            if(filevmviewConfig.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&filevmviewConfig);

                for (int i = 0; i < newValueList.count(); i++)
                {
                    out << newValueList.at(i) << "\n";
                }

                if(!strExcludeVidPid.isEmpty())
                {
                    out << strExcludeVidPid << "\n";
                }
                if(!strIncludeVidPid.isEmpty())
                {
                    out << strIncludeVidPid << "\n";
                }
                if(!strExcludeFamily.isEmpty())
                {
                    out << strExcludeFamily << "\n";
                }
                if(!strIncludeFamily.isEmpty())
                {
                    out << strIncludeFamily << "\n";
                }
                if(!strExcludeAllDevices.isEmpty())
                {
                    out << strExcludeAllDevices << "\n";
                }

                filevmviewConfig.close();
            }
        }
    }
}

// cppcheck-suppress unusedFunction
QStringList LCore::getTouchScreenDeviceList()
{
    QStringList strDeviceList;
    QProcess proc;
    proc.start("xinput_calibrator", QStringList() << "--list");
    proc.waitForFinished(-1);
    while (!proc.atEnd())
    {
        QLocale locale("en_US");
        QString line = proc.readLine();

        if(line.contains("Device"))
        {
            QString strDeviceName = line.section("\"", 1, 1);
            strDeviceName = QString::fromUtf8(strDeviceName.toLatin1().constData());  //added  "QString::fromUtf8(strDeviceName.toLatin1().constData())" for removing special character before symbol '®' //sujeet
            strDeviceList << strDeviceName;
        }
    }
    return strDeviceList;
}

void LCore::updateVmsLogsFile(const QString& strLogType, const QString& strUpdateLogValue)
{
    qDebug() << "LCore:setVmsLogs::3:: Started ";
    qDebug() << "LCore:setVmsLogs::3:: Log Type " << strLogType;
    qDebug() << "LCore:setVmsLogs::3:: Update Log Value   " << strUpdateLogValue;

    if(QFile::exists(VMSCONFIGURABLELOGFILE))
    {
        QString orgFile = VMSCONFIGURABLELOGFILE;
        QString tmpFile = "/tmp/.logFile";
        QFile readFileN(orgFile);
        QFile UpdatedDebugLogFile(tmpFile);
        if(readFileN.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            if(UpdatedDebugLogFile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&UpdatedDebugLogFile);
                QTextStream in(&readFileN);
                while(!in.atEnd())
                {
                    QString line = in.readLine().trimmed();
                    if(line.section("=",0,0).trimmed() == strLogType)
                    {
                        line = strLogType + " = " + strUpdateLogValue;
                    }
                    out << line << "\n";
                }
            }
            readFileN.close();
            UpdatedDebugLogFile.close();
        }
        QFile::remove(orgFile);
        QFile::copy(tmpFile,orgFile);
        sync();
        QFile::remove(tmpFile);
    }
    qDebug() << "LCore:setVmsLogs::3:: End ";
}

bool LCore::isWifiConfigured(const QString& strWifiDevice)
{
    if(strWifiDevice.isEmpty())
        return false;

    bool bWifiStatus = true;

    QProcess *process = new QProcess;
    process->start(QString(IWCONFIGCMD), QStringList() << strWifiDevice);
    process->waitForFinished(-1);
    QString strOutput = process->readAll();

    QStringList listOutput = strOutput.split('\n', QString::SkipEmptyParts);

    int nCount = listOutput.count();

    if(!nCount) bWifiStatus = false;

    for(int i = 0; i < nCount; i++)
    {
        if(listOutput.at(i).contains(QString("Access Point: Not-Associated")))
        {
            bWifiStatus = false;
            break;
        }
    }

    process->deleteLater();

    return bWifiStatus;
}

// cppcheck-suppress unusedFunction
bool LCore::checkL480Laptop()                    // Added this function to check laptop is 480 or not
{
    bool bCheckL480Laptop = false;
    QProcess *proc = new QProcess();
    proc->start("cat /tmp/.dmesg | grep \"L480\"");
    proc->waitForFinished(-1);

    while(!proc->atEnd())
    {
        QString strOutput=proc->readLine();
        if(strOutput.contains("L480") && strOutput.contains("ThinkPad"))
        {
            bCheckL480Laptop = true;
        }
    }
    delete proc;

    return bCheckL480Laptop;
}

QString LCore::DownloadFile(const QString& strURL, const QString& strFilePath)
{
    if(strURL.startsWith("ftp://") || strURL.startsWith("ftps://"))
    {
        QString urlstr = "curl -Ss -o "+ strFilePath +" " " "+strURL +" -k --connect-timeout 13";

        QProcess process;
        process.start(urlstr);
        process.waitForFinished(-1);

        QString strReturn;
        if(process.exitCode() == 0)
            return  strReturn;
        else if(process.exitCode() == 67)
        {
            strReturn = tr("Access denied due to wrong credentials.");
            return strReturn;
        }
        else if(process.exitCode() == 78 ||  process.exitCode() == 9)
        {
            strReturn = tr("File not found");
            return strReturn;
        }
        else if(process.exitCode() == 7 || process.exitCode() == 6)
        {
            strReturn = tr("Failed to connect ");
            return strReturn;
        }
        else if(process.exitCode() == 60)
        {
            strReturn = tr("SSL certificate problem: certificate has expired");
            return strReturn;
        }
        else
        {
            qDebug() << "error :" << strReturn;
            return strReturn;
        }
    }
    else if(strURL.startsWith("http://") || strURL.startsWith("https://"))
    {
        QString strcurl = "curl -Ss -o "+ strFilePath +" " " "+ strURL +" -w '%{http_code}' -k --connect-timeout 13";

        QProcess process;
        process.start(strcurl);
        process.waitForFinished(-1);
        QStringList strlist = QString(process.readAllStandardOutput()).split('\n');

        QString strReturn;
        if(process.exitCode() == 0 && strlist.contains("'200'"))
        {
            return  strReturn;
        }
        else if(process.exitCode() == 0 && strlist.contains("'401'"))
        {
            strReturn = tr("Access denied due to wrong credentials.");
            return strReturn;
        }
        else if(process.exitCode() == 0 && strlist.contains("'404'"))
        {
            strReturn = tr("File not found.");
            return strReturn;
        }
        else if(process.exitCode() == 7 || process.exitCode() == 28)
        {
            strReturn = tr("Failed to connect.\n(No route to host)");
            return strReturn;
        }
        else if(process.exitCode() == 60)
        {
            strReturn = tr("SSL certificate problem: certificate has expired");
            return strReturn;
        }
        else
        {
            return strReturn;
        }
    }
    else
    {
        return tr("Invalid URL path.");
    }
}

// cppcheck-suppress unusedFunction
QString LCore::getWindowId(const QString& strWindowName)
{
    qDebug()<<"LCore:getWindowId::1:: Start   Arg : strWindowName :" << strWindowName;
    QString cmd1 = "/bin/sh -c \"wmctrl -l | grep -i \""+ strWindowName +"\" | awk '{print $1}' \"";
    QProcess p1;
    p1.start(cmd1);
    p1.waitForFinished(-1);
    QString pid = p1.readAllStandardOutput();
    qDebug()<<"Desktop:tcCenterPushButtonClicked::1:: End";
    return pid;
}

// cppcheck-suppress unusedFunction
void LCore::acticateWindow(const QString& strWindowId)
{
    if(!strWindowId.isEmpty())
    {
        QProcess p1;
        QString cmd = "xdotool windowactivate "+strWindowId;
        p1.execute(cmd);
    }
}

// cppcheck-suppress unusedFunction
QString LCore::alterTable(const QString& tableName, const QString& columnNameType, const QString& columnValue, const QString& strType, const QString& strSecTableName)
{
    qDebug() << "LCore:alterTable::3:: Start.";
    qDebug() << "LCore:alterTable::3:: args : tableNeme = " << tableName << " columnNameType = " << columnNameType << " columnValue " << columnValue << " strType " << strType;

    QString strReturnStatus = "Unsuccessfull";
    QSqlQuery query;
    QString qry;
    if(strType.isEmpty() || strType == "ADD")
    {
        qry = "ALTER TABLE "+ tableName +" ADD COLUMN "+ columnNameType +" DEFAULT "+ columnValue ;
    }
    else if(strType == "RENAME")
    {
        qry = "ALTER TABLE "+ tableName +" RENAME TO "+ strSecTableName ;
    }

    qDebug() << "LCore:updateTable::3::  Query = " << qry;

    if(query.exec(qry))
    {
        qDebug() << "LCore:alterTable::3:: return Update Successfull.";
        strReturnStatus = "Update Successfull";
    }
    else
    {
        qDebug() <<"LCore:alterTable::3:: return error = " << query.lastError();
        strReturnStatus = "Unsuccessfull";
    }
    qDebug() << "LCore:alterTable::3::return  Update UnSuccessfull.";
    return strReturnStatus;
}

// cppcheck-suppress unusedFunction
QString LCore::createTable(const QString& strTableName, const QString& strColumnName)
{
    QString strReturnStatus;
    QSqlQuery query;
    QString qry = "";

    qry = "CREATE TABLE IF NOT EXISTS " + strTableName + "(" + strColumnName + ")";
    qDebug() << "LCore:createTable::3:: qry = " << qry;
    if(query.exec(qry))
    {
        qDebug() << "LCore:createTable::3:: Table created " + strTableName;
        strReturnStatus = "Table created " + strTableName;
    }
    else
    {
        qDebug() << "LCore:createTable::3:: Table Not created because " << query.lastError();
        qDebug() << "LCore:createTable::3:: Table Not created " << strTableName;
        strReturnStatus = "Table Not Created " + strTableName;
    }
    return strReturnStatus;
}

// cppcheck-suppress unusedFunction
QString LCore::insertTableValues(const QString& strTableName, const QString& strColumnNames, const QString& strTableForValues)
{
    QString strReturnStatus;
    QSqlQuery query;
    QString qry = "";

    qry = "INSERT INTO " + strTableName + "(" + strColumnNames + ")" + " SELECT * FROM "+ strTableForValues;
    qDebug() << "LCore:insertTableValues::3:: qry = " << qry;
    if(query.exec(qry))
    {
        qDebug() << "LCore:insertTableValues::3::Values Inserted" + strTableName;
        strReturnStatus = "Values Inserted" + strTableName;
    }
    else
    {
        qDebug() << "LCore:insertTableValues::3:: Values Not Inserted because " << query.lastError();
        qDebug() << "LCore:insertTableValues::3:: Values Not Inserted" << strTableName;
        strReturnStatus = "Values Not Inserted " + strTableName;
    }
    return strReturnStatus;
}

// cppcheck-suppress unusedFunction
void LCore::getCert9Key4DB(int value,QString connectionName)  //write function for cert9.db and key4.db for firefox
{
    bool bIsTCS = false;
    QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
    if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
        bIsTCS = true;

    QString strpackageVersion = getPkgVersion("firefox");
    qDebug() << "\n Version of firefox: " << strpackageVersion;


    if(strpackageVersion.contains("esr_"))
    {
        strpackageVersion = strpackageVersion.section("esr_",1,-1);
    }

    int firefoxVer= strpackageVersion.section(".",0,0).toInt();
    qDebug()<<"firefoxVer = "<<firefoxVer;

    QString strFirefoxFolder;
    if(QString(connectionName).contains(" "))
        strFirefoxFolder ="'"+QString(FIREFOXPATH) +"os."+QString(connectionName)+"'";
    else
        strFirefoxFolder =  QString(FIREFOXPATH) +"os."+QString(connectionName);

    if(value == 1)
    {
        if(bIsTCS || firefoxVer >= 60 )
        {
            QString strcmd = "cp -rf "+QString(DEFAULTPATH"cert9.db")+" "+strFirefoxFolder;
            system(strcmd.toLatin1());
            sync();

            strcmd.clear();
            strcmd = "cp -rf "+QString(DEFAULTPATH"key4.db")+" "+strFirefoxFolder;
            system(strcmd.toLatin1());
            sync();

            strcmd.clear();
            strcmd = "cp -rf "+QString(DEFAULTPATH"secmod.db")+" "+strFirefoxFolder;
            system(strcmd.toLatin1());
            sync();

            strcmd.clear();
            strcmd = "cp -rf "+QString(DEFAULTPATH"handlers.json")+" "+strFirefoxFolder;
            system(strcmd.toLatin1());
            sync();
        }
        else
        {
            QString strcmd = "cp -rf "+QString(DEFAULTPATH"cert8.db")+" "+strFirefoxFolder;
            system(strcmd.toLatin1());
            sync();
        }
    }
    else
    {
        if(bIsTCS || firefoxVer >= 60)
        {
            QString cmds = "cp -Parf "+QString(Cert9DB)+" "+QString(DEFAULTPATH);
            system(cmds.toLatin1());
            sync();

            QString cmd = "cp -Parf "+QString(Key4DB)+" "+QString(DEFAULTPATH);
            system(cmd.toLatin1());
            sync();

            QString strcmd = "cp -Parf "+QString(HANDLERJSON)+" "+QString(DEFAULTPATH);
            system(strcmd.toLatin1());
            sync();
        }
    }

    if(strConnectionLaunchPath.contains("/home/myuser"))
        chownFilesAndDir(QString(QString(FIREFOXPATH) +"os."+QString(connectionName)));
    qDebug()<<"LCore::getCert9Key4DB::3::End";
}

void LCore::modifyThinPrintProperties()
{
    QString strThinprintPortNumber;
    QStringList strlistFile;

    strThinprintPortNumber="4000";
    if(QFile::exists(LTMTHINPRINTCONFFIlE))
    {
        QFile readThinprintFile(LTMTHINPRINTCONFFIlE);
        if(readThinprintFile.open(QIODevice::ReadOnly|QIODevice::Text))
        {
            QTextStream in(&readThinprintFile);
            while (!in.atEnd())
            {
                QString strThinprintData = in.readLine();

                if(strThinprintData.contains("ThinprintPort"))
                    strThinprintPortNumber = strThinprintData.section("=",1,1);
            }
        }
        readThinprintFile.close();
    }

    QStringList strListportNumber = readTable("SysConf", "Property='ThinPrintPortNumber'", "Value");
    if(!strListportNumber.isEmpty())
    {
        strThinprintPortNumber = strListportNumber.at(0);
    }

    QFile   thinprintconfread(THINPRINCONFFILE);
    if(thinprintconfread.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream  in(&thinprintconfread);
        bool bfound = false;
        while(!in.atEnd())
        {
            QString strline = in.readLine().trimmed();

            if(strline.contains("connector tcpip"))
            {
                bfound=true;
                strlistFile << "\n";
                strlistFile << strline;
            }
            else if(strline.contains("interface") && bfound )
            {
                strlistFile <<"interface = 0.0.0.0:"+strThinprintPortNumber.trimmed();
                bfound = false;
            }
            else
            {
                if(!strline.isEmpty())
                    strlistFile << strline;
            }
        }
        thinprintconfread.close();
    }

    QFile thinprintconf(THINPRINCONFFILE);
    if (thinprintconf.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&thinprintconf);
        for(int i=0;i<strlistFile.count();i++)
            out << strlistFile.at(i)<<"\n";
    }
    thinprintconf.close();
}

// cppcheck-suppress unusedFunction
void LCore::writingDefaultSettingstoVMS()
{
    int nCheckStatus;

    const char* cunicode = "Æ";
    QString strToken = QString::fromUtf8(cunicode); //("1Æ1Æ1Æ");
    QString strSpecialChar = "1" + strToken + "1" + strToken + "1" + strToken;
    QString columnType, columnValues;

    columnType = "DHCPParams INTEGER, CurrentServerIP VARCHAR(20), OldServerIP VARCHAR(20), PortNo INTEGER,"
                 "GroupName VARCHAR(100), pollInterval INTEGER, CommunicationType VARCHAR(50), WebServiceName VARCHAR(20), ClientStatus INTEGER, CACertificate VARCHAR(200)" ;

    nCheckStatus = FusionmsIsRunningStatus();

    if(nCheckStatus == 1)  //Fusionms-HTTPS
    {
        QString strHostIP,columnHostType,coloumnValues;
        executeResolveIpScript();
        if(IsImpactClient()== true)
        {
            strHostIP = getIPFromServerHostName("webias");
            qDebug() << "LCore:writingDefaultSettingstoVMS::3:: getIPFromServerHostName = " << strHostIP;

            columnHostType = "HostsIP VARCHAR(50),HostsName VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";
            coloumnValues = "'"+strHostIP+"','webias',0, 0, 0, '', '' ";
        }
        else
        {
            strHostIP = getIPFromServerHostName("unifiedx");
            qDebug() << "LCore:writingDefaultSettingstoVMS::3:: getIPFromServerHostName = " << strHostIP;

            columnHostType = "HostsIP VARCHAR(50),HostsName VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";
            coloumnValues = "'"+strHostIP+"','unifiedx',0, 0, 0, '', '' ";
        }
        writeTable( "HostsSettings", columnHostType , coloumnValues , "AppendNew");

        QString strDefault = strSpecialChar + "DEFAULT";

        if(IsImpactClient()== true)
        {
            columnValues = "1, 'webias', '', 443, '" + strDefault + "', 60, 'HTTPS', 'VMSService', 1, ''";
        }
        else
        {
            columnValues = "1, 'unifiedx', '', 443, '" + strDefault + "', 60, 'HTTPS', 'VMSService', 1, ''";

        }
        writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
        sync();
        updateVmsLogsFile("HeartBeatInterval","60");

    }
    else if(nCheckStatus == 2)  //fusionms-HTTP
    {
        executeResolveIpScript();
        if(IsImpactClient()== true)
        {
            QString strHostIP = getIPFromServerHostName("webias");

            QString columnHostType = "HostsIP VARCHAR(50),HostsName VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";
            QString coloumnValues = "'"+strHostIP+"','webias',0, 0, 0, '', '' ";
            writeTable( "HostsSettings", columnHostType , coloumnValues , "AppendNew");

            QString strDefault = strSpecialChar + "DEFAULT";
            columnValues = "1, 'webias', '', 80, '" + strDefault + "', 60, 'HTTP', 'VMSService', 1, ''";
        }
        else
        {
            QString strHostIP = getIPFromServerHostName("unifiedx");

            QString columnHostType = "HostsIP VARCHAR(50),HostsName VARCHAR(100), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30) ";
            QString coloumnValues = "'"+strHostIP+"','unifiedx',0, 0, 0, '', '' ";
            writeTable( "HostsSettings", columnHostType , coloumnValues , "AppendNew");

            QString strDefault = strSpecialChar + "DEFAULT";
            columnValues = "1, 'unifiedx', '', 80, '" + strDefault + "', 60, 'HTTP', 'VMSService', 1, ''";
        }
        writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
        sync();
        updateVmsLogsFile("HeartBeatInterval","60");
    }
    else if(!nCheckStatus)  //DHCP
    {
        QString strDefault = strSpecialChar + "DEFAULT";

        QStringList dhcpparams = readTable("DHCPParams", "");
        if(dhcpparams.count())
        {
            QString strCurrentServerIP = QString(dhcpparams.at(0)).remove("\"");
            QString strPortNo = QString(dhcpparams.at(5)).remove("\"");
            QString strCommunicationType = QString(dhcpparams.at(3)).remove("\"");

            int nStatus = 0;
            QProcess proc;
            QStringList strlstArgs;
            strlstArgs << QString("-n") << QString("-p") << strPortNo << strCurrentServerIP << QString("--open");
            proc.start("nmap", strlstArgs);
            proc.waitForFinished(-1);
            while(!proc.atEnd())
            {
                QString strProc = proc.readLine().simplified();
                if(strProc.contains("Host is up"))
                {
                    nStatus = 1;
                    break;
                }
            }

            if(nStatus)
            {
                strDefault = strSpecialChar + QString(dhcpparams.at(1)).remove("\"");
                columnValues = "1, '"+strCurrentServerIP+"', '', '"+strPortNo+"', '" +strDefault+"', '60', '"+strCommunicationType+"', 'VMSService', 1, '' ";
                writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
                updateVmsLogsFile("HeartBeatInterval","60");

                int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);
                if(status != 0)
                {
                    mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");
                    system(QString("echo DHCPIP=%1 > /sda1/data/.AutoDHCPVmsCheck").arg(strCurrentServerIP).toLatin1());
                    mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
                }

            }
            else
            {
                QStringList clientSettings = readTable(QString(CLIENTSETTINGS), "");
                if(clientSettings.isEmpty())
                {
                    columnValues = "1, '0.0.0.0', '', 443, '" + strDefault + "', 60, 'HTTPS', 'VMSService', 1, '' ";
                    writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
                    updateVmsLogsFile("HeartBeatInterval","60");
                }
            }
        }
        else    //Manual
        {
            QStringList clientSettings = readTable(QString(CLIENTSETTINGS), "");

            bool bIsTCS;
            bIsTCS = false;
            QStringList strlistCheckTCS = readDefaultsValue("TCSEnabled");
            if(strlistCheckTCS.count() && strlistCheckTCS.at(0).toInt())
                bIsTCS = true;

            if(clientSettings.isEmpty())
            {
                if(bIsTCS) // set TCS IP and port Number by Default in database ( IP: 10.249.235.144, Heart Beat Interval: 300 sec)
                {
                    QString strGroupName = strSpecialChar + "DEFAULT";
                    QString columnclientsettingsValues = "1, '10.249.235.144', '', 443, '" + strGroupName + "', 300, 'HTTPS', 'VMSService', 1, '' ";

                    writeTable(QString(CLIENTSETTINGS), columnType, columnclientsettingsValues, "");
                }
                else
                {
                    columnValues = "1, '0.0.0.0', '', 443, '" + strDefault + "', 60, 'HTTPS', 'VMSService', 1, '' ";
                    writeTable(QString(CLIENTSETTINGS), columnType, columnValues, "");
                    updateVmsLogsFile("HeartBeatInterval","60");
                }
            }
            else
            {
                int nCheckDHCP = clientSettings.at(0).toInt();
                QString strCurrentIP = clientSettings.at(1);
                QString strOldServerIP = clientSettings.at(2);
                QString strPortNo = clientSettings.at(3);
                QString strCommunicationType = clientSettings.at(6);

                //when Manual is setted, after reboot previous Manual settings should be set as it is even network have 'fusionms'
                QString strGroupName = clientSettings.at(4);
                QString strPollInterval = clientSettings.at(5);
                QString strCertificate = clientSettings.at(9);

                QStringList strlistUpdated;
                strlistUpdated << "DHCPParams='" +QString::number(nCheckDHCP)+ "'" << "CurrentServerIP='" +strCurrentIP+ "'" << "OldServerIP='" +strOldServerIP+ "'" << "PortNo='" +strPortNo+ "'" << "GroupName='" +strGroupName+ "'" << "pollInterval='" +strPollInterval+ "'" << "CommunicationType='" +strCommunicationType+ "'" << "CACertificate='" +strCertificate+ "'";
                updateTable(QString(CLIENTSETTINGS), strlistUpdated, "");
                sync();
                updateVmsLogsFile("HeartBeatInterval",strPollInterval);
            }
        }       
    }

    sync();
}

void LCore::changeNTPServerToConf(const QString& strNTPServer)
{
    QStringList strListDefault;
    QFile ntpFile("/etc/ntp.conf");
    if(ntpFile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream ntpIN(&ntpFile);
        while(!ntpIN.atEnd())
        {
            QString line = ntpIN.readLine();
            strListDefault << line;
        }
        ntpFile.close();
    }

    if(ntpFile.open( QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&ntpFile);
        bool isUpdated = false;
        for(int i=0; i<strListDefault.count(); i++)
        {
            if(!isUpdated && !strListDefault.at(i).isEmpty() && strListDefault.at(i).startsWith("server") )
            {
                out << "server "+ strNTPServer << "\n";
                isUpdated =  true;
            }
            else
            {
                out << strListDefault.at(i) << "\n";
            }
        }
        ntpFile.close();
    }
}

// cppcheck-suppress unusedFunction
void LCore::modifyAllRegionsINIFile(QString strFileName, QString strValue , QString strCheckString )
{
    QString strTmpFilename = QString("/tmp/All_Regions.ini");
    QFile file(strFileName);
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QFile fileTmp(strTmpFilename);
        if(fileTmp.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream in(&file);
            QTextStream out(&fileTmp);
            while(!in.atEnd())
            {
                QString data = in.readLine();
                if((data.startsWith(QString(strCheckString))))
                {
                    out << QString(strCheckString.trimmed()+"=%1").arg(strValue) <<"\n";
                }
                else
                {
                    out << data<<"\n";
                }
            }
            fileTmp.close();
        }
        file.close();

        if(CheckforFileContents(strTmpFilename))
        {
            QFile::remove(strFileName);
            QFile::copy(strTmpFilename, strFileName);
            sync();
        }
    }
}

QString LCore::getUserNameFromStandardHotname(QString UserName)
{
    if(UserName.contains(QString("$hostname"), Qt::CaseInsensitive))
    {
        QString assetValue = getHostname();
        if(!assetValue.isEmpty() && !assetValue.contains(QString("invalid"),Qt::CaseInsensitive))
        {
            UserName = assetValue;
        }
    }
    else if(UserName.contains(QString("$assetTag"), Qt::CaseInsensitive))
    {
        QString assetValue = getHostNameFromDmidecode();
        if(!assetValue.isEmpty() && !assetValue.contains(QString("invalid"),Qt::CaseInsensitive) && (!assetValue.contains(QString("No Asset Information"),Qt::CaseInsensitive)) && !assetValue.contains(QString("Default string"),Qt::CaseInsensitive) && !assetValue.contains(QString("To Be Filled By O.E.M"),Qt::CaseInsensitive) && !assetValue.contains(QString("None"),Qt::CaseInsensitive) && !assetValue.contains(QString("A1_AssetTagNum0") ,Qt::CaseInsensitive) && !assetValue.contains(QString("NO Asset Tag"),Qt::CaseInsensitive))
        {
            UserName = assetValue;
        }
    }
    else if(UserName.contains(QString("$serialnumber"),Qt::CaseInsensitive))
    {
        QString assetValue;
        QProcess proc;
        proc.start(QString("dmidecode"), QStringList() << "-s" << "system-serial-number");
        proc.waitForFinished(-1);
        QString line;
        while ( !proc.atEnd() )
        {
            line = proc.readLine().trimmed();
            if(!(line.startsWith("#")))
            {
                assetValue = line.simplified();
                break;
            }
        }

        if(!assetValue.isEmpty() && !assetValue.contains(QString("invalid"),Qt::CaseInsensitive) && !assetValue.contains(QString("Default string"),Qt::CaseInsensitive) && !assetValue.contains(QString("To Be Filled By O.E.M"),Qt::CaseInsensitive) && !assetValue.contains(QString("None"),Qt::CaseInsensitive) )
        {
            UserName = assetValue;
        }
    }
    return UserName.trimmed();
}

QPair<QString , QString> LCore::getUserNameDomain(QString strUsername)
{
    QString strDomain = "",strUName;
    QStringList strUsernameType;
    QPair <QString ,QString > userDomainpair;
    strUsernameType << QString("$hostname") << QString("$assettag") << QString("$serialnumber");
    if(strUsername.contains("@"))
    {
        strUName = strUsername.section("@",0,0);
        strDomain = strUsername.section("@",-1);
    }
    else if(strUsername.contains("\\"))
    {
        strUName = strUsername.section("\\",-1);
        strDomain = strUsername.section("\\",0,0);
    }
    else
    {
        strUName = strUsername;
    }

    if(strUsernameType.contains(strUName, Qt::CaseInsensitive))
    {
        strUName = getUserNameFromStandardHotname(strUName);
        if(strUsernameType.contains(strUName, Qt::CaseInsensitive))
        {
            strUName = "";
        }
    }
    userDomainpair.first = strUName;
    userDomainpair.second = strDomain;
    return userDomainpair;
}

// cppcheck-suppress unusedFunction
void LCore::ModifyAll_RegionINIFileForComPort(QString strComPort, int ncount)
{
    QString strTmpFilename = QString("/tmp/All_Regions.ini");

//    if(!QFile::exists(ALLREGIONINIFILE))
//    {
//        QFile::copy(QString(OPTALLREGIONINIFLE), QString(ALLREGIONINIFILE));
//    }
    QFile file(ALLREGIONINIFILE);
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QFile fileTmp(strTmpFilename);

        if(fileTmp.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream in(&file);
            QTextStream out(&fileTmp);
            while(!in.atEnd())
            {
                QString data = in.readLine();
                if((data.startsWith(QString("LastComPortNum="))))
                {
                    if(ncount != 0)
                        out << QString("LastComPortNum=%1").arg(ncount) <<"\n";
                    else
                        out << QString("LastComPortNum=%1").arg("") <<"\n";
                }
                else if(data.startsWith(QString("ComPort")))
                {
                    if(!strComPort.isEmpty())
                    {
                        strComPort.chop(1);
                        QStringList strlist = strComPort.split(":");

                        for(int i = 0; i<strlist.count();i++)
                        {
                            out << QString("ComPort%1=%2").arg(i+1).arg(strlist.at(i)) <<"\n";
                            data = in.readLine();
                            Q_UNUSED(data);
                        }
                        strComPort.clear();
                    }
                    out << QString("ComPort%1=%2").arg(ncount+1).arg("") <<"\n";
                    ncount++;
                }
                else
                {
                    out << data<<"\n";
                }
            }
        }

        fileTmp.close();
        file.close();

        if(CheckforFileContents(strTmpFilename))
        {
            QFile::remove(ALLREGIONINIFILE);
            QFile::copy(strTmpFilename, ALLREGIONINIFILE);
            sync();
        }
    }
}

//Start Demons for Virtual Channle vchanimp.so
//Authentication in shared application In VD.
// cppcheck-suppress unusedFunction
void LCore::startDeamonsForVC()
{
    qDebug()<<"LCore::startDeamonsForVC::1:: Start";

    if(checkrunningProcService(QString("QServerSocket")) == false)
    {
        QProcess::startDetached(QString(QSERVERSOCKET));
    }

    if(checkrunningProcService(QString("ImprivataDaemon")) == false)
    {
        QProcess::startDetached(QString(IMPRIVATADAEMON));
    }

    if(checkrunningProcService(QString("gem-prox-tool")) == false)
    {
        QProcess::startDetached(QString(GEMPROXTOOL));
    }

    if(checkrunningProcService(QString("fpdaemon")) == false)
    {
        QProcess::startDetached(QString(FPDAEMON));
    }

    qDebug()<<"LCore::startDeamonsForVC::1:: END";
}

int LCore::is_probably_full_disk(const char *name)
{
    qDebug() << "LCore:is_probably_full_disk::3:: Start.";
#ifdef HDIO_GETGEO
    struct hd_geometry geometry;
    int fd, i = 0;

    fd = open(name, O_RDONLY);
    if (fd >= 0) {
        i = ioctl(fd, HDIO_GETGEO, &geometry);
        close(fd);
    }
    if (i==0)
    {
        qDebug() << "LCore:is_probably_full_disk::3:: End. returns " << QString::number(fd >= 0 && geometry.start == 0);
        return (fd >= 0 && geometry.start == 0);
    }
#endif

    while (*name)
        name++;
    qDebug() << "LCore:is_probably_full_disk::3:: End. returns " << QString::number(!isdigit(name[-1]));
    return !isdigit(name[-1]);
}

//Ggting impromation about boot device, which mount point contain as /sda1
QString LCore::getBootDevice()
{
    qDebug() << "LCore:getBootDevice::3:: Start.";
    QString strBootDeviceName;
    QFile mountfile("/proc/mounts");
    if(mountfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&mountfile);
        QString line = in.readLine();
        while(!line.isNull())
        {
            QString mountPath = line;
            if(mountPath.contains("/sda1"))
            {
                strBootDeviceName = mountPath.section(" ", 0, 0);
                /// Actual device length alway be 8 (example => Main Device type may always /dev/sda or /dev/sdb .... like that)
                if(!strBootDeviceName.contains("/dev/loop"))  // this condtin handle for CoGo LivePen image..
                {
                    int nChop = 0;
                    nChop = strBootDeviceName.length() - 8;
                    strBootDeviceName.chop(nChop);
                }
                break;
            }
            line = in.readLine();
        }
    }
    qDebug() << "strBootDeviceName = "<<strBootDeviceName;

    //If Cogo/Live Pen image boot from /dev/loop and mount on point is /sda1
    //but actually device point is deffirent then /dev/loop so we need to find
    //using serial numer of all connected usb device, match with LivePen Serial numer.
    //In Cogo/Live Pen image USB SerialNumber store in /tmp/.LivePenSerialNumber file.
    if(QFile::exists("/tmp/.USBPEN") && strBootDeviceName.contains("/dev/loop"))
    {
        QString strLivePenSerialNumber = getUSBPENSerialNumber(); // Get USB Serial Number from /tmp/.LivePenSerialNumber file
        QString strCmd = "blkid  | grep -v loop  | awk '{ print $1 }' | grep -i '/dev/' >/tmp/.device"; //Get All connectd usb node
        system(strCmd.toLatin1());

        QFile fileDevice("/tmp/.device");
        if(fileDevice.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&fileDevice);
            QProcess *proc = new QProcess();

            while(!in.atEnd())
            {
                QString strDevice = in.readLine().remove(":");
                QString strID_SERIAL_SHORT;
                proc->start("udevadm", QStringList () << "info" << strDevice);
                qDebug()<<"cmd  : udevadm  info " <<strDevice;
                proc->waitForFinished(-1);
                QString line;
                while (!proc->atEnd())
                {
                    line = proc->readLine().trimmed();

                    if(line.contains("ID_SERIAL_SHORT"))
                    {
                        strID_SERIAL_SHORT = line.section("=",1,1).trimmed();
                    }
                    if(!strID_SERIAL_SHORT.isEmpty() && strID_SERIAL_SHORT == strLivePenSerialNumber)
                    {
                        strBootDeviceName = strDevice;
                        break;
                    }
                }
                proc->close();
            }
            proc->deleteLater();
            fileDevice.close();
        }
    }
    qDebug() << "LCore:getBootDevice::3:: End.  returns " << strBootDeviceName ;
    return strBootDeviceName;
}

QString LCore::getDeviceVidPid(const QString& device)                          // returns => vid:pid
{
    qDebug() << "LCore:getDeviceVidPid::3:: Start. args device " << device;
    QString strVid,strPid;
    QProcess *proc = new QProcess();
    proc->start("udevadm", QStringList () << "info" << device);
    qDebug() << "LCore:getDeviceVidPid::3:: udevadm info " << device;
    proc->waitForFinished(-1);
    QString line;
    while (!proc->atEnd())
    {
        line=proc->readLine().trimmed();
        if(line.contains("ID_VENDOR_ID"))
        {
            strVid = line.section("=",1,1);
        }

        if(line.contains("ID_MODEL_ID"))
        {
            strPid = line.section("=",1,1);
        }
    }
    proc->deleteLater();

    qDebug() << "LCore:getDeviceVidPid::3:: End. returns  VID:PID " << strVid + ":" + strPid ;
    return strVid + ":" + strPid ;
}

QString LCore::getUSBPENSerialNumber()
{
    qDebug() << "LCore:getUSBPENSerialNumber::3::Start.";
    QString strSerialNUmber = "";
    QFile readFileN("/tmp/.LivePenSerialNumber");
    QString line;

    if(readFileN.open(QIODevice::ReadOnly|QIODevice::Text))
    {
        QTextStream in(&readFileN);
        while (!in.atEnd())
        {
            line = in.readLine().trimmed();
            if(!line.isEmpty())
                strSerialNUmber = line;

            qDebug() << "LCore:getUSBPENSerialNumber::1::line" << line;
            readFileN.close();
        }

        if(!strSerialNUmber.isEmpty())
            return strSerialNUmber;
    }

    struct udev *udev;
    struct udev_device *dev;
    struct udev_enumerate *enumerate;
    struct udev_list_entry *list, *node;

    udev = udev_new();
    if (!udev)
    {
        qDebug() << "LCore:getUSBPENSerialNumber::3::can not create udev";
        return strSerialNUmber;
    }

    QString strBootDevice = getBootDevice();
    enumerate = udev_enumerate_new(udev);
    udev_enumerate_add_match_subsystem(enumerate, "block");
    udev_enumerate_scan_devices(enumerate);
    list = udev_enumerate_get_list_entry(enumerate);

    udev_list_entry_foreach(node, list)
    {
        const char *path = udev_list_entry_get_name(node);
        dev = udev_device_new_from_syspath(udev, path);

        struct udev_device *maindev = dev;
        dev = udev_device_get_parent_with_subsystem_devtype(dev, "usb", "usb_device");
        if (!dev)
        {
            continue;
        }

        const char* devicepath = udev_device_get_devnode(maindev);
        qDebug() << "LCore:getUSBPENSerialNumber::3::Device path " << devicepath;

        if((is_probably_full_disk(devicepath)) && (devicepath == strBootDevice))
        {
            strSerialNUmber = udev_device_get_property_value(dev, "ID_SERIAL_SHORT");
        }

        udev_device_unref(dev);
    }

    QFile WriteFile("/tmp/.LivePenSerialNumber");
    if(WriteFile.open(QIODevice::WriteOnly|QIODevice::Text))
    {
        QTextStream out(&WriteFile);
        out<<strSerialNUmber<<"\n";
        WriteFile.close();
    }

    qDebug() << "LCore:getUSBPENSerialNumber::3:: End.returns strSerialNUmber =" << strSerialNUmber;
    return strSerialNUmber;
}

bool LCore::checkForUSBImage()
{
    qDebug() << "LCore:checkForUSBImage::3:: Start.";
    bool nCheckUSB = false;

    if(QFile::exists("/tmp/.USBPEN"))
        nCheckUSB = true;

    if(nCheckUSB == false)
    {
        QString strBootDevice = getBootDevice();
        qDebug() << "LCore:checkForUSBImage::3::strBootDevice " << strBootDevice;

        if(strBootDevice.isEmpty())
            return nCheckUSB;

        QString strID_BusInfo;
        QProcess *proc = new QProcess();
        proc->start("udevadm", QStringList () << "info" << strBootDevice);
        proc->waitForFinished(-1);
        QString line;
        while (!proc->atEnd())
        {
            line=proc->readLine().trimmed();

            if(line.contains("ID_BUS"))
            {
                strID_BusInfo = line.section("=",1,1);

                if(strID_BusInfo == "usb")
                {
                    nCheckUSB = true;
                    break;
                }
            }
        }
        proc->deleteLater();
    }
    qDebug() << "LCore:checkForUSBImage::3:: End. returns " << nCheckUSB;
    return nCheckUSB;
}

void LCore::liveImageUSBRestrict(const QString& strCondition)
{
    qDebug() << "LCore:liveImageUSBRestrict::3:: Start.";
    QStringList strVisPidList = getDeviceVidPid(getBootDevice()).split(":");
    QString strVID, strPID;

    if(!strVisPidList.isEmpty() && strVisPidList.count() == 2)
    {
        strVID = strVisPidList.at(0);
        strPID = strVisPidList.at(1);
    }

    if(strPID.isEmpty() || strVID.isEmpty())
    {
        qDebug() << "LCore:liveImageUSBRestrict::3::Device vid , pid are empty";
        return;
    }
    else
    {
        excludeVIDPID(strVID,strPID, strCondition);
    }

    qDebug() << "LCore:liveImageUSBRestrict::3:: End. ";
}

QString LCore::getUSBSerialOrMac()
{
    qDebug() << "LCore:getUSBSerialOrMac::1:: start. ";

    QString strMAC = "";

    bool bL14W = isL14W(getLenovoMT());

    if(bL14W)
    {
        strMAC = getMacForWifi();
        strMAC = strMAC.trimmed().replace(":","-");
        qDebug() << "LCore:getUSBSerialOrMac bL14W ::1:: strMAC. " << strMAC;
    }
    else
    {
        bool isUSBPEN = checkForUSBImage();

        if(isUSBPEN)
        {
            strMAC = getUSBPENSerialNumber();
        }
        else
        {
            strMAC = getMac().trimmed().replace(":","-");

            if(strMAC.isEmpty() == true)
            {
                strMAC = getMacForWifi();
                strMAC = strMAC.trimmed().replace(":","-");
            }
        }
    }

    qDebug() << "LCore:getUSBSerialOrMac::1:: end. ";

    return strMAC;
}

// cppcheck-suppress unusedFunction
bool LCore::writeDataInSocket(const QString& strSocketName, const QString& strSocketData)
{
    bool bReturnSTatus = false;
    QLocalSocket *client_socket = new QLocalSocket;
    client_socket->abort();
    client_socket->connectToServer(strSocketName);
    if(client_socket->waitForConnected())
    {
        QByteArray block;
        block.clear();
        QDataStream out(&block, QIODevice::WriteOnly);
        out.setVersion(QDataStream::Qt_4_8);
        out << strSocketData;
        out.device()->seek(0);
        client_socket->write(block);
        client_socket->flush();
        client_socket->disconnectFromServer();
        bReturnSTatus = true;
    }
    delete client_socket;
    return bReturnSTatus;
}

void LCore::fillDummyTimeZoneFile(const QStringList& strTimeZoneList)
{
    /// File Time zone table in dummy file because may be due to database lock time zone get changed (ChildrenMercy client)
    qDebug() << "LCore:fillDummyTimeZoneFile::3:: Start";
    QFile timezonefile(DUMMYTIMEZONEFILE);

    QStringList strTimeZoneDetailsList;

    if(!strTimeZoneList.isEmpty())
    {
        strTimeZoneDetailsList = strTimeZoneList;
    }
    else
    {
        strTimeZoneDetailsList = readTable(QString("TimeZone"), "");
    }

    if(!strTimeZoneDetailsList.isEmpty())
    {
        if(timezonefile.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&timezonefile);

            for (int i = 0; i < strTimeZoneDetailsList.count(); i++)
            {
                out << strTimeZoneDetailsList.at(i).trimmed() << "\n";
            }
            timezonefile.close();
        }
    }
    sync();
    qDebug() << "LCore:fillDummyTimeZoneFile::3:: strTimeZoneDetailsList " << strTimeZoneDetailsList;
    qDebug() << "LCore:fillDummyTimeZoneFile::3:: End";
}

QStringList LCore::readDummyTimeZoneFile(bool bWriteTable)
{
    qDebug() << "LCore:readDummyTimeZoneFile::3:: Start";
    QFile timezonefile("/root/.timezone");
    QStringList strTimeZoneList;
    if(timezonefile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&timezonefile);
        while (!in.atEnd())
        {
            strTimeZoneList << in.readLine().trimmed();
        }
        timezonefile.close();
    }
    qDebug() << "LCore:readDummyTimeZoneFile::3:: strTimeZoneList " << strTimeZoneList;

    if(bWriteTable && !strTimeZoneList.isEmpty() && strTimeZoneList.count() > 6)
    {
        qDebug() << "LCore:readDummyTimeZoneFile::3:: Time zone table is written because Timezone table is not present or database is locked";
        QString columnType = " Continent VARCHAR(50), Region VARCHAR(50), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30)";
        QString columnValues = "'"+strTimeZoneList.at(0)+"','"+strTimeZoneList.at(1)+"', "+strTimeZoneList.at(2)+", 0, 0, '"+strTimeZoneList.at(5)+"', '"+strTimeZoneList.at(6)+"' ";
        writeTable(QString("TimeZone"), columnType, columnValues, "");
    }
    sync();
    qDebug() << "LCore:readDummyTimeZoneFile::3:: End";
    return strTimeZoneList;
}

void LCore::readNetworkDetailsFromTableAndFillFromFile(bool bFillInFile)
{
    qDebug() << "LCore:readNetworkDetailsFromTableAndFillFromFile::3:: Start   Arg" << bFillInFile;
    QFile NetworkSettingfile(QString("/tmp/NetworkSettingfile"));
    QFile Gatewayfile(QString("/tmp/Gatewayfile"));
    QFile WifiThresholdfile(QString("/tmp/WifiThresholdfile"));
    QFile NetworkTimeOutfile(QString("/tmp/NetworkTimeOutfile"));

    if(bFillInFile)
    {
        backupNetworkDetailsForUpdate(true);

        if(isTableExists("NetworkSettings"))
        {
            if(NetworkSettingfile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&NetworkSettingfile);
                QList<QStringList> list = readCompleteTable("NetworkSettings", "");

                if(list.count() && !list.isEmpty())
                {
                    for(int i=0;i<list.count();i++)
                    {
                        QString strNetworkSettings;
                        foreach(const QString& strValue , list.at(i))
                        {
                            strNetworkSettings.append(strValue).append("\t");
                        }
                        out << strNetworkSettings << "\n";
                    }
                }
                NetworkSettingfile.close();
                sync();
            }
        }

        if(isTableExists("Gateway"))
        {
            if(Gatewayfile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&Gatewayfile);
                QList<QStringList> list = readCompleteTable("Gateway", "");

                if(list.count() && !list.isEmpty())
                {
                    for(int i=0;i<list.count();i++)
                    {
                        QString strGateway;
                        foreach(const QString& strValue , list.at(i))
                        {
                            strGateway.append(strValue).append("\t");
                        }
                        out << strGateway << "\n";
                    }
                }
                Gatewayfile.close();
                sync();
            }
        }

        QList<QStringList> WifiThresholdList = readCompleteTable("SysConf", "Property='WifiThreshold'");

        if(!WifiThresholdList.isEmpty())
        {
            if(WifiThresholdfile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&WifiThresholdfile);
                QString strGateway;

                for(int i=0;i<WifiThresholdList.count();i++)
                {
                    strGateway.clear();
                    foreach(const QString& strValue , WifiThresholdList.at(i))
                    {
                        strGateway.append(strValue).append("\t");
                    }
                    out << strGateway << "\n";
                }
                WifiThresholdfile.close();
                sync();
            }
        }

        QStringList strWiredTimeOutList = readTable("SysConf", "Property='WiredTimeout'" );
        QStringList strWirelessTimeOutList = readTable("SysConf", "Property='WirelessTimeout'");

        QList<QStringList> strNetworkTimeoutList;

        if(!strWiredTimeOutList.isEmpty())
        {
            strNetworkTimeoutList << strWiredTimeOutList;
        }

        if(!strWirelessTimeOutList.isEmpty())
        {
            strNetworkTimeoutList << strWirelessTimeOutList;
        }

        if(!strNetworkTimeoutList.isEmpty())
        {
            if(NetworkTimeOutfile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&NetworkTimeOutfile);
                QString strGateway;

                for(int i=0;i<strNetworkTimeoutList.count();i++)
                {
                    strGateway.clear();
                    foreach(const QString& strValue , strNetworkTimeoutList.at(i))
                    {
                        strGateway.append(strValue).append("\t");
                    }
                    out << strGateway << "\n";
                }
                NetworkTimeOutfile.close();
                sync();
            }
        }
    }
    else
    {
        backupNetworkDetailsForUpdate(false);

        if(NetworkSettingfile.exists() && NetworkSettingfile.size() != 0)
        {
            if(NetworkSettingfile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream network(&NetworkSettingfile);
                while(!network.atEnd())
                {
                    QStringList strNetworkSettingList = network.readLine().split('\t');

                    if(strNetworkSettingList.count() > 1 )
                    {
                        QString ColumnType = "Property VARCHAR(50) PRIMARY KEY,Value VARCHAR(4096)";
                        QString ColumnValues = "'"+ strNetworkSettingList.at(0) +"', '"+  strNetworkSettingList.at(1)  +"'";

                        writeTable("NetworkSettings", ColumnType, ColumnValues, "AppendNew");
                        ::sleep(1);
                    }
                }
                NetworkSettingfile.close();
            }
            sync();
        }

        if(Gatewayfile.exists() && Gatewayfile.size() != 0)
        {
            if(Gatewayfile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream network(&Gatewayfile);
                while(!network.atEnd())
                {
                    QStringList strGatewayList = network.readLine().split('\t');

                    if(strGatewayList.count() > 7 )
                    {
                        QString ColumnType = "Gateway VARCHAR(25) PRIMARY KEY, NetIP VARCHAR(25), NetMask VARCHAR(25),Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30)";
                        QString ColumnValues = "'"+ strGatewayList.at(0) +"', '"+  strGatewayList.at(1)  +"', '"+ strGatewayList.at(2) +"', "+ strGatewayList.at(3) +", "+ strGatewayList.at(4) +", "+ strGatewayList.at(5) +",  '"+ strGatewayList.at(6) +"', '"+ strGatewayList.at(7) +"'";

                        writeTable("Gateway", ColumnType, ColumnValues, "AppendNew");
                    }
                }
                Gatewayfile.close();
            }
            sync();
        }

        if(WifiThresholdfile.exists() && WifiThresholdfile.size() != 0)
        {
            if(WifiThresholdfile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream network(&WifiThresholdfile);
                while(!network.atEnd())
                {
                    QStringList strNetworkSettingList = network.readLine().split('\t');

                    if(strNetworkSettingList.count() > 1 )
                    {
                        QString ColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
                        QString ColumnValues = "'"+ strNetworkSettingList.at(0) +"', '"+  strNetworkSettingList.at(1)  +"'";

                        writeTable("SysConf", ColumnType, ColumnValues, "AppendNew");
                    }
                }
                WifiThresholdfile.close();
            }
            sync();
        }

        if(NetworkTimeOutfile.exists() && NetworkTimeOutfile.size() != 0)
        {
            if(NetworkTimeOutfile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream network(&NetworkTimeOutfile);
                while(!network.atEnd())
                {
                    QStringList strNetworkTimeoutList = network.readLine().split('\t');

                    if(strNetworkTimeoutList.count() > 1 )
                    {
                        QString ColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
                        QString ColumnValues = "'"+ strNetworkTimeoutList.at(0) +"', '"+  strNetworkTimeoutList.at(1)  +"'";

                        writeTable("SysConf", ColumnType, ColumnValues, "AppendNew");
                    }
                }
                NetworkTimeOutfile.close();
            }
            sync();
        }
    }
    qDebug() << "LCore:readNetworkDetailsFromTableAndFillFromFile::3:: End";
}

// cppcheck-suppress unusedFunction
void LCore::readMD5SUMTableAndWriteAfterExtract(bool breadmd5sum, bool nForSDA1)
{
    qDebug() << "LCore:readMD5SUMTableAndWriteAfterExtract::3:: Start";
    qDebug() << "LCore:readMD5SUMTableAndWriteAfterExtract::3:: Args  breadmd5sum " << breadmd5sum << " nForSDA1 " << nForSDA1 ;
    QFile MD5sumFile;
    int status = 0;
    if(nForSDA1)
    {
        MD5sumFile.setFileName(QString(MD5SUMBACKUPFILE));

        status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);

        if(status != 0)
            mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");
    }
    else
    {
        MD5sumFile.setFileName(QString("/tmp/Md5sumFile"));
    }

    if(breadmd5sum)
    {
        if(MD5sumFile.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&MD5sumFile);
            QList<QStringList> strlistmd5sum = readCompleteTable("Md5Sum", "");

            QString strMacAddress = getMac().remove(':');
            if(strMacAddress.isEmpty())
            {
                strMacAddress = getMacForWifi().remove(":");
            }
            QString filename = strMacAddress + QString(".tar.bz2");

            if(strlistmd5sum.count() && !strlistmd5sum.isEmpty())
            {
                for(int i=0;i<strlistmd5sum.count();i++)
                {
                    QString strMd5sumValue;

                    if(nForSDA1 && !strlistmd5sum.at(i).at(0).isEmpty() && (strlistmd5sum.at(i).at(0) == "global.tar.bz2" || strlistmd5sum.at(i).at(0) == filename ))
                    {
                        continue;
                    }
                    foreach(const QString& strValue , strlistmd5sum.at(i))
                    {
                        strMd5sumValue.append(strValue).append("\t");
                    }
                    if(!strMd5sumValue.isEmpty())
                    {
                        out << strMd5sumValue << "\n";
                    }
                }
            }
        }
        MD5sumFile.close();
        sync();
    }
    else
    {
        deleteEntry("Md5Sum", QString("drop"));
        if(MD5sumFile.exists() && MD5sumFile.size() != 0)
        {
            if(MD5sumFile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream Md5sum(&MD5sumFile);
                while(!Md5sum.atEnd())
                {
                    QStringList strlist = Md5sum.readLine().split('\t');
                    if(strlist.count())
                    {
                        QString columnType, columnValues;
                        columnType = " Filename VARCHAR(100), Md5Sum VARCHAR(40), Status INTEGER, DateString VARCHAR(50), PRIMARY KEY(Filename, Md5Sum)";
                        columnValues = " '"+strlist.at(0)+"', '"+strlist.at(1)+"', "+strlist.at(2)+", '"+strlist.at(3)+"'";
                        writeTable(QString("Md5Sum"), columnType, columnValues, "AppendNew");
                    }
                }
                MD5sumFile.close();
            }
            sync();
        }
    }

    if(nForSDA1)
    {
        if(status != 0)
            mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
    }
    qDebug() << "LCore:readMD5SUMTableAndWriteAfterExtract::3:: End";
}

bool LCore::readGrubFile(QString strValue)
{
    qDebug() << "LCore:readGrubFile::3:: Start   Arg : " << strValue;
    bool nCheckForLicenseImage = false;

    QFile myfile, tmpfile;

    if(QFile::exists(GRUBFILE))
    {
        myfile.setFileName(GRUBFILE);
        tmpfile.setFileName(TEMPGRUBFILE);
    }
    else
    {
        myfile.setFileName(EFIGRUBFILE);
        tmpfile.setFileName(EFITEMPGRUBFILE);
    }

    if(myfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream line(&myfile);

        while(!line.atEnd())
        {
            QString strDefault = line.readLine();
            if(!strDefault.startsWith("#") && strDefault.contains("kernel") && !strDefault.contains("/boot/alpine-pro/kernel") && !strDefault.contains("mode=rescue"))
            {

                if(strDefault.contains(strValue))
                {
                    nCheckForLicenseImage = true;
                }
            }
        }
    }
    myfile.close();

    qDebug() << "LCore:readGrubFile::3:: End   returns : " << nCheckForLicenseImage;
    return nCheckForLicenseImage;
}

QString LCore::readOSConfFromLeasesFile(QString strFile, QString strCheck)
{
    qDebug() << "LCore:readOSConfFromLeasesFile::3::Start. ";
    QString strGetline;
    QFile file(strFile);
    if(file.exists())
    {
        if(file.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream line(&file);
            while(!line.atEnd())
            {
                QString strLine = line.readLine();
                if(strLine.contains(strCheck))
                {
                    strLine = strLine.trimmed();
                    if(strLine.contains(strCheck))
                    {
                        strGetline = strLine.trimmed();
                    }
                }
            }
            file.close();
        }
    }
    qDebug() << "LCore:readOSConfFromLeasesFile::3:: END. " << strGetline;
    return strGetline;
}

QString LCore::checkForZeroClientInOSConf()
{
    qDebug() << "LCore:checkForZeroClientInOSConf::3:: Start. ";
    QString strCheckZero;
    QString ethLink = getEthernetDevice();
    QStringList strIp = getavailableIP();

    if(!ethLink.isEmpty())
    {
        QString NetworkType = "Ethernet";
        QStringList NetworkInfo = readTable("NetworkDetails", "NetworkType='"+NetworkType+"'");
        bool bCheck = false;

        foreach(const QString& strLink, strIp)
        {
            if(strLink.contains(ethLink))
            {
                bCheck = true;
                break;
            }
        }

        if(NetworkInfo.count() && NetworkInfo.at(0).toInt() == 2  && bCheck)
        {
            strCheckZero = "/var/lib/dhclient/dhclient-"+ethLink+".leases";
        }
    }

    if(strCheckZero.isEmpty())
    {
        QStringList list = ListWirelessInterfaces();

        if(list.count())
        {
            QString DeviceType;
            QString NetworkType = "Wireless";
            DeviceType = list.at(0);
            QStringList NetworkInfo = readTable("NetworkDetails", "NetworkType='"+NetworkType+"'");


            if(NetworkInfo.count() && NetworkInfo.at(0).toInt() == 2)
            {
                strCheckZero = "/var/lib/dhclient/dhclient-"+DeviceType+".leases";
            }
        }
    }
    qDebug() << "LCore:checkForZeroClientInOSConf::3:: End " << strCheckZero;
    return strCheckZero;
}

void LCore::updateOSBuild()
{
    qDebug() << "LCore:updateOSBuild::3:: Start";
    QFile sda1osbuildfile("/sda1/data/.osbuild_LeTOS");
    QString strOSBuild;
    if(sda1osbuildfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&sda1osbuildfile);
        while (!in.atEnd())
        {
            strOSBuild = in.readLine();
        }
        sda1osbuildfile.close();
        sync();
    }

    if(sda1osbuildfile.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&sda1osbuildfile);

        out << strOSBuild.remove("-ZC") << "\n";
        sda1osbuildfile.close();
    }

    QFile osbuildfile("/data/.osbuild_LeTOS");
    if(osbuildfile.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&osbuildfile);

        out << strOSBuild.remove("-ZC") << "\n";
        osbuildfile.close();
        sync();
    }
    qDebug() << "LCore:updateOSBuild::3:: End";
}

// cppcheck-suppress unusedFunction
QString LCore::getSpecialESSID(QString strESSID)
{
    QString strSpecialESSID;

    QStringList strlistArguments;
    strlistArguments << QString("-c");
    strlistArguments << QString("echo $'%1'").arg(strESSID);

    QProcess proc;
    proc.start(QString("/bin/sh"), strlistArguments);
    proc.waitForFinished(-1);
    QString strSSIDOutput = proc.readAllStandardOutput();

    if(!strSSIDOutput.isEmpty())
    {
        strSpecialESSID = QString::fromUtf8(strSSIDOutput.trimmed().toLatin1().constData());
    }

    return strSpecialESSID;
}

// cppcheck-suppress unusedFunction
void LCore::checkForZC()
{
    qDebug() << "LCore:checkForZC::3:: Start";
    if(getavailableIP().isEmpty())
        return;

    QFile myfile, tmpfile;
    bool isConvertToSTDImage = false;
    bool isConvertToZCImage = false;
    if(QFile::exists(GRUBFILE))
    {
        myfile.setFileName(GRUBFILE);
        tmpfile.setFileName(TEMPGRUBFILE);
    }
    else
    {
        myfile.setFileName(EFIGRUBFILE);
        tmpfile.setFileName(EFITEMPGRUBFILE);
    }

    bool bCheckZero = false;
    QString strDevice = checkForZeroClientInOSConf();

    QString OSConf = readOSConfFromLeasesFile(strDevice , "zc:");
    if(!OSConf.isEmpty())
    {
        OSConf = OSConf.simplified().section(" ", 2, 2).remove(";").remove("\"");
        if(OSConf.startsWith("zc:") || OSConf.startsWith("ZC:"))
        {
            bCheckZero = true;
        }
    }

    bool bCheckForZCImage = readGrubFile(QString("zero"));

    qDebug() << "LCore:checkForZC::3::  bCheckZero " << bCheckZero << "   bCheckForZCImage " << bCheckForZCImage;

    if(bCheckZero && bCheckForZCImage)              /// As all changes are already done.
        return;

    int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);

    if(status != 0)
        mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

    if(myfile.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream line(&myfile);
        if(tmpfile.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream mywfile(&tmpfile);
            while(!line.atEnd())
            {
                QString strDefault = line.readLine();
                if(!strDefault.startsWith("#") && strDefault.contains("kernel") && !strDefault.contains("/boot/alpine-pro/kernel") && !strDefault.contains("mode=rescue"))
                {
                    if(bCheckZero)
                    {
                        if(!strDefault.contains("zero"))
                        {
                            strDefault.append(" zero");
                            isConvertToZCImage = true;
                        }
                    }
                    else
                    {
                        if(strDefault.contains("zero"))
                        {
                            strDefault.remove(" zero");
                            isConvertToSTDImage = true;
                        }
                    }
                }

                mywfile << strDefault << "\n";
            }
            tmpfile.close();
        }
        myfile.close();
    }

    if(QFile::exists(GRUBFILE) && QFile::exists(TEMPGRUBFILE))
    {
        QFile::remove(GRUBFILE);
        QFile::copy(TEMPGRUBFILE, GRUBFILE);
    }
    else if(QFile::exists(EFIGRUBFILE) && QFile::exists(EFITEMPGRUBFILE))
    {
        QFile::remove(EFIGRUBFILE);
        QFile::copy(EFITEMPGRUBFILE, EFIGRUBFILE);
    }

    if(status != 0)
        mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");

    qDebug() << "LCore:checkForZC::3::  isConvertToSTDImage " << isConvertToSTDImage;
    qDebug() << "LCore:checkForZC::3::  isConvertToZCImage " << isConvertToZCImage;
    if(isConvertToSTDImage)
    {
        updateOSBuild();

        //QProcess::execute("rm" , QStringList() << "-rf" << "/data/sysconf.db");
        readAndAddWiFiDetails("2");
        restoreFactorySettings(1);
        QProcess::execute(QString("ShowMSG"), QStringList() << "std"  << "" << "reboot" << "15");
    }
    else if(isConvertToZCImage)
    {
        readAndAddWiFiDetails("1");
        QProcess::execute(QString("ShowMSG"), QStringList() << "zero"  << "" << "reboot" << "15");
    }
    qDebug() << "LCore:checkForZC::3:: End";
}

void LCore::writeTouchPadConfigurationFile(bool bEnableTapping, bool bRightClick, bool bPlamDetect, bool bCoastingSpeed, bool bTapDrag, bool bLockedDrags, int nLockedDragSpeed, int nTouchpadAcceleration)
{
    QFile file(SYNAPTICSCONF);
    QFile fileOld(SYNAPTICSCONFTMP);
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        if(fileOld.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&fileOld);
            QTextStream in(&file);
            bool bAddData = false;
            bool bStartEdit = false;

            while (!in.atEnd())
            {
                QString line = in.readLine();

                if(line.startsWith("Section \"InputClass\""))// || bStartEdit == true)
                {
                    bStartEdit = true;
                    out << line << "\n";
                }
                else if(line.contains("Identifier \"touchpad catchall\"") && bStartEdit == true)
                {
                    out << line << "\n";
                    out << "\t\t" <<"Driver \"synaptics\"\n";
                    out << "\t\t" <<"MatchIsTouchpad \"on\"\n";
                    if(bEnableTapping == true)
                    {
                        out << "\t\t" << "Option \"TapButton1\" \"1\"\n";
                    }
                    if(bRightClick == true)
                    {
                        out << "\t\t" << "Option \"TapButton2\" \"3\"\n";
                    }
                    if(bTapDrag == true)
                    {
                        out << "\t\t" << "Option \"LockedDrags\" \"1\"\n";
                    }
                    if(bLockedDrags == true && bTapDrag == true)
                    {
                        QString strlockedvalue;
                        strlockedvalue = QString::number(nLockedDragSpeed*1000);
                        out << "\t\t" << "Option \"LockedDragTimeout\" \""+strlockedvalue+"\"\n";
                    }
                    if(bCoastingSpeed == true)
                    {
                        out << "\t\t" << "Option \"CoastingSpeed\" \"1\"\n";
                    }
                    else
                    {
                        out << "\t\t" << "Option \"CoastingSpeed\" \"0\"\n";
                    }

                    if(bPlamDetect == true)
                    {
                        out << "\t\t" << "Option \"PlamDetect\" \"1\"\n";
                    }
                    out << "\t\t" << "MatchDevicePath \"/dev/input/event*\"\n";
                    bAddData = true;
                    bStartEdit = false;
                }
                else if(bAddData == true)
                {
                    if(line.contains("EndSection"))
                    {
                        out << line << "\n";
                        bAddData = false;
                    }
                }
                else
                {
                    out << line << "\n";
                }
            }
        }
        file.close();
        fileOld.close();
        sync();
    }
    QFile::remove(SYNAPTICSCONF);
    QFile::copy(SYNAPTICSCONFTMP, SYNAPTICSCONF);
    sync();
    QFile::remove(SYNAPTICSCONFTMP);
}

// cppcheck-suppress unusedFunction
void LCore::setTouchPaddAccelertion()
{
    QString strTouchId = getTouchDeviceID("Touchpad");

    QStringList strlistRead;
    strlistRead = readTable("TouchPadConfiguration", "Property='TouchpadAcceleration'", "Value");

    if(!strlistRead.isEmpty())
    {
        QString strSpeed = strlistRead.at(0);
        QString strSwapCmd = "xinput set-prop "+ strTouchId +" \"Device Accel Constant Deceleration\" " + strSpeed;
        qDebug()<<"strSwapCmd="<<strSwapCmd;
        QProcess::execute(strSwapCmd);
    }
}

// cppcheck-suppress unusedFunction
void LCore::touchpadConfigurationForLaptop()
{
    qDebug() << "touchpadconfigurationforlaptop:: Start.";
    if(isTableExists("TouchPadConfiguration"))
    {
        return ;
    }

    writeTouchPadConfigrationTable("EnableTapping", "1");
    writeTouchPadConfigrationTable("RightClick", "1");
    writeTouchPadConfigrationTable("CoastingSpeed", "1");
    writeTouchPadConfigrationTable("TapDrag", "1");
    writeTouchPadConfigrationTable("LockedDrags","1");
    writeTouchPadConfigrationTable("LockedDragsTimeout", "3");
    writeTouchPadConfigrationTable("PlamDetect", "1");
    int nSpeed =  11 - 5;
    writeTouchPadConfigrationTable("TouchpadAcceleration", QString::number(nSpeed));
    writeTouchPadConfigurationFile(1, 1, 1, 1, 1, 1, 3, 6);
}

QString LCore::writeTouchPadConfigrationTable(const QString& strProperty, const QString& strValue)
{
    QString ColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(255)";
    QString Values = "'"+strProperty+"', '"+strValue+"'";
    return writeTable("TouchPadConfiguration", ColumnType, Values, "AppendNew");
}

// cppcheck-suppress unusedFunction
QString LCore::getAvailableSizeInFolderOrFile(const QString& strName ,const QString& strCondition)
{
    qDebug() << "LCore:getAvailableSizeInFolderOrFile::3:: Start";
    qDebug() << "LCore:getAvailableSizeInFolderOrFile::3:: Args   Name " << strName << "  Condition " << strCondition;
    QProcess proc;
    QString strCmd;

    if(strCondition == "folder")
        strCmd = "/bin/sh -c \"df --output=avail -B M "+ strName +" | tail -1 | grep -Eo '|[0-9]+'\"";      //Folder
    else
        strCmd = "/bin/sh -c \"df -sh "+ strName +" | awk '{print $1}' | grep -Eo '|[0-9]+'\"";             // File

    proc.start(strCmd);
    proc.waitForFinished(-1);
    QString strSizeInMB =  proc.readAll().trimmed();

    qDebug() << "LCore:getAvailableSizeInFolderOrFile::3:: End   return : " << strSizeInMB;
    return strSizeInMB;
}

// cppcheck-suppress unusedFunction
QString LCore::calculateMd5sum(QString strFilePath)
{
    qDebug() << "LCore:calculateMd5sum::3:: Start   Args " << strFilePath;
    QString strMd5sum;
    QFile file(strFilePath);
    if(file.open(QIODevice::ReadOnly))
    {
        LCore liblcore;
        strMd5sum = liblcore.getMd5Sum(file.readAll());
        file.close();
        file.remove();
    }
    qDebug() << "LCore:calculateMd5sum::3:: End   return : " << strMd5sum;
    return strMd5sum;
}

// cppcheck-suppress unusedFunction
bool LCore::CheckServerExistUsingCurlCmd(QString strServer)
{

    strServer = strServer.simplified();
    QStringList args;
    args<<"-Ss"<<"-I"<<"--connect-timeout"<<"7"<<"-k";
    if( strServer.startsWith("http://"))
        args << strServer.trimmed().replace("http","https");
    else  if(!strServer.contains("https"))
        args<<"https://"+strServer.trimmed();
    else
        args<<strServer;

    QProcess *proc =new QProcess();
    proc->setProcessChannelMode(QProcess::MergedChannels);
    proc->start("curl",args);
    proc->waitForFinished(-1);
    QString stroutput =proc->readAll();
    qDebug()<<"stroutput == "<<stroutput;

    bool nvalid =false;

    QStringList strhttpsStatusCodes;
    strhttpsStatusCodes<<"200 OK"<<"302 Found"<<"307 Temporary Redirect"<<"403 Forbidden"<<"302 Redirect"<<"bytes received";

    foreach(const QString& strcode,strhttpsStatusCodes)
    {
        if(stroutput.contains(strcode,Qt::CaseInsensitive))
        {
            nvalid =true;
            break;
        }
    }

    return nvalid ;
}

// cppcheck-suppress unusedFunction
QPair<QString, QString> LCore::getLayoutFullName(QString strLayout, QString strVariant)
{
    qDebug() << "LCore:getLayoutFullName::3::Start";

    qDebug() << "LCore:getLayoutFullName::3::strLayout"<<strLayout<<"\tVariant"<<strVariant;

    QString strLayoutFullName, strVariantFullName;
    QPair <QString ,QString > LayoutVariantpair;

    QStringList ListOfKbdLayouts = getKeyboardList("layouts");
    QStringList ListOfKbdVariants = getKeyboardList("variant");

    if(!strVariant.isEmpty() && strVariant != tr("None"))
    {
        for (int i = 0; i < ListOfKbdVariants.size(); ++i)
        {
            if((ListOfKbdVariants.at(i).section(" ",1,1).remove(":").trimmed() == QString(strLayout.trimmed())) && (ListOfKbdVariants.at(i).section(" ",0,0).trimmed() == QString(strVariant.trimmed())) )
            {
                for (int ii = 0; ii < ListOfKbdLayouts.size(); ++ii)
                {
                    if(ListOfKbdLayouts.at(ii).section(" ",0,0).trimmed() == QString(strLayout).trimmed())
                    {
                        strLayoutFullName = ListOfKbdLayouts.at(ii).section(" ",1,ListOfKbdLayouts.at(ii).count(" "));
                    }
                }
                strVariantFullName = ListOfKbdVariants.at(i).section(" ",2,ListOfKbdVariants.at(i).count(" "));
                break;
            }
        }
    }
    else
    {
        for (int i = 0; i < ListOfKbdLayouts.size(); ++i)
        {
            if(ListOfKbdLayouts.at(i).section(" ",0,0).trimmed() == QString(strLayout).trimmed())
            {
                strLayoutFullName = ListOfKbdLayouts.at(i).section(" ",1,ListOfKbdLayouts.at(i).count(" "));
                strVariantFullName = "";
                break;
            }
        }
    }
    qDebug() << "LCore:getLayoutFullName::3::END:strLayout"<<strLayoutFullName<<"\tVariant"<<strVariantFullName;
    LayoutVariantpair.first = strLayoutFullName;
    LayoutVariantpair.second = strVariantFullName;
    return LayoutVariantpair;
}

int LCore::isInDST(const QString& continent, const QString& region)
{
    qDebug() << "Dialog:isInDST()::3::Start  Arguments.... continent = "<< continent << " region " << region;

    int check = 0;

    QString curryear = QDate::currentDate().toString("yyyy");
    QString continent_Region = continent+"/"+region;
    QStringList newDETlist = getDSTList( continent_Region, curryear);

    if(!newDETlist.isEmpty() && newDETlist.count() == 2)
    {
        QString dst_Start_List, dst_End_List;
        dst_Start_List = newDETlist.at(0).section(" ", 0, 4);;
        dst_End_List = newDETlist.at(1).section(" ", 0, 4);;
        qDebug() << "Dialog:isInDST()::3::--current year " <<curryear  << "  start--  " << dst_Start_List << " -- current year-- End -- " << dst_End_List ;

        QString nextDSTStartDate, nextDSTEndDate, preDSTStartDate, preDSTEndDate;
        //checkforNextdstendTime

        int currentYear = curryear.toInt();
        QString nextYear = QString::number(currentYear+1);
        QStringList  nextYearDETlist = getDSTList( continent_Region, nextYear);

        if(!nextYearDETlist.isEmpty() && nextYearDETlist.count() == 2)
        {
            nextDSTStartDate = nextYearDETlist.at(0).section(" ", 0, 4);
            nextDSTEndDate = nextYearDETlist.at(1).section(" ", 0, 4);
            qDebug() << "Dialog:isInDST()::3::--next year " << nextYear << "  start--  " << nextDSTStartDate << " -- next year-- End -- " << nextDSTEndDate ;
        }

        QString preYear = QString::number( currentYear - 1 );
        QStringList  preYearDETlist = getDSTList( continent_Region, preYear);

        if(!preYearDETlist.isEmpty() && preYearDETlist.count() == 2)
        {
            preDSTStartDate = preYearDETlist.at(0).section(" ", 0, 4);
            preDSTEndDate = preYearDETlist.at(1).section(" ", 0, 4);
            qDebug() << "Dialog:isInDST()::3::--previous year  " <<  preYear << "   start--  " << preDSTStartDate << " -- previous year-- End -- " << preDSTEndDate ;
        }

        //check for current DST is running
        QDateTime now = QDateTime::currentDateTime();
        QDateTime dststartDate = QDateTime::fromString(dst_Start_List);
        QDateTime dstEndDate = QDateTime::fromString(dst_End_List);
        QDateTime nextdststartDate = QDateTime::fromString(nextDSTStartDate);
        QDateTime nextdstEndDate = QDateTime::fromString(nextDSTEndDate);
        QDateTime newDSTStartDate , newDSTEndDate ;
        QDateTime predststartDate = QDateTime::fromString(preDSTStartDate);
        QDateTime predstEndDate = QDateTime::fromString(preDSTEndDate);

        if(dststartDate.secsTo(dstEndDate) > 0)         /// DST start and end in same year.
        {
            //dstEndDate is greater
            newDSTStartDate = dststartDate ;
            newDSTEndDate  = dstEndDate;
        }
        else
        {
            if(now.secsTo(dstEndDate) > 0)     // Check DST END is greater than current as DST OF Previous.
            {
                /// Current date is less then current year dst end date
                newDSTStartDate = predststartDate ;
                newDSTEndDate  = dstEndDate;
            }
            else
            {
                //if  startdate is greater than ending date    so read end date of next year
                //means dst of current year is ended

                // Done for start in october and end in next April
                newDSTStartDate = dststartDate ;
                newDSTEndDate  = nextdstEndDate ;
            }
        }

        if((now.secsTo(newDSTStartDate) < 0) && (now.secsTo(newDSTEndDate) > 0)  )                //check for dst start date of current year
        {
            //normal place like Eurom/Amsterdam
            //dst started in current year
            check = 1;
        }
        else if((now.secsTo(newDSTStartDate) < 0 ) &&   ( newDSTEndDate.secsTo(newDSTStartDate) > 0  ) && ( now.secsTo(newDSTEndDate) > 0  ) )
        {
            check = 1;
        }
    }
    qDebug() << "Dialog:isInDST()::3::End   returns " << QString::number(check);
    return check;
}

QStringList LCore::getDSTList(const QString& cont_Region, const QString& nyear)
{
    QString year = nyear;
    qDebug() << "Dialog:getDSTList()::3::Start  Arguments.... cont_Region " << cont_Region << " year " << year;
    QString strTimeZone = cont_Region;
    if(year.isEmpty())
        year = QDate::currentDate().toString("yyyy");

    QString dstcommand = "zdump -v " +QString("/usr/share/zoneinfo/") + strTimeZone;
    QStringList zoneInfoList, newDETlist;
    QProcess proc;
    proc.start(dstcommand);
    proc.waitForFinished(-1);

    while (!proc.atEnd())
    {
        QString line;
        if((line = proc.readLine()).contains(year))
        {
            zoneInfoList << line.section(" = ",-1,-1).simplified();
        }
    }

    if(!zoneInfoList.isEmpty())
    {
        for(int i= 0; i< zoneInfoList.count()- 1; ++i)
        {
            if(zoneInfoList.at(i).contains("isdst=1"))
            {
                if(i == 0)
                {
                    newDETlist << zoneInfoList.at(zoneInfoList.count()-2);
                    newDETlist << zoneInfoList.at(i);
                    // index = zoneInfoList.count()-2;
                    break;
                }
                else
                {
                    newDETlist << zoneInfoList.at(i-1);
                    newDETlist << zoneInfoList.at(i+1);
                    // index = i-1;
                    break;
                }
            }
        }
    }
    qDebug() << "Dialog:getDSTList()::3::Return newDETlist " << newDETlist;
    qDebug() << "Dialog:getDSTList()::3::End";
    return newDETlist;
}

// cppcheck-suppress unusedFunction
void LCore::applyDateTimeAfterConfigurationUpdate(const QString& strCondition)
{
    if(strCondition == "After")
    {
        QStringList strTimeZoneInfo = readTable(QString("TimeZone"), "");
        if(!strTimeZoneInfo.isEmpty())
        {
            QString strContinent = strTimeZoneInfo.at(0);
            QString strRegion = strTimeZoneInfo.at(1);

            setTimeZone();

            QStringList strDSTList = readTable(QString("DaylightSavingTime"), "", "AutoSyncInterval");

            if(!strDSTList.isEmpty() && strDSTList.at(0).toInt() != 1)
            {
                int nInDST = isInDST(strContinent, strRegion);

                if(nInDST)
                {
                    QStringList strDateTimeInfoList = readTable(QString("DateTime"), "");
                    if(!strDateTimeInfoList.isEmpty())
                    {
                        QDateTime currentDateTime;

                        if(strDateTimeInfoList.at(0) == "Network")
                        {
                            setNTPDate();
                            currentDateTime = QDateTime::currentDateTime();
                        }
                        else
                        {
                            QString cmdd = "zdump "+QString(TIMEZONE_PATH)+ strContinent +"/"+ strRegion;
                            QProcess *proc = new QProcess();
                            proc->start(cmdd);
                            proc->waitForFinished(-1);
                            QString line, newDate;

                            while (!proc->atEnd())
                            {
                                line=proc->readLine().simplified();
                                newDate =  line.section(" ", 1, 5);
                            }

                            currentDateTime = QDateTime::fromString(newDate);
                        }

                        QDateTime newDateTime;
                        if(strDateTimeInfoList.at(0) == "Network" || (strDateTimeInfoList.at(0) != "Network" && !QFile::exists("/tmp/AlreadyInManualDST")))
                        {
                            newDateTime =  currentDateTime.addSecs(-3600);
                        }

                        QLocale locale("en_US");
                        QString strFdate = locale.toString(newDateTime.date(), "dd MMM yyyy");
                        QString strFtime;

                        if(getTimeFormat()) //12Hr
                            strFtime = locale.toString(newDateTime.time(), "hh:mm:ss  AP");
                        else
                            strFtime = locale.toString(newDateTime.time(), "hh:mm:ss");

                        setDateTime(strFdate, strFtime);
                    }
                }
                else
                {
                    readDateTime();
                }
            }
            else
            {
                readDateTime();
            }
        }
    }
    else
    {
        QStringList strDSTList = readTable(QString("DaylightSavingTime"), "", "AutoSyncInterval");

        if(!strDSTList.isEmpty() && strDSTList.at(0).toInt() != 1)
        {
            QProcess::execute("touch", QStringList() << "/tmp/AlreadyInManualDST");
        }
    }
}

QMap<QString,QString> LCore::getUrlDataSeperatly(QString strUrl)
{
    QMap<QString,QString> Map;
    if(!strUrl.isEmpty())
    {
        if(!strUrl.contains("@"))
        {
            QString strServer = strUrl.section(':',0,0);
            Map.insert("Server",strServer);

            QStringList strTemp = strUrl.split('/');
            QString strIp;
            if(strTemp.count() > 2)
            {
                strIp = strTemp.at(2);
            }
            if(strIp.contains(":"))
            {
                QString strPort = strIp.section(":",1);
                strIp = strIp.section(":",0,0);
                Map.insert("Port", strPort);
            }
            Map.insert("Ip",strIp);

            QString strPath = strUrl.section('/',3);
            if(strPath.contains(" "))
            {
                strPath.replace(" ", "%20");
            }
            Map.insert("Path",strPath);
        }
        else if(1 < strUrl.count("@"))
        {
            QString strServer = strUrl.section(':',0,0);
            Map.insert("Server",strServer);
            qDebug()<<"server"<<strServer;

            QString str1 = strUrl.section(':',1,1);
            QString strUser = str1.remove(0, 2);
            Map.insert("User",strUser);

            QString strPasswordTemp = strUrl.section(':',2);
            QString strTemp = strPasswordTemp.section('@',-2);
            QString strPassword = strPasswordTemp.section('@'+strTemp,0,0);
            Map.insert("Password",strPassword);

            QString strIp = strTemp.section('/',0,0);
            if(strIp.contains(":"))
            {
                QString strPort = strIp.section(":",1);
                strIp = strIp.section(":",0,0);
                Map.insert("Port", strPort);
            }
            Map.insert("Ip",strIp);
            qDebug()<<"IP:"<<strIp;

            QString strPath = "/"+strTemp.section('/',1);

            if(strPath.contains(" "))
            {
                strPath.replace(" ", "%20");
            }
            Map.insert("Path",strPath);
            qDebug()<<"Path:"<<strPath;

        }
        else
        {
            QString strServer = strUrl.section(':',0,0);
            Map.insert("Server",strServer);
            qDebug()<<"server"<<strServer;

            //QString strUser = strUrl.section(':',1,1).section('/',-1);
            QString str1 = strUrl.section(':',1,1);
            QString strUser = str1.remove(0, 2);
            Map.insert("User",strUser);

            QString strPasswordTemp = strUrl.section(':',2);
            QString strTemp = strPasswordTemp.section('@',-1);
            QString strPassword = strPasswordTemp.section('@'+strTemp,0,0);
            Map.insert("Password",strPassword);

            QString strIp = strTemp.section('/',0,0);
            if(strIp.contains(":"))
            {
                QString strPort = strIp.section(":",1);
                strIp = strIp.section(":",0,0);
                Map.insert("Port", strPort);
            }
            Map.insert("Ip",strIp);
            qDebug()<<"IP:"<<strIp;

            QString strPath = "/"+strTemp.section('/',1);

            if(strPath.contains(" "))
            {
                strPath.replace(" ", "%20");
            }
            Map.insert("Path",strPath);
            qDebug()<<"Path:"<<strPath;
        }
    }
    return Map;
}

QString LCore::getFTPS_HTTPSSHostnamefromIP(QString strUrl)
{
    qDebug() << "LCore:getFTPS_HTTPSSHostnamefromIP::3::Start ";
    qDebug() << "LCore:getFTPS_HTTPSSHostnamefromIP::3::Start::arguments"<<strUrl;
    ////////
    /// \brief CheckFornslookup
    ///  One Issue reported by deligenta releted to Firmware upgrade failed to updata,
    ///  We are passing hostname and below command nslookup command retriving ip from it trying to download tar from ip.
    ///  They had block  downloading from IP address from there enviroment, due to this firmware failed to upgrad.
    ///  Through hostname tar is properly getting downloaded
    ///  so put nslookup condition on DefaultValues
    /// .
    QString strReturn = strUrl;

    if(!isValidIP(strUrl))
    {
        QString strIp = strUrl;
        QList <QStringList> strHostsInfoList = readCompleteTable(QString("HostsSettings"),"");

        if(!strHostsInfoList.isEmpty())
        {
            for(int i=0;i<strHostsInfoList.count();i++)
            {
                if(!QString(strHostsInfoList[i][1]).isEmpty())
                {
                    if(QString(strHostsInfoList[i][1]) == strUrl)
                    {
                        strIp = strHostsInfoList[i][0];
                        break;
                    }
                }
            }
        }


        QStringList strDefaultValues = readDefaultsValue("CheckFornslookup");
        if(!strDefaultValues.isEmpty() && strDefaultValues.at(0) == "1")
        {
            // nslookup strUrl
            QString strLine, strName, strAddress;
            QString cmd ="nslookup "+strUrl;
            QProcess process;
            qDebug()<<"command:-"<<cmd;
            process.start(cmd);
            process.waitForFinished(-1);
            qDebug()<<" exitCode: "<<process.exitCode();

            while (!process.atEnd())
            {
                strLine = process.readLine().trimmed();

                if(strLine.contains("Name:"))
                {
                    strName = strLine.section("Name:", -1,1).trimmed();
                }
                if(strLine.contains("Address:"))
                {
                    strAddress = strLine.section("Address:", -1,1).trimmed();
                }
            }
            qDebug() << "Name       =" << strName;
            qDebug() << "Address    =" << strAddress;

            if(strAddress == strIp && strName == strUrl)
            {
                strReturn = strUrl;
            }
            else
            {
                strUrl = strIp;
            }
        }
    }

    QStringList strDefaultValues = readDefaultsValue("CheckFornslookup");
    if(!strDefaultValues.isEmpty() && strDefaultValues.at(0) == "1")
    {
        if(isValidIP(strUrl))
        {
            qDebug()<<"this is valid ip";

            qDebug()<<"strhost is "<<strUrl;
            QString cmd ="nslookup "+strUrl;

            QProcess process;
            qDebug()<<"command:-"<<cmd;
            process.start(cmd);
            process.waitForFinished(-1);
            qDebug()<<" exitCode: "<<process.exitCode();
            QString stroutput = process.readAllStandardOutput().trimmed();
            qDebug()<<"stroutput"<<stroutput;

            stroutput= stroutput.section("=",1,1).trimmed();
            stroutput = stroutput.remove(stroutput.length()-1,1);

            QString  strerror = QString(process.readAllStandardError());
            qDebug() <<"errorString"<<strerror;

            if(stroutput.isEmpty()) {
                stroutput = strUrl;
            }

            qDebug() << "LCore:getFTPS_HTTPSSHostnamefromIP::1::"<<stroutput;

            strReturn = stroutput;
        }
    }

    qDebug() << "LCore:getFTPS_HTTPSSHostnamefromIP::3::End  returns  : " << strReturn;
    return strReturn;
}

bool LCore::ADSJoinOnLogin(QString strUserName,QString strPassword, QString strDomainName, QString strtOrganisationUnit)
{
    qDebug() << "LCore:ADSJoinOnLogin::3::Start";
    qDebug() << "LCore:ADSJoinOnLogin::3:: Arg =: strUserName " << strUserName << "strPassword " << strPassword << " strDomainName   " << strDomainName;

    QMap<QString, QString> mapShareSettings;
    mapShareSettings.insert("MapShare", "0");
    mapShareSettings.insert("MapType", "0");
    mapShareSettings.insert("MapIP", "");
    mapShareSettings.insert("MapPath", "/home/");
    mapShareSettings.insert("MapPrefix", "");
    mapShareSettings.insert("MapShareDir", "$USER");
    mapShareSettings.insert("MapSuffix", "");

    QString strIpaddr = getIPAddress("Ethernet");
    QString strIpaddrWireless = getIPAddress("Wireless");
    QString strHostname;
    QStringList listHostNameData = readTable("SysConf", "Property='Hostname'", "Value");

    if(listHostNameData.count())
        strHostname = listHostNameData.at(0);

    QStringList strlistReadFile ,strlistWriteFile;
    QString strlistReplace;
    QProcess::startDetached("hostnamectl", QStringList() << "set-hostname" << strHostname.left(15));
    writeHostnameInDHCPConf(QString(strHostname.left(15)));

    strlistReadFile << readFile("/etc/hosts");
    for(int i=0;i< strlistReadFile.count() ;i++)
    {
        if(strlistReadFile.at(i).contains(strIpaddr))
        {
            strlistReplace = strlistReadFile.at(i).simplified();
            strlistReplace=strlistReplace.section(" ",0,0);
            strlistReplace = strlistReplace.append("\t");
            strlistReadFile.removeAt(i);
            strlistReadFile.insert(i ,strlistReplace.append(strHostname.left(15)));
        }

        if(!strIpaddrWireless.isEmpty() && strlistReadFile.at(i).contains(strIpaddrWireless))
        {
            strlistReplace = strlistReadFile.at(i).simplified();
            strlistReplace=strlistReplace.section(" ",0,0);
            strlistReplace = strlistReplace.append("\t");
            strlistReadFile.removeAt(i);
            strlistReadFile.insert(i ,strlistReplace.append(strHostname.left(15)));
        }
        strlistWriteFile << strlistReadFile.at(i);
    }
    writeToFile("/etc/hosts",strlistWriteFile);

    QStringList service = readTable("Services","");
    if(service.count())
    {
        foreach(const QString& strService, service)
        {
            if(strService == "x11vnc")
            {
                QString servicePath = SERVICES_PATH + QString("/") + strService + " restart";
                QProcess::startDetached(servicePath);
            }
        }
    }

    QString cmd = "net ads leave -U " + strUserName + "%" + strPassword;
    qDebug()<<"cmd========= "<<cmd;
    QProcess::execute(cmd);

    QStringList lines;
    lines = readFile(QString(HOSTS_FILE), strDomainName );
    writeToFile(QString(HOSTS_FILE), lines);
    lines = readFile(QString(SMB_CONF_FILE),strDomainName);
    QStringList strsmbvalue;

    foreach(const QString& str, lines)
    {
        if(str.contains("[smb-share]"))
            strsmbvalue += "realm = "+strDomainName;
        if(!str.contains("realm"))
            strsmbvalue.append(str);
    }
    writeToFile(QString(SMB_CONF_FILE), strsmbvalue);

    lines.clear();
    lines += "[libdefaults]";
    lines += " default_realm = " + strDomainName;
    lines += " dns_lookup_realm = false";
    lines += " dns_lookup_kdc = false";
    lines += " ticket_lifetime = 24h";
    lines += " forwardable = yes";
    lines += "[realms]";
    lines += " " + strDomainName.toUpper() + " = {";
    lines += "admin_server = " + strDomainName.toLower();
    lines += "default_domain = " + strDomainName.toLower();
    lines += "kdc = " + strDomainName.toLower();
    lines += "}";
    lines += strDomainName.toLower() + " = " + strDomainName.toUpper();
    lines += "." + strDomainName.toLower() + " = " + strDomainName.toUpper();
    writeToFile(QString(KRB5_CONF_FILE), lines);

    QString Domain=strDomainName;
    QProcess netOrig;
    qDebug()<<"NET ADS NETORIG: "<<QString(NETORIG);
    netOrig.start(QString(NETORIG));
    netOrig.waitForFinished(-1);
    while(!netOrig.atEnd())
    {
        QString output = netOrig.readLine();
        qDebug()<<"NET ADS LOOKUP: "<<output;
        if(output.contains("Pre-Win2k Domain:"))
        {
            if(output.section(":",1,-1).trimmed().length())
            {
                Domain=output.section(":",1,-1).trimmed();
                qDebug()<<"Found Domain:"<<Domain;
            }
            break;
        }
    }
    qDebug()<<"Domain==="<<Domain;
    editSmbConf("security", "user");
    editSmbConf("workgroup", Domain);

    ::sleep(0.5);

    QProcess::execute(QString(SAMBACMD), QStringList() << QString("stop"));
    QProcess::execute(QString(WINBINDCMD), QStringList() << QString("stop"));
    QFile::remove(QString(WINBINDDPIPE));
    QProcess::execute(QString(SAMBACMD), QStringList() << QString("start"));
    QProcess::execute(QString(WINBINDCMD), QStringList() << QString("start"));

    ::sleep(1);

    editSmbConf("security", "ads");

    ::sleep(0.5);

    QStringList strlistArgs;
    QString userpass = QString("-U%1%%2").arg(strUserName, strPassword);
    strlistArgs << QString("ads") << QString("join") << userpass;

    if(!strtOrganisationUnit.isEmpty())
        strlistArgs << QString("createcomputer=%1").arg(strtOrganisationUnit);

    bool bStatus = false;
    int returnValue;
    returnValue = QProcess::execute(QString(NETCMD), strlistArgs);
    editSmbConf("security", "user");

    QFile adsLogFile(QString("/root/.adslog"));
    adsLogFile.remove();
    if(returnValue == 0)
    {
        bStatus = true;
        QString columnType = " ServerPrimaryIP VARCHAR(18) PRIMARY KEY, ServerSecondaryIP VARCHAR(18), Domain VARCHAR(255), OU VARCHAR(4096), MapShare INTEGER, MapType INTEGER, MapIP VARCHAR(18), MapPath VARCHAR(100), MapPrefix VARCHAR(10), MapShareDir VARCHAR(50), MapSuffix VARCHAR(10)";
        QString values = "'', '', '" + strDomainName + "', '" + strtOrganisationUnit + "', " + mapShareSettings.value("MapShare") + "," + mapShareSettings.value("MapType") + ", '" + mapShareSettings.value("MapIP") + "','" + mapShareSettings.value("MapPath") + "','" + mapShareSettings.value("MapPrefix")  + "','" + mapShareSettings.value("MapShareDir") + "','" + mapShareSettings.value("MapSuffix") + "'";
        QString ColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
        writeTable("SysConf", ColumnType, "'ADSUsername', '"+strUserName+"'", "AppendNew");
        writeTable("SysConf", ColumnType, "'ADSPassword', '"+encryptDecryptString(strPassword, 0)+"'", "AppendNew");
        writeTable(QString("ADSSettings"), columnType, values, "");
        writeTable("SysConf", ColumnType, "'Domain', '"+strDomainName+"'", "AppendNew");
        writeTable("SysConf", ColumnType, "'FQDN_Domain', '"+ Domain +"'", "AppendNew");
        writeTable("SysConf", ColumnType,"'NetworkAccessType', '0'", "AppendNew");
        writeDHCP81optionINDns(false);

        if(adsLogFile.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&adsLogFile);
            out << QString("Username=") << strUserName << QString("\n");
            out << QString("Password=") << encryptDecryptString(strPassword, 0) << QString("\n");
            out << QString("Domain=") << strDomainName << QString("\n");
            adsLogFile.close();
        }
    }

#ifdef Q_OS_LINUX
    QStringList listFileContents;
    QFile file(RESOLVEFILE);
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        QStringList listDomain;
#ifdef Q_OS_LINUX
        listDomain = readTable("SysConf", "Property='Domain'", "Value");
#else
        listDomain = readTable(retquery(),"SysConf", "Property='Domain'", "Value");
#endif
        QString  strdmn;
        if(listDomain.count())
        {
            strdmn =listDomain.at(0);
        }
        while (!in.atEnd())
        {
            QString line = in.readLine();
            if(line.contains("domain"))
                listFileContents.append("domain "+strdmn);
            else
                listFileContents.append(line);
        }
        file.close();
    }
    if(listFileContents.size())
    {
        if(file.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&file);
            for(int i = 0; i  < listFileContents.size(); i++)
            {
                out << listFileContents.at(i) << "\n";
            }
            file.close();
        }
    }
#endif

    qDebug() << "LCore:ADSJoinOnLogin::3::End   returns  " << bStatus;
    return bStatus;
}

QStringList LCore::readFile(const QString& filename, const QString& strDomain )
{
    qDebug() << "Dialog:readFile::3:: Starts .";
    QString domain;
    if(strDomain.isEmpty())
    {
        //QString serverIPPrimary;
        QStringList ADSSettings;
        ADSSettings = readTable(QString("ADSSettings"), "");
        if(!ADSSettings.isEmpty() && ADSSettings.count() > 2)
        {
            //serverIPPrimary = ADSSettings.at(0);
            domain = ADSSettings.at(2);
        }
    }
    else
    {
        domain = strDomain;
    }

    QString strIPAddress;
    if(filename == QString(HOSTS_FILE))
    {
        strIPAddress = getIPAddress(QString("Ethernet"));
        if(strIPAddress.isEmpty())
            strIPAddress = getIPAddress(QString("Wireless"));
    }

    QStringList lines;
    QFile file(filename);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return QStringList("");

    QTextStream in(&file);
    //    if(filename == QString(RESOLVE_CONF_FILE))
    //        lines += QString("nameserver ") + serverIPPrimary;
    while(!in.atEnd())
    {
        QString line = in.readLine();
        //        if(filename == QString(RESOLVE_CONF_FILE) && line.contains(serverIPPrimary))
        //        {
        //            line = "";
        //        }
        if(filename == QString(HOSTS_FILE) && line.contains("localhost"))
        {
            line = line.simplified();
            QString hostname = getHostname();
            QString newLine = line.section(" ",0,0) + "\t" + hostname + "." + domain + "\t" + hostname + "\tlocalhost";
            line = newLine;
        }
        if(filename == QString(SMB_CONF_FILE))
        {
            line = line.simplified();
            if(line.startsWith("workgroup"))
            {
                lines += "workgroup = " + domain.section(".",0,0).toUpper();
                lines += "realm = " + domain.toUpper();
                lines += "winbind separator = +";
                line = "";
            }
            else if(line.startsWith("security"))
            {
                lines += "security = ads";
                //                lines += "password server = " + serverIPPrimary;
                lines += "winbind use default domain = yes";
                line = "";
            }
            else if(line.startsWith("netbios") || line.startsWith("realm = ") || line.startsWith("winbind separator") || line.startsWith("password server") || line.startsWith("winbind use"))
                line = "";
        }
        if(!line.isEmpty())
        {
            if(filename == QString(HOSTS_FILE) && !strIPAddress.isEmpty())
            {
                if(line.startsWith(strIPAddress))
                {
                    QString hostname = line.section('\t', 1, 1);
                    hostname = hostname.left(15);
                    line = line.section('\t', 0, 0) + "\t" + hostname + "\t" + hostname + "." + domain;
                    strIPAddress.clear();
                }
            }
            lines += line;
        }
    }

    file.close();
    qDebug() << "Dialog:readFile::3:: End.";
    return lines;
}

void LCore::editSmbConf(QString strProperty, QString strValue)
{
    qDebug() << "Dialog:editSmbConf::3:: Starts.";
    QFile rfile(QString(SMB_CONF_FILE));
    if(!rfile.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    QStringList strlistLines;

    QTextStream in(&rfile);
    while(!in.atEnd())
    {
        QString line = in.readLine();
        if(line.contains(strProperty))
        {
            QString strProp = line.section(" = ", 0, 0);
            strlistLines << QString("%1 = %2").arg(strProp, strValue);
        }
        else
            strlistLines << line;
    }

    rfile.close();

    QFile wfile(QString(SMB_CONF_FILE));
    if(wfile.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        QTextStream out(&wfile);
        for(int i = 0; i < strlistLines.count(); i++)
            out << strlistLines.at(i) << QString("\n");
        wfile.close();
    }
    qDebug() << "Dialog:editSmbConf::3:: End.";
}

// cppcheck-suppress unusedFunction
void LCore::joinADS()
{
    if(isTableExists("ADSSettings"))
    {
        QStringList strUserName = readTable("SysConf", "Property='ADSUsername'", "Value");
        QStringList strPassword = readTable("SysConf", "Property='ADSPassword'", "Value");
        QStringList strDomain = readTable("SysConf", "Property='Domain'", "Value");

        if(!strUserName.isEmpty() && !strPassword.isEmpty() && !strDomain.isEmpty())
        {
            qDebug() << "ADS values " << strUserName << "  " << encryptDecryptString(strPassword.at(0), 1) << "   " << strDomain;
            QString organisationUnit;
            QStringList list = readTable("ADSSettings", "", "OU");
            if(list.count() && !list.isEmpty())
            {
                organisationUnit=list.at(0);
            }
            bool status = ADSJoinOnLogin(strUserName.at(0), encryptDecryptString(strPassword.at(0), 1), strDomain.at(0), organisationUnit);
            qDebug() << "ADS joined " <<  status;
        }
    }
    else
    {
        qDebug() << "ADS settings not available";
    }
}

QStringList LCore::getMaximumResolutionAndRefreshRate(const QString& strDisplayNumber)
{
    qDebug() << "LCore:getMaximumResolutionAndRefreshRate::3:: Start    Arg  : " << strDisplayNumber;

    QStringList strResolutionAndRefreshRateList;
    QStringList strDispResolutionlist, strDispRefreshratelist;
    QList <QStringList> strResolutionAndRefreshList = getResolutionAndRefreshList(strDisplayNumber);

    if(strResolutionAndRefreshList.isEmpty() || strResolutionAndRefreshList.count() < 2)
    {
        return strResolutionAndRefreshRateList;
    }

    strDispResolutionlist = strResolutionAndRefreshList.at(0);
    strDispRefreshratelist = strResolutionAndRefreshList.at(1);

    QStringList shortResolutionList = ShortingResolution(strDispResolutionlist);
    QString strResolution = "";
    QString strRefreshRate = "";
    if(!shortResolutionList.isEmpty())
    {
        float nRefreshRate = 0.0;

        foreach(const QString& strResoRotation, strDispRefreshratelist)
        {
            if(!strResoRotation.isEmpty())
            {
                QString strRes =  strResoRotation.section("@", 0,0).trimmed();

                if(strRes == shortResolutionList.at(0) )
                {
                    strResolution = strRes;

                    strRefreshRate = strResoRotation.section("@", 1).trimmed();

                    if(strRefreshRate.toFloat() > nRefreshRate)
                    {
                        nRefreshRate = strRefreshRate.toFloat();
                    }
                }
            }
        }
        strRefreshRate = QString::number(nRefreshRate);
    }

    if(!strResolution.isEmpty() && !strRefreshRate.isEmpty())
    {
        strResolutionAndRefreshRateList << strResolution << strRefreshRate;
    }

    qDebug() << "LCore:getMaximumResolutionAndRefreshRate::3:: End   returns : ResolutionAndRefreshRateList  " <<  strResolutionAndRefreshRateList;
    return strResolutionAndRefreshRateList;
}

QStringList LCore::getDisplayResolutionList(QString strDisplayName)
{
    qDebug()<< "     DisplayResolutionList " << strDisplayName;
    QStringList strDisplayResolutionList;
    QProcess *proc = new QProcess();
    proc->start("xrandr.orig");
    proc->waitForFinished(-1);
    bool bCheck = false;

    while(!proc->atEnd())
    {
        QString line = proc->readLine(); // do not use simplified here

        if((line.contains(strDisplayName) && line.contains("connected")) || bCheck )
        {
            if(bCheck && (!line.startsWith(" ") || line.contains("+HSync") || line.contains("+VSync")))
            {
                break;
            }

            if(line.section(" ", 0,0) == strDisplayName )
            {
                bCheck = true;
                continue;
            }
            strDisplayResolutionList << line.trimmed();
        }
    }
    qDebug() << "DisplayResolutionList   " << strDisplayResolutionList;
    return strDisplayResolutionList;
}

QList < QStringList> LCore::getResolutionAndRefreshList(const QString& strDisplayName)
{
    qDebug() << "LCore:getResolutionAndRefreshList::1:: start ";
    QList <QStringList> strResolutionAndRefreshList;
    QStringList strSecondDisplaylist = getDisplayResolutionList(strDisplayName);

    QStringList strDispResolutionlist, strDispRefreshratelist;

    for(int i = 0; i < strSecondDisplaylist.size(); i++)
    {
        QString line = strSecondDisplaylist.at(i);

        if(!strDispResolutionlist.contains(line.section(' ', 0, 0).simplified()))
        {
            QString res = line.section(' ', 0, 0).simplified();
            if(qgetenv("BOARDTYPE") == "jseries" && res.section("x", 0, 0).toInt() < 1024)
                res.clear();
            else
                strDispResolutionlist.append(res);
            for(int j = 1; j <= line.count(" "); ++j)
            {
                QString rate = line.section(" ", j, j).remove("*").remove("+");
                if(rate.length())
                    strDispRefreshratelist.append(line.section(' ', 0, 0) +"@"+rate);
            }
        }
    }

    if(!strDispResolutionlist.isEmpty() && !strDispRefreshratelist.isEmpty())
    {
        strResolutionAndRefreshList.append(strDispResolutionlist);
        strResolutionAndRefreshList.append(strDispRefreshratelist);
    }
    qDebug() << "LCore:getResolutionAndRefreshList::1:: End  returns "  << strResolutionAndRefreshList;
    return strResolutionAndRefreshList;
}

void LCore::readAndAddWiFiDetails(const QString& strCheck)
{
    qDebug() << "LCore:readAndAddWiFiDetails::3:: Start   Arg  " << strCheck ;
    QFile wifiDetailsFile("/sda1/data/.wifi");
    QFile networkDetailsFile("/sda1/data/.networkIpFile");
    QFile Security_802xDetailsFile(QString("/sda1/data/.Network8021xfile"));
    QFile NetworkSettingfile(QString("/sda1/data/.NetworkSettingfile"));
    QFile Gatewayfile(QString("/sda1/data/.Gatewayfile"));
    QFile WifiThresholdfile(QString("/sda1/data/.WifiThresholdfile"));
    QFile NetworkTimeOutfile(QString("/sda1/data/.NetworkTimeOutfile"));

    if(strCheck == "1")
    {
        readNetworkDetailsFromTableAndFillFromFile(true);

        if(QFile::exists(QString("/tmp/wifiDetailsFile")) || QFile::exists(QString("/tmp/networkIpFile")) || QFile::exists("/tmp/Network8021xfile") || QFile::exists("/tmp/NetworkSettingfile") || QFile::exists("/tmp/Gatewayfile") || QFile::exists("/tmp/WifiThresholdfile") || QFile::exists(QString("/tmp/NetworkTimeOutfile")))
        {
            int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);
            qDebug() << "*** Status *** =" << status;

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

            if(!QFile::copy(QString("/tmp/wifiDetailsFile"), QString("/sda1/data/.wifi")))
            {
                QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/tmp/wifiDetailsFile") <<  QString("/sda1/data/.wifi"));
            }

            if(!QFile::copy(QString("/tmp/networkIpFile"), QString("/sda1/data/.networkIpFile")))
            {
                QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/tmp/networkIpFile") <<  QString("/sda1/data/.networkIpFile"));
            }

            if(!QFile::copy(QString("/tmp/Network8021xfile"), QString("/sda1/data/.Network8021xfile")))
            {
                QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/tmp/Network8021xfile") <<  QString("/sda1/data/.Network8021xfile"));
            }

            if(!QFile::copy(QString("/tmp/NetworkSettingfile"), QString("/sda1/data/.NetworkSettingfile")))
            {
                QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/tmp/NetworkSettingfile") <<  QString("/sda1/data/.NetworkSettingfile"));
            }

            if(!QFile::copy(QString("/tmp/Gatewayfile"), QString("/sda1/data/.Gatewayfile")))
            {
                QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/tmp/Gatewayfile") <<  QString("/sda1/data/.Gatewayfile"));
            }

            if(!QFile::copy(QString("/tmp/WifiThresholdfile"), QString("/sda1/data/.WifiThresholdfile")))
            {
                QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/tmp/WifiThresholdfile") <<  QString("/sda1/data/.WifiThresholdfile"));
            }

            if(!QFile::copy(QString("/tmp/NetworkTimeOutfile"), QString("/sda1/data/.NetworkTimeOutfile")))
            {
                QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/tmp/NetworkTimeOutfile") <<  QString("/sda1/data/.NetworkTimeOutfile"));
            }

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
        }
    }
    else if(strCheck == "2")
    {
        QDir dir(TARBACKUPFOLDER);
        if(wifiDetailsFile.exists() || networkDetailsFile.exists() || Security_802xDetailsFile.exists() || NetworkSettingfile.exists() || Gatewayfile.exists() || WifiThresholdfile.exists() || NetworkTimeOutfile.exists() || dir.exists())
        {
            int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);
            qDebug() << "*** Status *** =" << status;

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

            if(!wifiDetailsFile.remove())
            {
                system("rm -rf /sda1/data/.wifi");
            }

            if(!networkDetailsFile.remove())
            {
                system("rm -rf /sda1/data/.networkIpFile");
            }

            if(!Security_802xDetailsFile.remove())
            {
                system("rm -rf /sda1/data/.Network8021xfile");
            }

            if(!NetworkSettingfile.remove())
            {
                system("rm -rf /sda1/data/.NetworkSettingfile");
            }
            if(!Gatewayfile.remove())
            {
                system("rm -rf /sda1/data/.Gatewayfile");
            }
            if(!WifiThresholdfile.remove())
            {
                system("rm -rf /sda1/data/.WifiThresholdfile");
            }
            if(!NetworkTimeOutfile.remove())
            {
                system("rm -rf /sda1/data/.NetworkTimeOutfile");
            }

            if(readGrubFile(QString("zero")))
            {
                QProcess::execute(QString("rm") , QStringList() << "-rf" << TARBACKUPFOLDER);
                QProcess::execute(QString("rm") , QStringList() << "-rf" << MD5SUMBACKUPFILE);
                sync();
            }

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
        }
    }
    else
    {

        QProcess::execute(QString("rm"), QStringList() << "-rf" << "/tmp/wifiDetailsFile");

        if(!QFile::copy(QString("/sda1/data/.wifi"), QString("/tmp/wifiDetailsFile")))
        {
            QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/sda1/data/.wifi") <<  QString("/tmp/wifiDetailsFile"));
        }
        sync();
        QProcess::execute(QString("rm"), QStringList() << "-rf" << "/tmp/networkIpFile");

        if(!QFile::copy(QString("/sda1/data/.networkIpFile"), QString("/tmp/networkIpFile")))
        {
            QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/sda1/data/.networkIpFile") <<  QString("/tmp/networkIpFile"));
        }
        sync();
        QProcess::execute(QString("rm"), QStringList() << "-rf" << "/tmp/Network8021xfile");

        if(!QFile::copy(QString("/sda1/data/.Network8021xfile"), QString("/tmp/Network8021xfile")))
        {
            QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/sda1/data/.Network8021xfile") <<  QString("/tmp/Network8021xfile"));
        }
        sync();
        QProcess::execute(QString("rm"), QStringList() << "-rf" << "/tmp/NetworkSettingfile");

        if(!QFile::copy(QString("/sda1/data/.NetworkSettingfile"), QString("/tmp/NetworkSettingfile")))
        {
            QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/sda1/data/.NetworkSettingfile") <<  QString("/tmp/NetworkSettingfile"));
        }
        sync();
        QProcess::execute(QString("rm"), QStringList() << "-rf" << "/tmp/Gatewayfile");

        if(!QFile::copy(QString("/sda1/data/.Gatewayfile"), QString("/tmp/Gatewayfile")))
        {
            QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/sda1/data/.Gatewayfile") <<  QString("/tmp/Gatewayfile"));
        }
        sync();
        QProcess::execute(QString("rm"), QStringList() << "-rf" << "/tmp/WifiThresholdfile");

        if(!QFile::copy(QString("/sda1/data/.WifiThresholdfile"), QString("/tmp/WifiThresholdfile")))
        {
            QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/sda1/data/.WifiThresholdfile") <<  QString("/tmp/WifiThresholdfile"));
        }
        sync();
        QProcess::execute(QString("rm"), QStringList() << "-rf" << "/tmp/NetworkTimeOutfile");

        if(!QFile::copy(QString("/sda1/data/.NetworkTimeOutfile"), QString("/tmp/NetworkTimeOutfile")))
        {
            QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/sda1/data/.NetworkTimeOutfile") <<  QString("/tmp/NetworkTimeOutfile"));
        }
        sync();
        readNetworkDetailsFromTableAndFillFromFile(false);
    }
    qDebug() << "LCore:readAndAddWiFiDetails::3:: End" ;
}

// cppcheck-suppress unusedFunction
void LCore::setProperDisplayResolutionRefreshRate()
{   
    qDebug() << "LCore:setProperDisplayResolutionRefreshRate::3:: Start" ;
    QStringList strDisplayInfo = readTable("DisplaySettings", "");
    QStringList DeviceList;
    DeviceList << getDisplayDevice("Device1") << getDisplayDevice("Device2");

    if(!strDisplayInfo.isEmpty())
    {
        QString DeviceFirst = strDisplayInfo.at(12);

        if(!DeviceList.isEmpty())
            DeviceFirst = DeviceList.at(0);

        QString strFirstDisplayResolution, strFirstDisplayRefreshRate,  strSecondDisplayResolution,  strSecondDisplayRefreshRate;

        strFirstDisplayResolution = strDisplayInfo.at(2);
        strFirstDisplayRefreshRate = strDisplayInfo.at(4);
        strSecondDisplayResolution = strDisplayInfo.at(9);
        strSecondDisplayRefreshRate = strDisplayInfo.at(11);

        QList <QStringList> strResoltionAndRefreshList = getResolutionAndRefreshList(DeviceFirst);

        if(!strResoltionAndRefreshList.isEmpty() && strResoltionAndRefreshList.count() > 1)
        {
            QStringList strResolutionlist;
            strResolutionlist = strResoltionAndRefreshList.at(0);

            QString strFirstResolution = strDisplayInfo.at(2);

            if(strResolutionlist.contains(strFirstResolution) == false)
            {
                QStringList strFirstDisplayResolutionRefreshRate = getMaximumResolutionAndRefreshRate(DeviceFirst);
                if(!strFirstDisplayResolutionRefreshRate.isEmpty() && strFirstDisplayResolutionRefreshRate.count() > 1 )
                {
                    strFirstDisplayResolution = strFirstDisplayResolutionRefreshRate.at(0);
                    strFirstDisplayRefreshRate = strFirstDisplayResolutionRefreshRate.at(1);
                    strSecondDisplayResolution = strFirstDisplayResolutionRefreshRate.at(0);
                    strSecondDisplayRefreshRate = strFirstDisplayResolutionRefreshRate.at(1);
                }
            }
        }

        if(getScreenCount() > 1)
        {
            QString DeviceSecond = strDisplayInfo.at(13);

            if(DeviceList.count() > 1)
                DeviceSecond = DeviceList.at(1);

            QList <QStringList> strResoltionAndRefreshListN = getResolutionAndRefreshList(DeviceSecond);
            if(!strResoltionAndRefreshListN.isEmpty() && strResoltionAndRefreshListN.count() > 1)
            {
                QStringList strResolutionlist;
                strResolutionlist = strResoltionAndRefreshListN.at(0);

                QString strSecondResolution = strDisplayInfo.at(9);

                if(strResolutionlist.contains(strSecondResolution) == false)
                {
                    QStringList strSecondDisplayResolutionRefreshRate = getMaximumResolutionAndRefreshRate(DeviceSecond);
                    if(!strSecondDisplayResolutionRefreshRate.isEmpty() && strSecondDisplayResolutionRefreshRate.count() > 1 )
                    {
                        strSecondDisplayResolution = strSecondDisplayResolutionRefreshRate.at(0);
                        strSecondDisplayRefreshRate = strSecondDisplayResolutionRefreshRate.at(1);
                    }
                }
            }
        }

        QStringList strUpdateList;
        strUpdateList << "FirstDisplayResolution='"+ strFirstDisplayResolution +"'" << "FirstDisplayRefreshRate='"+ strFirstDisplayRefreshRate +"'" << "SecondDisplayResolution='"+ strSecondDisplayResolution +"'" << "SecondDisplayRefreshRate='"+ strSecondDisplayRefreshRate +"'";
        updateTable(QString("DisplaySettings"), strUpdateList , "");
    }
    qDebug() << "LCore:setProperDisplayResolutionRefreshRate::3:: End" ;
}

int LCore::getsystemTrayStatus(const QString& strTablename, const QString& strModulname)
{
    int nShowModuleStatus = 0;

    QStringList propertylist;
    if(isDesktopMode() == true) //kioskmode
    {
        propertylist = readTable(strTablename, "ModuleName='"+strModulname+"'","Desktop");
    }
    else
    {
        propertylist = readTable(strTablename, "ModuleName='"+strModulname+"'","Appliance");
    }

    if(propertylist.count() && propertylist.at(0).toInt())
    {
        nShowModuleStatus = 1;
    }

    return nShowModuleStatus;
}

// cppcheck-suppress unusedFunction
QList<QStringList> LCore::getModuleListTaskbarContainer()
{
    QList<QStringList> strlistModuleName;

    if(isDesktopMode())
    {
        strlistModuleName = readCompleteTable(QString("SystemTrayProperties"), "Desktop=1");
    }
    else
    {
        strlistModuleName = readCompleteTable(QString("SystemTrayProperties"), "Appliance=1");
    }

    QStringList strlistModuletoExclude ;

    strlistModuletoExclude <<  "Sound" << "PrintQueueManager" << "CitrixReceiver" << "Wired" << "Wireless" << "Hotplug" << "KeyboardLayout" << "Remote Agent \\nSettings"<<"Clock"<<"WindowList" << "PopupModule";

    if(strlistModuleName.count())
    {
        QStringList strlistCurrentLogged = readTable("SysConf", "Property='CurrentLoggedIn'", "Value");
        QStringList strlistuservalues;

        if(strlistCurrentLogged.count())
        {
            if(strlistCurrentLogged.at(0) != "Admin")
            {

                if(isTableExists("UserAccess") && (strlistCurrentLogged.at(0) == "MyUser" || strlistCurrentLogged.at(0) == "ADS" || strlistCurrentLogged.at(0) == "LDAP"))
                {
                    strlistuservalues = readTable("UserAccess", "", "ModuleName");
                }
                else if(isTableExists("InstallerAccess") && strlistCurrentLogged.at(0) == "Installer")
                {
                    strlistuservalues = readTable("InstallerAccess", "", "ModuleName");
                }
            }
        }

        QListIterator<QStringList> layoutIter( strlistModuleName );
        while( layoutIter.hasNext() )
        {
            QStringList strListValue = layoutIter.next();

            if((strlistuservalues.count() && !strlistuservalues.contains(strListValue.at(0), Qt::CaseSensitive)) || (strlistModuletoExclude.count() && strlistModuletoExclude.contains(strListValue.at(0), Qt::CaseSensitive)))
            {
                if((strlistuservalues.contains("Tools-Network") || strlistuservalues.contains("Tools-System") || strlistuservalues.contains("Tools-Logs")) && strListValue.at(0) == "Tools")
                {
                    continue;
                }
                strlistModuleName.removeAll(strListValue);
            }
        }
    }
    return strlistModuleName;
}


void LCore::readAndAddHostnameDetails(const QString& strCheck)
{
    qDebug() << "LCore:readAndAddHostnameDetails::3:: Start   Arg  " << strCheck ;
    QFile HostNameDetailsfile(QString("/sda1/data/.HostNameDetailsfile"));

    if(strCheck == "1")
    {
        readHostnameDetailsFromAndToTableFromFile(true);

        if(QFile::exists(QString("/tmp/HostNameDetailsfile")))
        {
            int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);
            qDebug() << "*** Status *** =" << status;

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

            if(!QFile::copy(QString("/tmp/HostNameDetailsfile"), QString("/sda1/data/.HostNameDetailsfile")))
            {
                QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/tmp/HostNameDetailsfile") <<  QString("/sda1/data/.HostNameDetailsfile"));
            }

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
        }
    }
    else if(strCheck == "2")
    {
        if(HostNameDetailsfile.exists())
        {
            int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);
            qDebug() << "*** Status *** =" << status;

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

            if(!HostNameDetailsfile.remove())
            {
                system("rm -rf /sda1/data/.HostNameDetailsfile");
            }

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
        }
    }
    else
    {
        QProcess::execute(QString("rm"), QStringList() << "-rf" << "/tmp/HostNameDetailsfile");

        if(!QFile::copy(QString("/sda1/data/.HostNameDetailsfile"), QString("/tmp/HostNameDetailsfile")))
        {
            QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/sda1/data/.HostNameDetailsfile") <<  QString("/tmp/HostNameDetailsfile"));
        }
        sync();
        readHostnameDetailsFromAndToTableFromFile(false);
    }
    qDebug() << "LCore:readAndAddHostnameDetails::3:: End" ;
}


void LCore::readHostnameDetailsFromAndToTableFromFile(bool bFillInFile)
{
    qDebug() << "LCore:readHostnameDetailsFromAndToTableFromFile::3:: Start   Arg" << bFillInFile;
    QFile HostNameDetailsfile(QString("/tmp/HostNameDetailsfile"));

    if(bFillInFile)
    {
        QStringList strHostnameList = readTable("SysConf", "Property='Hostname'" );
        QStringList strHostnameByList = readTable("SysConf", "Property='HostnameBy'");
        QStringList strHostnamePrefList = readTable("SysConf", "Property='HostnamePref'");

        QList<QStringList> strHostnameDetailsList;

        if(!strHostnameList.isEmpty())
        {
            strHostnameDetailsList << strHostnameList;
        }

        if(!strHostnameByList.isEmpty())
        {
            strHostnameDetailsList << strHostnameByList;
        }

        if(!strHostnamePrefList.isEmpty())
        {
            strHostnameDetailsList << strHostnamePrefList;
        }

        if(!strHostnameDetailsList.isEmpty())
        {
            if(HostNameDetailsfile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&HostNameDetailsfile);
                QString strHostname;

                for(int i=0;i<strHostnameDetailsList.count();i++)
                {
                    strHostname.clear();
                    foreach(const QString& strValue , strHostnameDetailsList.at(i))
                    {
                        strHostname.append(strValue).append("\t");
                    }
                    out << strHostname << "\n";
                }
                HostNameDetailsfile.close();
                sync();
            }
        }
    }
    else
    {
        if(HostNameDetailsfile.exists() && HostNameDetailsfile.size() != 0)
        {
            if(HostNameDetailsfile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream network(&HostNameDetailsfile);
                while(!network.atEnd())
                {
                    QStringList strHostInfoList = network.readLine().split('\t');

                    if(strHostInfoList.count() > 1 )
                    {
                        QString ColumnType = "Property VARCHAR(50) PRIMARY KEY, Value VARCHAR(75)";
                        QString ColumnValues = "'"+ strHostInfoList.at(0) +"', '"+  strHostInfoList.at(1)  +"'";

                        writeTable("SysConf", ColumnType, ColumnValues, "AppendNew");
                    }
                }
                HostNameDetailsfile.close();
            }
            sync();
        }
    }

    qDebug() << "LCore:readHostnameDetailsFromAndToTableFromFile::3:: End";
}

// cppcheck-suppress unusedFunction
QStringList LCore::getINIDirectoryInfo(QString strDirURLPath)
{
    /* Provide url which ends with folder name*/

    qDebug() << "LCore:getINIDirectoryInfo::3:: Start    arg : " << strDirURLPath;
    QStringList strDirectoryContentList;

    if(strDirURLPath.isEmpty())
        return strDirectoryContentList;

    if(!strDirURLPath.endsWith("/"))
    {
        strDirURLPath.append("/");
    }

    QMap<QString,QString> mapUrlCredential = getUrlDataSeperatly(strDirURLPath);

    if(!mapUrlCredential.isEmpty())
    {
        bool bisCheckCertificate = false;
        QStringList  strlistCheckCertificate = readDefaultsValue("CheckCertificate");
        if(strlistCheckCertificate.count() && strlistCheckCertificate.at(0).toInt())
            bisCheckCertificate = true;

        QString strIp = mapUrlCredential.value("Ip");
        QString strPath = mapUrlCredential.value("Path");
        QString strScheme = mapUrlCredential.value("Server").toLower();
        QString strUser = mapUrlCredential.value("User");
        QString strPassword = mapUrlCredential.value("Password");
        QString strurl;

        if(!(strUser.isEmpty() && strPassword.isEmpty()))
        {
            strurl.append("-u ");
            strurl.append(strUser+":");
            strurl.append(strPassword+" ");
        }

        if(bisCheckCertificate)
        {
            strIp = getFTPS_HTTPSSHostnamefromIP(strIp);
            QProcess::execute("/usr/os-bin/CertificateManager CertificateInstall "+strScheme+"://"+strIp);
        }

        strurl.append(strScheme+"://");
        strurl.append(strIp).append("/");
        strurl.append(strPath+"/");

        if(!bisCheckCertificate)
        {
            if(strScheme == ("https") || strScheme == ("ftps") )
                strurl.append(" -k");
        }

        QString strCmd;
        if(strScheme == ("https") || strScheme == ("http") )
        {
            strCmd = "curl -l "+strurl + " -w '%{http_code}' --connect-timeout 13";
        }
        else
        {
            strCmd = "curl -l "+ strurl + "  --connect-timeout 13";
        }

        qDebug() << "LCore:getINIDirectoryInfo::3:: strCmd : " << strCmd;
        QProcess *proc = new QProcess();
        proc->start(strCmd);
        proc->waitForFinished(-1);
        int nExitCode = proc->exitCode();
        QString strOutPut = QString(proc->readAllStandardOutput());
        QString strError = QString(proc->readAllStandardError());
        //        QStringList strlist = strOutPut.split("\n");
        //        QStringList strOutPutList;
        //        if(strOutPut.count() > 4)
        //        {
        //            strOutPutList <<  strOutPut.right(5);
        //        }
        //        else
        //        {
        //            strOutPutList = strlist;
        //        }

        QString strAll;
        if(strOutPut.isEmpty() || strOutPut == "'000'")
            strAll = strError;
        else
            strAll = strOutPut;

        QStringList strOutPutList = strAll.split("\n");
        QString strReturn = getReturnCodeForCurlCmd(strScheme, nExitCode, strOutPutList);

        if(strReturn.isEmpty())
        {
            while (strPath.endsWith("/"))
            {
                strPath.chop(1);
            }

            QString strFolderName = strPath.section("/", -1);

            foreach(const QString& strLine, strOutPutList)
            {
                QString line = strLine;
                line = line.trimmed();
                if(!line.isEmpty() && !line.contains("<") && !line.contains(">") && !line.contains("{") && !line.contains("}"))
                {
                    strDirectoryContentList << line;
                }
                else
                {
                    if(line.contains(strFolderName) && line.contains("<br>"))
                    {
                        QStringList strInfoList = line.split("<br>");
                        foreach(const QString& strInfo , strInfoList)
                        {
                            if(strInfo.contains(strFolderName))
                            {
                                strDirectoryContentList << strInfo.section(">", 1).remove("</A>");
                            }
                        }
                    }
                }
            }
        }
        delete proc;

        if(strDirectoryContentList.isEmpty())
        {
            // Return error like this only because to adjust o\p and error.
            strDirectoryContentList << "" << strReturn;
        }
    }

    qDebug() << "LCore:getINIDirectoryInfo::3:: End    return  : " << strDirectoryContentList;
    return strDirectoryContentList;
}

QString LCore::getReturnCodeForCurlCmd(const QString& strUrlType, int nProcExitCode, const QStringList& strOutPutList)
{
    qDebug() << "LCore:getReturnCodeForCurlCmd::3:: Start ";
    qDebug() << "LCore:getReturnCodeForCurlCmd::3:: Args     strUrlType : " << strUrlType << " nProcExitCode :  " << QString::number(nProcExitCode) << " \n strOutPutList  :   " << strOutPutList;
    QString strReturn;
    if(strUrlType == ("ftps") || strUrlType == ("ftp") )
    {
        if(nProcExitCode == 0)
            strReturn = "";
        else if(nProcExitCode == 67)
        {
            strReturn = tr("Access denied due to wrong credentials.");
        }
        else if(nProcExitCode == 78 ||  nProcExitCode == 9)
        {
            strReturn = tr("File not found");
        }
        else if(nProcExitCode == 7 || nProcExitCode == 6)
        {
            strReturn = tr("Failed to connect ");
        }
        else if(nProcExitCode == 60)
        {
            strReturn = tr("SSL certificate problem: certificate has expired");
        }
        else
        {
            strReturn = tr(QString(strOutPutList.join("\n")).toLatin1());
        }
    }
    else if( strUrlType == ("https") || strUrlType == ("http"))
    {
        if(nProcExitCode == 0)
        {
            foreach(const QString& str, strOutPutList)
            {
                if(str.contains("'200'"))
                {
                    strReturn = "";
                    break;
                }
                else if(str.contains("'401'"))
                {
                    strReturn = tr("Access denied due to wrong credentials.");
                    break;
                }
                else if(str.contains("'404'"))
                {
                    strReturn = tr("File not found.");
                    break;
                }
            }
        }
        else if(nProcExitCode == 7 || nProcExitCode == 28)
        {
            strReturn = tr("Failed to connect.\n(No route to host)");
        }
        else if(nProcExitCode == 6 && strOutPutList.contains("'000'"))
        {
            foreach(const QString& str, strOutPutList)
            {
                if(str.contains("'000'"))
                {
                    strReturn = tr("Could not resolve host.");
                    break;
                }
            }
        }
        else if(nProcExitCode == 60)
        {
            strReturn = tr("SSL certificate problem: certificate has expired");
        }
        else
        {
            strReturn = tr(QString(strOutPutList.join("\n")).toLatin1());
        }
    }
    else
    {
        strReturn = tr("Invalid URL path.");
    }

    qDebug() << "LCore:getReturnCodeForCurlCmd::3:: Ends  returns " << strReturn ;
    return strReturn;
}

void LCore::readOrAddFirmwareDetails(const QStringList& strList)
{
    qDebug() << "LCore:readOrAddFirmwareDetails::3:: Start    arg : " << strList;
    QFile MD5sumFile(QString("/sda1/data/.Md5sumFile"));

    if(strList.isEmpty())
        return;

    int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);

    if(status != 0)
        mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

    if(MD5sumFile.open(QIODevice::Append | QIODevice::Text))
    {
        QTextStream out(&MD5sumFile);
        if(strList.count() > 1)
        {
            out << tr("Filename : ") + strList.at(0)   << "\n";
            out << tr("Updated on : ") + strList.at(1) << "\n";
            out << "" << "\n";
        }
        else
        {
            out << strList.at(0) << "\n";
            out << "" << "\n";
        }

        MD5sumFile.close();
        sync();
    }

    if(status != 0)
        mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
    qDebug() << "LCore:readOrAddFirmwareDetails::3:: End";
}

void LCore::backupNetworkDetailsForUpdate(bool bFillInFile)
{
    qDebug() << "LCore:backupNetworkDetailsForUpdate::3:: Start  arg" << bFillInFile;
    QFile wifiDetailsFile(QString("/tmp/wifiDetailsFile"));
    QFile NetworkIpFile(QString("/tmp/networkIpFile"));
    QFile Security_802xDetailsFile(QString("/tmp/Network8021xfile"));

    if(bFillInFile)
    {
        if(NetworkIpFile.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QTextStream out(&NetworkIpFile);
            QList<QStringList> list = readCompleteTable("NetworkDetails", "");

            if(list.count() && !list.isEmpty())
            {
                for(int i=0;i<list.count();i++)
                {
                    QString strNetworkValue;
                    foreach(const QString& strValue , list.at(i))
                    {
                        strNetworkValue.append(strValue).append("\t");
                    }
                    out << strNetworkValue << "\n";
                }
            }
            NetworkIpFile.close();
            sync();
        }

        if(isTableExists("WifiDetails"))
        {
            if(wifiDetailsFile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&wifiDetailsFile);
                QList<QStringList> list = readCompleteTable("WifiDetails", "");

                if(list.count() && !list.isEmpty())
                {
                    for(int i=0;i<list.count();i++)
                    {
                        QString strNetworkValue;
                        foreach(const QString& strValue , list.at(i))
                        {
                            strNetworkValue.append(strValue).append("\t");
                        }
                        out << strNetworkValue << "\n";
                    }
                }
                wifiDetailsFile.close();
                sync();
            }
        }

        if(isTableExists("Network8021x"))
        {
            if(Security_802xDetailsFile.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&Security_802xDetailsFile);
                QList<QStringList> list = readCompleteTable("Network8021x", "");

                if(list.count() && !list.isEmpty())
                {
                    for(int i=0;i<list.count();i++)
                    {
                        QString strSecurityValue;

                        foreach(const QString& strValue , list.at(i))
                        {
                            strSecurityValue.append(strValue).append("\t");
                        }
                        out << strSecurityValue << "\n";
                    }
                }
                Security_802xDetailsFile.close();
                sync();
            }
        }
    }
    else
    {
        if(NetworkIpFile.exists() && NetworkIpFile.size() != 0)
        {
            if(NetworkIpFile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream network(&NetworkIpFile);
                while(!network.atEnd())
                {
                    QStringList strlist = network.readLine().split('\t');
                    if(strlist.count() > 16)
                    {
                        QString columnType = "NetworkMode INTEGER, IP VARCHAR(255), Subnetmask VARCHAR(255), Gateway VARCHAR(255), PrimaryWIN VARCHAR(255), SecondaryWIN VARCHAR(255), PrimaryDNS VARCHAR(255), SecondaryDNS VARCHAR(255), "
                                             "LinkMode VARCHAR(40), Speed VARCHAR(50), WakeOn VARCHAR(30), NetworkType VARCHAR(30), Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(NetworkType)";

                        QString  columnValues = ""+strlist[0]+" , '"+strlist[1]+"' , '"+strlist[2]+"' ,'"+strlist[3]+"', '"+strlist[4]+"', '"+strlist[5]+"', '"+strlist[6]+"', '"+strlist[7]+"', '"+strlist[8]+"', '"+strlist[9]+"', '"+strlist[10]+"', '"+strlist[11]+"', "+strlist[12]+",  '"+strlist[13]+"', "+strlist[14]+", '"+strlist[15]+"', '"+strlist[16]+"'";
                        writeTable("NetworkDetails", columnType, columnValues , "NetworkType='"+strlist[11]+"'");
                    }
                }
                NetworkIpFile.close();
            }
            sync();
        }

        if(wifiDetailsFile.exists() && wifiDetailsFile.size() != 0)
        {
            if(wifiDetailsFile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream network(&wifiDetailsFile);
                while(!network.atEnd())
                {
                    QStringList strWifiList = network.readLine().split('\t');

                    if(strWifiList.count() > 9)
                    {
                        QString coltypes = "ESSID VARCHAR(255), Security VARCHAR(50), Password VARCHAR(255), Interface VARCHAR(20), UserCreated INTEGER, Extra1 INTEGER, Extra2 INTEGER, Extra3 INTEGER, Extra4 VARCHAR(30), Extra5 VARCHAR(30), PRIMARY KEY(ESSID, Security)";
                        QString colvalues = "'"+ strWifiList.at(0) +"', '"+  strWifiList.at(1)  +"', '"+ strWifiList.at(2) +"','"+ strWifiList.at(3) +"', "+ strWifiList.at(4) +", "+ strWifiList.at(5) +", "+ strWifiList.at(6) +", "+ strWifiList.at(7) +", '"+ strWifiList.at(8) +"', '"+ strWifiList.at(9) +"' ";
                        writeTable("WifiDetails", coltypes, colvalues, "AppendNew");
                    }
                }
                wifiDetailsFile.close();
            }
            sync();
        }

        if(Security_802xDetailsFile.exists() && Security_802xDetailsFile.size() != 0)
        {
            if(Security_802xDetailsFile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream network(&Security_802xDetailsFile);
                while(!network.atEnd())
                {
                    QStringList strSecurityList = network.readLine().split('\t');

                    if(strSecurityList.count() > 12 )
                    {
                        QString ColTypes = "AuthenticationType VARCHAR(200), Username VARCHAR(255), Password VARCHAR(255), Identity VARCHAR(255), UserCertificate VARCHAR(255), "
                                           "CACertificate VARCHAR(255), PrivateKey VARCHAR(255), InnerAuthentication VARCHAR(200), PEAPVersion INTEGER, AskPassword INTEGER, NetworkType VARCHAR(10)  PRIMARY KEY, EnableSecurity INTEGER, PrivateKeyPassword VARCHAR(255)";
                        QString colvalues = "'"+ strSecurityList.at(0) +"', '"+  strSecurityList.at(1)  +"', '"+ strSecurityList.at(2) +"','"+ strSecurityList.at(3) +"', '"+ strSecurityList.at(4) +"', '"+ strSecurityList.at(5) +"', '"+ strSecurityList.at(6) +"', '"+ strSecurityList.at(7) +"', "+ strSecurityList.at(8) +", "+ strSecurityList.at(9) +", '"+ strSecurityList.at(10) +"', "+ strSecurityList.at(11) +", '"+ strSecurityList.at(12) +"' ";

                        writeTable("Network8021x", ColTypes, colvalues, "AppendNew");
                    }
                }
                Security_802xDetailsFile.close();
            }
            sync();
        }
    }
    qDebug() << "LCore:backupNetworkDetailsForUpdate::3:: End";
}

// cppcheck-suppress unusedFunction
QStringList LCore::getMountedDivicePortBusNo(const QString& strSerial)
{
    qDebug() << "LCore:getMountedDivicePortBusNo::3:: Start  arg" << strSerial;
    QProcess proc;
    proc.start("/usr/os-bin/usb-devices");
    proc.waitForFinished(-1);

    QString strOutput = proc.readAll();
    QString strBusNo = "";
    QString strPortNo = "";
    QStringList strOutputList = strOutput.split("T:");

    if(!strOutputList.isEmpty())
    {
        foreach(const QString& strLineN, strOutputList)
        {
            QString str = strLineN;
            QString strDeviceInfo = str.prepend("T:").trimmed();
            QStringList strInfo = strDeviceInfo.split("\n");

            if(!strInfo.isEmpty())
            {
                QString strBusPort, strSerialNumber;

                foreach(const QString& strLine, strInfo)
                {
                    if(strLine.startsWith("T:"))
                    {
                        strBusPort = strLine.trimmed();
                    }
                    else if(strLine.contains("SerialNumber"))
                    {
                        strSerialNumber = strLine.section("=", 1);

                        if(strSerialNumber == strSerial)
                        {
                            QStringList strList = strBusPort.split(" ");

                            foreach(const QString& strBusPortN, strList)
                            {
                                if(strBusPortN.contains("Bus") && strBusPortN.contains("="))
                                {
                                    strBusNo = strBusPortN.section("=", 1);
                                }
                                else if(strBusPortN.contains("Port") && strBusPortN.contains("="))
                                {
                                    strPortNo = strBusPortN.section("=", 1);
                                }
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
    qDebug() << "LCore:getMountedDivicePortBusNo::3:: returns  Bus : " << strBusNo  << " Port : "<< strPortNo;
    qDebug() << "LCore:getMountedDivicePortBusNo::3:: End";
    return QStringList() << strBusNo << strPortNo;
}

void LCore::backupDomain(const QString& strCondition)
{
    qDebug() << "LCore:backupDomain::3:: Start   arg : " << strCondition;
    if(strCondition == QString("READ"))
    {
        backupDomainDetailseAndjoinADS(QString("READ"));

        if(QFile::exists(QString("/tmp/ADSDetailsFile")))
        {
            int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

            if(!QFile::copy(QString("/tmp/ADSDetailsFile"), QString("/sda1/data/.ADSDetailsFile")))
            {
                QProcess::execute(QString("cp"), QStringList() << "-Parf" << QString("/tmp/ADSDetailsFile") <<  QString("/sda1/data/.ADSDetailsFile"));
            }

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
        }
    }
    else if(strCondition == QString("WRITE"))
    {
        if(QFile::exists(QString("/sda1/data/.ADSDetailsFile")))
        {
            int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

            if(!QFile::copy( QString("/sda1/data/.ADSDetailsFile"), QString("/tmp/ADSDetailsFile")))
            {
                QProcess::execute(QString("cp"), QStringList() << "-Parf" <<  QString("/sda1/data/.ADSDetailsFile") << QString("/tmp/ADSDetailsFile"));
            }

            backupDomainDetailseAndjoinADS(QString("WRITE"));

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
        }
    }
    else        //REMOVE
    {
        if(QFile::exists(QString("/sda1/data/.ADSDetailsFile")))
        {
            int status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");

            if(!QFile::remove( QString("/sda1/data/.ADSDetailsFile")))
            {
                QProcess::execute(QString("rm "), QStringList() << "-rf" <<  QString("/sda1/data/.ADSDetailsFile"));
            }

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
        }
    }
    qDebug() << "LCore:backupDomain::3:: End";
}

void LCore::backupDomainDetailseAndjoinADS(const QString& strCondition)
{
    qDebug() << "LCore:backupDomainDetailseAndjoinADS::3:: Start   Arg" << strCondition;
    QFile adsDetailsFile(QString("/tmp/ADSDetailsFile"));

    if(strCondition == "READ")
    {
        if(isTableExists("ADSSettings"))
        {
            QStringList strUserName = readTable("SysConf", "Property='ADSUsername'", "Value");
            QStringList strPassword = readTable("SysConf", "Property='ADSPassword'", "Value");
            QStringList strDomain =  readTable("SysConf", "Property='Domain'", "Value");

            if(!strUserName.isEmpty() && !strPassword.isEmpty() && !strDomain.isEmpty())
            {
                QString organisationUnit;
                QStringList list = readTable("ADSSettings", "", "OU");
                if(list.count() && !list.isEmpty())
                {
                    organisationUnit=list.at(0);
                }

                if(adsDetailsFile.open(QIODevice::WriteOnly | QIODevice::Text))
                {
                    QTextStream out(&adsDetailsFile);
                    out << QString("Username=") << strUserName.at(0) << QString("\n");
                    out << QString("Password=") << encryptDecryptString(strPassword.at(0) ,0) << QString("\n");
                    out << QString("Domain=") << strDomain.at(0) << QString("\n");
                    out << QString("ComputerName=") << organisationUnit << QString("\n");
                    adsDetailsFile.close();
                }
            }
        }
    }
    else
    {
        if(adsDetailsFile.exists() && adsDetailsFile.size() != 0)
        {
            QString strUserName, strPassword, strDomain, strComputerName;
            if(adsDetailsFile.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                QTextStream network(&adsDetailsFile);
                while(!network.atEnd())
                {
                    QString strLine = network.readLine().trimmed();

                    if(strLine.contains("Username"))
                    {
                        strUserName =  strLine.section("=", 1);
                    }
                    else if(strLine.contains("Password"))
                    {
                        QString str =  strLine.section("=", 1);
                        strPassword = encryptDecryptString(str ,1);
                    }
                    else if(strLine.contains("Domain"))
                    {
                        strDomain =  strLine.section("=", 1);
                    }
                    else if(strLine.contains("ComputerName"))
                    {
                        strComputerName =  strLine.section("=", 1);
                    }
                }
                adsDetailsFile.close();
            }
            sync();

            if(!strUserName.isEmpty() && !strPassword.isEmpty() && !strDomain.isEmpty() )
            {
                if(ADSJoinOnLogin( strUserName, strPassword, strDomain, strComputerName))
                {
                    qDebug() << "LCore:backupDomainDetailseAndjoinADS::3:: ADS joined.";
                    backupDomain(QString("DELETE"));
                }
            }
            adsDetailsFile.remove();
        }
    }
    qDebug() << "LCore:backupDomainDetailseAndjoinADS::3:: End";
}

QString LCore::getLSUSBOutput(QString strFirstKeyWord, QString strSecondKeyWord)
{
    qDebug() << "LCore:getLSUSBOutput::3:: Start.";
    qDebug() << "LCore:getLSUSBOutput::3:: Args     strFirstKeyWord : " << strFirstKeyWord << " strSecondKeyWord : " << strSecondKeyWord;
    QString line;
    QProcess *proc = new QProcess();
    proc->start("lsusb");
    proc->waitForFinished(-1);
    while (!proc->atEnd())
    {
        if((line=proc->readLine()).contains(strFirstKeyWord))
        {
            if((!strSecondKeyWord.isEmpty()) && (!line.contains(strSecondKeyWord)))
            {
                line = "";
            }
            break;
        }
    }
    delete proc;
    qDebug() << "LCore:getLSUSBOutput::3:: return vcard = " << line;
    return line;
}

// cppcheck-suppress unusedFunction
void LCore::checkAndCallForDisplayLink()
{
    qDebug() << "LCore:checkAndCallForDisplayLink::3:: Start.";
    QString strLinkDetails = getLSUSBOutput("DisplayLink", "17e9");

    if(!strLinkDetails.isEmpty() )
    {
        if(QFile::exists(CONFIG_FILE))
        {
            QStringList strDisplayList = readTable("DisplaySettings" , "");
            QString strSecResolution = "1440x900";
            QString strSecRefreshRate = "75.0";

            if(!strDisplayList.isEmpty())
            {
                strSecResolution = strDisplayList.at(9);
                strSecRefreshRate = strDisplayList.at(11);
            }

            if(getScreenCount() > 1)
            {
                //QStringList strResolutionAndRefersh = getMaximumResolutionAndRefreshRate(liblcore.getDisplayDevice("Device2"));
                QStringList strResolutionAndRefersh = getMaximumResolutionAndRefreshRate(getDisplayDevice("Device2"));
                if(!strResolutionAndRefersh.isEmpty() && strResolutionAndRefersh.count() > 1)
                {
                    strSecResolution = strResolutionAndRefersh.at(0);
                    strSecRefreshRate = strResolutionAndRefersh.at(1);
                }

                if(strSecResolution != strDisplayList.at(9))
                {
                    updateTable("DisplaySettings", QStringList() << "SecondDisplayResolution='"+ strSecResolution +"'" << "SecondDisplayRefreshRate='"+ strSecRefreshRate+"'", "");
                }
            }
        }

        if(QFile::exists("/tmp/.rcSCalled"))
        {
            system("rm -rf /tmp/.rcSCalled");
            if(checkrunningProcService("DisplayLinkManager"))
            {
                qDebug() << "LCore:checkAndCallForDisplayLink::3:: Called startup 12";
                QProcess::execute(QString("/usr/os-bin/startup"), QStringList("12"));
            }
            else
            {
                qDebug() << "LCore:checkAndCallForDisplayLink::3:: Called udev";
                QProcess::execute(QString("/opt/displaylink/udev.sh"));
            }
        }
        else
        {
            qDebug() << "LCore:checkAndCallForDisplayLink::3:: else condition of rcS";
            if(!checkrunningProcService("DisplayLinkManager"))
            {
                QProcess::startDetached(QString("/opt/displaylink/DisplayLinkManager"));
            }

            QProcess proc;
            QString cmd = "/bin/sh -c \"ls /sys/class/drm/* | grep DVI\"";
            int nCount = 8;
            int nExitCode = 1;
            while (nCount > 0)
            {
                proc.start(cmd.toLatin1());
                proc.waitForFinished(-1);
                nExitCode = proc.exitCode();
                if(nExitCode != 0)
                    ::sleep(2);
                else
                    break;
                nCount--;
            }

            if(nExitCode == 0)
            {
                QProcess::execute(QString("/usr/os-bin/startup"), QStringList("12"));
            }
        }
    }
    qDebug() << "LCore:checkAndCallForDisplayLink::3:: End.";
}

// cppcheck-suppress unusedFunction
QMap<QString, QStringList> LCore::getMonitorList()
{
    qDebug()<<"LCore::getMonitorList::3::start";
    QMap<QString,QString> mapCardDriver;
    mapCardDriver = getCardDriverMap();
    QStringList strlistMonitor;
    QList<QStringList> ListData;

    QProcess proc;
    proc.start("xrandr.orig", QStringList()<<"--verbose");
    proc.waitForFinished(-1);
    QString strError = proc.readAllStandardError();
    QList<QStringList> listPosition;
    listPosition.clear();

    if(strError.isEmpty())
    {
        while(!proc.atEnd())
        {
            QString strline = proc.readLine();

            if(strline.contains(" connected "))
            {
                QStringList strlistStore;
                QString strMonitor = strline.section(" connected ",0,0);
                QString strTempN = strline.section(" ",2,2);
                bool isPrimary = false;

                if(strline.contains("primary"))
                {
                    strTempN.clear();
                    strTempN = strline.section(" ",3,3);
                    isPrimary = true;
                }
                else
                {
                    isPrimary = false;
                }

                QString strTempResolution = strTempN.section("+",0,0);
                QString strX = strTempN.section("+",1,1);
                QString strY = strTempN.section("+",2,2);
                strlistStore.append(strMonitor);
                qDebug()<<"LCore::getMonitorList::3::strMonitor"<<strMonitor;
                strlistMonitor.append(strMonitor);

                if(mapCardDriver.count())
                {
                    qDebug()<<"LCore::getMonitorList::3::in card count";
                    int ndeshCount = strMonitor.count(QLatin1Char('-'));
                    if(!ndeshCount)
                    {
                        ndeshCount = 1;
                    }

                    QString strDriver = mapCardDriver.value(QString("card"+QString::number(ndeshCount - 1)+""));
                    qDebug()<<"LCore::getMonitorList::3::strdriver::"<<strDriver;
                    strlistStore.append(strDriver);
                }
                else
                {
                    strlistStore.append("");
                }

                strlistStore.append(strTempResolution);
                strlistStore.append(strX+","+strY);
                QString strBright,strGamma;
                QStringList strlistBright;

                while(!proc.atEnd())
                {
                    QString strEDID = proc.readLine().trimmed();
                    if(strEDID.contains("Brightness"))
                    {
                        strBright = strEDID.section("Brightness:",1,1).trimmed();
                        strlistBright.append(strBright);
                        qDebug()<<"LCore::getMonitorList::3::brightness::"<<strBright;
                    }
                    if(strEDID.contains("Gamma"))
                    {
                        QString strR,strG,strB,strDummy;
                        strDummy = strEDID.section("Gamma",1,1).trimmed();
                        strR = strDummy.section(":",1,1).trimmed();
                        strG = strDummy.section(":",2,2).trimmed();
                        strB = strDummy.section(":",3,3).trimmed();
                        strGamma = strR+","+strG+","+strB;
                        qDebug()<<"LCore::getMonitorList::3::strgamma::"<<strGamma;
                    }

                    if(strEDID.contains("EDID:"))
                    {
                        QFile file("/tmp/"+strMonitor);
                        if(file.open(QIODevice::WriteOnly))
                        {
                            QTextStream out(&file);
                            for(int i=0; i<8; i++)
                            {
                                QString strTemp = proc.readLine();
                                out<<strTemp.trimmed();
                            }
                            file.close();
                            break;
                        }
                    }
                }

                strlistStore.append(strBright);
                strlistStore.append(strGamma);
                strlistStore.append(isPrimary?"0":"1");
                qDebug()<<"LCore::getMonitorList::3::strlistStore::"<<strlistStore;
                ListData.append(strlistStore);
            }
        }
    }

    QMap<QString,QStringList> mapMonitor;
    QStringList strlistScreen;

    for(int i=0,j=0; i<strlistMonitor.count(); i++)
    {
        QProcess procn;
        QStringList strlistcmd;
        strlistcmd.append("/tmp/"+strlistMonitor.at(i));
        procn.start("/usr/os-bin/edid-decode",strlistcmd);
        procn.waitForFinished(-1);

        if(procn.readAllStandardError().trimmed().isEmpty())
        {
            while(!procn.atEnd())
            {
                QString strLine = procn.readLine();

                if(strLine.contains("Manufacturer") && strLine.contains("Serial Number"))
                {
                    QString strTemp = strLine.remove("Manufacturer:").trimmed();
                    QString strMonitor1 = strTemp.section("Serial Number",0,0).trimmed();
                    QString strSerial = strTemp.section("Serial Number",1,1).trimmed();
                    QString strMonitor = strMonitor1+"(SN:"+strSerial+")";
                    qDebug()<<"LCore::getMonitorList::3::strMonitorName:"<<strMonitor;
                    strlistScreen.append(strMonitor);
                    QStringList strValue;
                    strValue = ListData.at(j++);
                    qDebug()<<"LCore::getMonitorList::3::strValue:"<<strValue;
                    strValue << strMonitor;
                    mapMonitor.insert(strMonitor,strValue);
                }
            }
        }
    }

    qDebug()<<"LCore::getMonitorList::3::MapMonitor::"<<mapMonitor;
    qDebug()<<"LCore::getMonitorList::3::End";
    return mapMonitor;
}

QString LCore::getDefaultRefreshrate(const QString& strMonitor, const QString& setResolution)
{
    qDebug()<<"LCore::getDefaultRefreshrate::3::start";
    qDebug()<<"LCore::getDefaultRefreshrate::3::strMonitor::"<<strMonitor;
    qDebug()<<"LCore::getDefaultRefreshrate::3::strResolution::"<<setResolution;
    QStringList resolutionList;
    resolutionList  = getMultiMonitorResolutionList(strMonitor);
    QString line;
    QStringList lines;

    for (int i = 0; i < resolutionList.size(); ++i)
    {
        if(resolutionList.at(i).section(" ",0,0) == setResolution)
        {
            line = resolutionList.at(i);
        }
    }

    for(int i=1; i <= line.count(" "); ++i)
    {
        QString rate = line.section(" ",i,i).replace("*","").replace("+","");

        if(!rate.isEmpty())
        {
            lines += rate;
        }
    }

    if(lines.count() == 0)
    {
        lines << QString("60.0");
    }

    QString strRefreshrate = lines.at(0);

    qDebug()<<"LCore::getDefaultRefreshrate::3::return::strRefreshrate::"<<strRefreshrate;
    qDebug()<<"LCore::getDefaultRefreshrate::3::End";
    return strRefreshrate;
}

// cppcheck-suppress unusedFunction
void LCore::installSignal(int nsig)
{
    if(nsig ==  SIGSEGV)
    {
        struct sigaction sigact;
        sigact.sa_sigaction = crit_err_hdlr;
        sigact.sa_flags = SA_RESTART | SA_SIGINFO;

        if (sigaction(SIGSEGV, &sigact, (struct sigaction *)NULL) != 0)
        {
            fprintf(stderr, "error setting signal handler for %d (%s)\n", SIGSEGV, strsignal(SIGSEGV));
        }
    }
}

void LCore::ModifyXorgFileForScreenOLD()
{
    qDebug() << "LCore:ModifyXorgFileForScreen::3:: Start.";

    if(qgetenv("BOARDARCH") == "via-arm")
    {
        driverConfirmation();

        if(qgetenv("BOARDTYPE") == "jseries")
            writeXORGForARM();
        else
            ModifyXorgForArm();
        return;
    }

    if(isTableExists(QString("DisplaySettings")))
    {
        QString output3 = getDisplayDevice("Device3");
        QString output4 = getDisplayDevice("Device4");

        driverConfirmation();

        int strAccelValue = 0;
        QStringList listAcceleration = readTable("SysConf", "Property='Acceleration'", "Value");
        if(listAcceleration.count())
            strAccelValue = QString(listAcceleration.at(0)).toInt();

        QStringList data = readTable(QString("DisplaySettings"), "");
        if(!data.isEmpty())
        {
            if(qgetenv("OSPROJECT") == "McD")
                ModifyXorgFileForScreenMcD(data, strAccelValue);

            //======================================================

            QStringList lines;
            QString line;

            // =================== screen section =====================
            line = "Section \"Screen\"";
            lines += line;

            line = "\tIdentifier\t\"Screen0\"";
            lines += line;

            line = "\tMonitor\t\"Monitor1\"";
            lines += line;

            if(data.at(0) == "vesa")    //22Apl-maithili
            {
                line = "\tSubSection \"Display\"";
                lines += line;
                line = "\t\tModes\t\"" + data.at(2) + "\"";
                lines += line;
                line = "\tEndSubSection";
                lines += line;
            }
            if(data.at(0) != "vesa")       //21Apl-maithili
            {
                line = "\tDefaultDepth\t" + data.at(1);
                lines += line;
            }

            line  = "EndSection";
            lines += line;
            lines += "\n";
            // =========================================================

            // =================== Module section ======================
            if(data.at(0) == "pvr")
            {
                line = "Section \"Module\"";
                lines += line;

                line = "\tDisable \"dri\"";
                lines += line;

                line = "\tDisable \"dri2\"";
                lines += line;

                line = "\tDisable \"glx\"";
                lines += line;

                line  = "EndSection";
                lines += line;
                lines += "\n";
            }

            bool bmodeDrivercheck = false;
            //==========================================================

            // =================== Device section =====================
            line = "Section \"Device\"";
            lines += line;

            line = "\tIdentifier\t\"Card0\"";
            lines += line;

            if(getOSDetails(QString(SDA1OSBUILD)).contains("EAD", Qt::CaseInsensitive))
                line = "\tDriver\t\"" + data.at(0) + "\"";
            else
            {
                if(QFile::exists(QString("/usr/lib/xorg/modules/drivers/modesetting_drv.so")))   // for VM  GV-OS image
                {
                    bmodeDrivercheck = true;
                    line = "\tDriver      \"modesetting\"";
                }
                else
                    line = "\tDriver\t\"" + data.at(0) + "\"";
            }

            lines += line;

            if(!data.at(12).simplified().isEmpty())
            {
                line = "\tOption\t\"monitor-" + data.at(12) + "\"\t\"Monitor1\"";
                lines += line;
            }

            if(!data.at(13).simplified().isEmpty())
            {
                line = "\tOption\t\"monitor-" + data.at(13) + "\"\t\"Monitor2\"";
                lines += line;
            }

            if(!output3.simplified().isEmpty())
            {
                line = "\tOption\t\"monitor-" + output3 + "\"\t\"Monitor3\"";
                lines += line;
            }

            if(!output4.simplified().isEmpty())
            {
                line = "\tOption\t\"monitor-" + output4 + "\"\t\"Monitor4\"";
                lines += line;
            }

            if(!bmodeDrivercheck) //if  drive=modesetting then not to write these parameter as told by prashat sir  Sat Jan  5 10:15:25 IST 2019
            {
                if(data.at(0) == "pvr" || data.at(0) == "via" || data.at(0) == "radeon")
                {
                    if(data.at(0) != "radeon")
                    {
                        if(strAccelValue)
                            line = "\tOption\t\"Accel\"\t\"true\"";
                        else
                            line = "\tOption\t\"Accel\"\t\"false\"";
                        lines += line;

                        line = "\tOption\t\"DRIDisableVSync\"\t\"false\"";
                        lines += line;

                        line = "\tOption\t\"SoftEXA\"\t\"off\"";
                        lines += line;

                        line = "\tOption\t\"FlipChain\"\t\"on\"";
                        lines += line;

                        line = "\tVideoRam\t4096";
                        lines += line;
                    }
                    else
                    {
                        line = "\tOption\t\"Accel\"\t\"true\"";
                        lines += line;

                        line = "\tOption\t\"AccelMethod\"\t\"EXA\"";
                        lines += line;

                        line = "\tOption\t\"ColorTiling\"\t\"on\"";
                        lines += line;

                        line = "\tOption\t\"EnablePageFlip\"\t\"on\"";
                        lines += line;

                        line = "\tVideoRam\t4096";
                        lines += line;

                        line = "\tOption\t\"AGPFastWrite\"\t\"on\"";
                        lines += line;
                    }
                }
                if(data.at(0) == "intel" && (getOSDetails(QString(OSBUILD_FILE)).contains("DS", Qt::CaseInsensitive) || getCPUname().contains("N3050") || (getCPUname().contains("N3000") || isLM600(getLenovoMT()))))  ///
                {
                    line = "\tOption\t\"NOAccel\"\t\"false\"";
                    lines += line;

                    line = "\tOption\t\"AccelMethod\"\t\"SNA\"";
                    lines += line;

                    line = "\tOption\t\"SwapbuffersWait\"\t\"true\"";
                    lines += line;

                    line = "\tOption\t\"TearFree\"\t\"true\"";
                    lines += line;

                    line = "\tOption\t\"PageFlip\"\t\"true\"";
                    lines += line;

                    line = "\tOption\t\"Tiling\"\t\"true\"";
                    lines += line;
                    if(getCPUname().contains("N3000") || isLM600(getLenovoMT()))
                    {
                        line = "\tOption\t\"DRI\"\t\"true\"";
                        lines += line;
                    }
                }

                if(  getVGAcard().contains("Nvdia", Qt::CaseInsensitive) ||  getVGAcard().contains("NVIDIA", Qt::CaseInsensitive) || getVGAcard().contains("radeon", Qt::CaseInsensitive) || getVGAcard().contains("Stoney", Qt::CaseInsensitive) || getVGAcard().contains("Carrizo", Qt::CaseInsensitive) || getVGAcard().contains("Baffin", Qt::CaseInsensitive) || getVGAcard().contains("98e4", Qt::CaseInsensitive) || getVGAcard().contains("15d8", Qt::CaseInsensitive) || getVGAcard().contains("Picasso", Qt::CaseInsensitive) || getVGAcard().contains("Barcelo", Qt::CaseInsensitive) || getVGAcard().contains("15e7", Qt::CaseInsensitive))
                {
                    if(!getVGAcard().contains("radeon", Qt::CaseInsensitive))
                    {
                        line = "\tOption\t\"EnablePageFlip\"\t\"on\"";
                        lines += line;
                    }

                    line = "\tOption\t\"TearFree\"\t\"on\"";
                    lines += line;

                    line = "\tOption\t\"AccelMethod\"\t\"glamor\"";
                    lines += line;

                    QStringList strListShadowPrimaryOff = readDefaultsValue("ShadowPrimaryOff");
                    if((!strListShadowPrimaryOff.isEmpty() && strListShadowPrimaryOff.at(0) == "1") || getVGAcard().contains("15d8", Qt::CaseInsensitive) || getVGAcard().contains("Picasso", Qt::CaseInsensitive) ||  getVGAcard().contains("Stoney", Qt::CaseInsensitive) || getVGAcard().contains("98e4", Qt::CaseInsensitive))
                    {
                        line = "\tOption\t\"ShadowPrimary\"\t\"off\"";
                        lines += line;
                    }
                    else
                    {
                        line = "\tOption\t\"ShadowPrimary\"\t\"on\"";
                        lines += line;
                    }
                }

                QString strBoardSeries;
                strBoardSeries=getVGAcard().trimmed();
                if (data.at(0) == "intel" && (strBoardSeries.contains("Z36xxx") || strBoardSeries.contains("Z37xxx")))
                {
                    line = "\tOption\t\"AccelMethod\"\t\"uxa\"";
                    lines += line;

                    line = "\tOption\t\"TearFree\"\t\"true\"";
                    lines += line;

                    line = "\tOption\t\"TripleBuffer\"\t\"true\"";
                    lines += line;
                }
            }

            line  = "EndSection";
            lines += line;
            lines += "\n";
            // =========================================================


            // =================== Monitor section =====================
            line = "Section \"Monitor\"";
            lines += line;

            line = "\tIdentifier\t\"Monitor1\"";
            lines += line;

            QString rotation;
            if(data.at(3) == "Inverted")
                rotation = "inverted";
            else if(data.at(3) == "Clockwise")
                rotation = "right";
            else if(data.at(3) == "Anti-clockwise")
                rotation = "left";
            else
                rotation = "normal";

            line = "\tOption\t\"Rotate\"\t\"" + rotation + "\"";
            lines += line;

            line = "\tOption\t\"PreferredMode\"\t\"" + data.at(2) + "\"";
            lines += line;

            line = "\tOption\t\"Primary\"\t\"true\"";
            ///line = "\tOption\t\"Primary\"\t\""+QString((bScr1Primary)?"true":"false")+"\"";   /// 1st March
            lines += line;

            line  = "EndSection";
            lines += line;
            lines += "\n";
            // =========================================================

            //if(!data.at(13).simplified().isEmpty())
            {
                // =================== Monitor section =====================
                line = "Section \"Monitor\"";
                lines += line;

                line = "\tIdentifier\t\"Monitor2\"";
                lines += line;

                QString rotationDual;
                if(data.at(10) == "Inverted")
                    rotationDual = "inverted";
                else if(data.at(10) == "Clockwise")
                    rotationDual = "right";
                else if(data.at(10) == "Anti-clockwise")
                    rotationDual = "left";
                else
                    rotationDual = "normal";

                if(data.at(6) == "independent" || data.at(6) == "extended")
                    line = "\tOption\t\"Rotate\"\t\"" + rotationDual + "\"";
                else
                    line = "\tOption\t\"Rotate\"\t\"" + rotation + "\"";
                lines += line;

                if(data.at(6) == "independent" || data.at(6) == "extended")
                    line = "\tOption\t\"PreferredMode\"\t\"" + data.at(9) + "\"";
                else
                    line = "\tOption\t\"PreferredMode\"\t\"" + data.at(2) + "\"";
                lines += line;

                /// line = "\tOption\t\"Primary\"\t\""+QString((bScr1Primary)?"false":"true")+"\"";
                /// lines += line;

                QString screenPosition;
                if(data.at(7) == "above")
                    screenPosition = "above";
                else if(data.at(7) == "below")
                    screenPosition = "below";
                else if(data.at(7) == "right")
                    screenPosition = "rightof";
                else
                    screenPosition = "leftof";

                //   screenPosition = "rightof";
                if(data.at(6) == "extended")
                {
                    line = "\tOption\t\"" + screenPosition + "\"\t\"Monitor1\"";
                    lines += line;
                }

                line  = "EndSection";
                lines += line;
                lines += "\n";

                // =================== Monitor section =====================
                if(output3.isEmpty() == false)
                {
                    line = "Section \"Monitor\"";
                    lines += line;

                    line = "\tIdentifier\t\"Monitor3\"";
                    lines += line;

                    QString rotationDualN;
                    if(data.at(10) == "Inverted")
                        rotationDualN = "inverted";
                    else if(data.at(10) == "Clockwise")
                        rotationDualN = "right";
                    else if(data.at(10) == "Anti-clockwise")
                        rotationDualN = "left";
                    else
                        rotationDualN = "normal";

                    if(data.at(6) == "independent" || data.at(6) == "extended")
                        line = "\tOption\t\"Rotate\"\t\"" + rotationDualN + "\"";
                    else
                        line = "\tOption\t\"Rotate\"\t\"" + rotation + "\"";
                    lines += line;

                    QPair <QString , QString> pairHighestResRate = getHighestResolution(3);
                    if(data.at(6) == "independent" || data.at(6) == "extended")
                        line = "\tOption\t\"PreferredMode\"\t\"" + pairHighestResRate.first + "\"";
                    else
                        line = "\tOption\t\"PreferredMode\"\t\"" + data.at(2) + "\"";
                    lines += line;

                    QString screenPositionN;
                    if(data.at(7) == "above")
                        screenPositionN = "above";
                    else if(data.at(7) == "below")
                        screenPositionN = "below";
                    else if(data.at(7) == "right")
                        screenPositionN = "rightof";
                    else
                        screenPositionN = "leftof";

                    //   screenPosition = "rightof";
                    if(data.at(6) == "extended")
                    {
                        line = "\tOption\t\"" + screenPositionN + "\"\t\"Monitor2\"";
                        lines += line;
                    }


                    line  = "EndSection";
                    lines += line;
                    lines += "\n";
                }
                // =========================================================

                if(output4.isEmpty() == false)
                {
                    line = "Section \"Monitor\"";
                    lines += line;

                    line = "\tIdentifier\t\"Monitor4\"";
                    lines += line;

                    QString rotationDualN;
                    if(data.at(10) == "Inverted")
                        rotationDualN = "inverted";
                    else if(data.at(10) == "Clockwise")
                        rotationDualN = "right";
                    else if(data.at(10) == "Anti-clockwise")
                        rotationDualN = "left";
                    else
                        rotationDualN = "normal";

                    if(data.at(6) == "independent" || data.at(6) == "extended")
                        line = "\tOption\t\"Rotate\"\t\"" + rotationDualN + "\"";
                    else
                        line = "\tOption\t\"Rotate\"\t\"" + rotation + "\"";
                    lines += line;

                    QPair <QString , QString> pairHighestResRate = getHighestResolution(4);
                    if(data.at(6) == "independent" || data.at(6) == "extended")
                        line = "\tOption\t\"PreferredMode\"\t\"" + pairHighestResRate.first + "\"";
                    else
                        line = "\tOption\t\"PreferredMode\"\t\"" + data.at(2) + "\"";
                    lines += line;

                    QString screenPositionN;
                    if(data.at(7) == "above")
                        screenPositionN = "above";
                    else if(data.at(7) == "below")
                        screenPositionN = "below";
                    else if(data.at(7) == "right")
                        screenPositionN = "rightof";
                    else
                        screenPositionN = "leftof";

                    //   screenPosition = "rightof";
                    if(data.at(6) == "extended")
                    {
                        line = "\tOption\t\"" + screenPositionN + "\"\t\"Monitor3\"";
                        lines += line;
                    }


                    line  = "EndSection";
                    lines += line;
                    lines += "\n";
                }
                // =========================================================



                if(data.at(0) == "radeon")    /// Added  Extensions section fot radeon driver on 24 Jan 2017
                {
                    line = "Section \"Extensions\"";
                    lines += line;

                    line ="\tOption\t\"Composite\"\t\"Enable\"";
                    lines += line;

                    line ="\tOption\t\"RENDER\"\t\"Enable\"";
                    lines += line;

                    line  = "EndSection";
                    lines += line;
                    lines += "\n";
                }

                // =========================================================
                if((data.at(0) == "intel" && (getCPUname().contains("N3000") || isLM600(getLenovoMT()))) || (data.at(0) == "radeon"))  /// DRI Section should be write for 'radeon driver' on 24 Jan 2017
                {
                    line = "Section \"DRI\"";
                    lines += line;

                    if(data.at(0) == "radeon")    /// Added Group parameter for radeon driver on 24 Jan 2017
                    {
                        line = "\tGroup\t\"Video\"";
                        lines += line;
                    }

                    line = "\tMode\t0666";
                    lines += line;
                    line  = "EndSection";
                    lines += line;
                    lines += "\n";
                }
            }

            QFile file(XORGCONF_FILE);
            if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
                return;

            QTextStream out(&file);
            for (int i = 0; i < lines.size(); ++i)
                out << lines.at(i) << "\n";

            file.close();
            sync();
        }
    }
    else
        changeDisplayDriver();
    qDebug() << "LCore:ModifyXorgFileForScreen::3:: End.";

}

void LCore::driverConfirmation()
{
    qDebug() << "LCore:driverConfirmation::3:: Start.";
    QString setDriver;
    QString colorDepth = "16";
    QStringList data = readTable(QString("DisplaySettings"), "");

    if(!data.isEmpty())
    {
        setDriver = data.at(0);
        colorDepth = data.at(1);
    }
    else
        return;


    if(qgetenv("BOARDARCH") == "via-arm")
        setDriver = "mali";

    if(setDriver == "pvr")
        colorDepth = "24";
    else if(setDriver == "pvr" && colorDepth == "8")
        colorDepth = "24";
    else if(setDriver == "intel" || setDriver == "vesa")
    {
        if(colorDepth == "32")
            colorDepth = "24";
    }
    else if(setDriver == "mali"  && colorDepth == "8")
        colorDepth = "16";

    QString columnType = " DriverName VARCHAR(30) PRIMARY KEY, FirstDisplayColorDepth VARCHAR(30), FirstDisplayResolution VARCHAR(30), FirstDisplayRotation VARCHAR(30), FirstDisplayRefreshRate VARCHAR(30), DualDisplayEnable INTEGER, DisplayMode VARCHAR(30), ScreenPosition VARCHAR(5),SecondDisplayColorDepth VARCHAR(30), SecondDisplayResolution VARCHAR(30), SecondDisplayRotation VARCHAR(30), SecondDisplayRefreshRate VARCHAR(30), DeviceFirst VARCHAR(30), DeviceSecond VARCHAR(30)";

    QString strFirst, strSecond;
    QStringList strDeviceList;

    QFile file(QString("/root/.DisplayDevice"));
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
    {
        QTextStream in(&file);
        while (!in.atEnd())
        {
            QString line = in.readLine();
            if(line.startsWith("DeviceFirst"))
                strFirst = line.section("=",1,1);
            else if(line.startsWith("DeviceSecond"))
                strSecond = line.section("=",1,1);
        }
        file.close();
        strDeviceList << strFirst << strSecond;
    }

    /// Changes for Dual Display @ 5 April 2017
    QString values;
    if(QFile::exists("/tmp/swapDisplay"))
    {
        values = " '" + setDriver + "', '" + colorDepth + "', '" + data.at(2) +"', '"+ data.at(3) +"', '"+ data.at(4) +"', '"+ data.at(5) +"', '"+ data.at(6) +"', '"+ data.at(7) + "','" + data.at(8) + "', '"+data.at(9)+"', '"+data.at(10)+"', '"+data.at(11)+"', '"+ getDisplayDevice("Device2")+"', '"+getDisplayDevice("Device1")+"' ";
        qDebug() << "LCore:driverConfirmation::3:: in modify file driver confirmation = " << values;
        QFile::remove("/tmp/swapDisplay");
    }
    else if(strDeviceList.contains(getDisplayDevice("Device1")) && strDeviceList.contains(getDisplayDevice("Device2")))
        values = " '" + setDriver + "', '" + colorDepth + "', '" + data.at(2) +"', '"+ data.at(3) +"', '"+ data.at(4) +"', '"+ data.at(5) +"', '"+ data.at(6) +"', '"+ data.at(7) + "','" + data.at(8) + "', '"+data.at(9)+"', '"+data.at(10)+"', '"+data.at(11)+"', '"+strFirst+"', '"+strSecond+"' ";
    else
        values = " '" + setDriver + "', '" + colorDepth + "', '" + data.at(2) +"', '"+ data.at(3) +"', '"+ data.at(4) +"', '"+ data.at(5) +"', '"+ data.at(6) +"', '"+ data.at(7) + "','" + data.at(8) + "', '"+data.at(9)+"', '"+data.at(10)+"', '"+data.at(11)+"', '"+ getDisplayDevice("Device1")+"', '"+getDisplayDevice("Device2")+"' ";


#ifdef Q_OS_LINUX
    qDebug() << writeTable(QString("DisplaySettings"), columnType, values, QString(""));
#else
    qDebug() << writeTable(retquery(), QString("DisplaySettings"), columnType, values, QString(""));
#endif
    qDebug() << "LCore:driverConfirmation::3:: End.";
}

QStringList LCore::readAndWriteFile(const QString& strFileName, const QString& strRWCondition, const QStringList& strWriteList, const QString& strReadCondition, const QString& strWriteCondition )
{
    qDebug() << "LCore:readAndWriteFile::3::Start";
    qDebug() << "LCore:readAndWriteFile::3:: Arguments => File Name : " << strFileName << "  RWCondition : " << strRWCondition << "\nWriteList : " << strWriteList << " ReadCondition : " << strReadCondition << " WriteCondition : " << strWriteCondition;
    QStringList strReturnList;

    QFile file( strFileName );
    if(strRWCondition == QString("READ"))
    {
        if (file.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&file);
            while (!in.atEnd())
            {
                QString ln = in.readLine().trimmed();

                if(!strReadCondition.isEmpty() && ln.contains(strReadCondition))
                {
                    strReturnList.clear();
                    strReturnList << ln;
                    break;
                }
                else
                {
                    strReturnList << ln;
                }
            }
            file.close();
            sync();
        }
    }
    else if(strRWCondition == QString("WRITE"))
    {
        int status;
        if(strFileName.startsWith("/sda1"))
        {
            status = access(FIRSTPARTITIONMOUNTPOINT, W_OK);

            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_NODEV, "");
        }

        if(QFile::exists(strFileName) && !strWriteCondition.isEmpty())
        {
            QString tmpFile = "/tmp/.duMMyFiLe";
            QFile UpdatedDebugLogFile(tmpFile);
            if(file.open(QIODevice::ReadOnly | QIODevice::Text))
            {
                if(UpdatedDebugLogFile.open(QIODevice::WriteOnly | QIODevice::Text))
                {
                    bool bAppendCheck = true;
                    QTextStream out(&UpdatedDebugLogFile);
                    QTextStream in(&file);
                    while(!in.atEnd())
                    {
                        QString line = in.readLine().trimmed();
                        if(line.contains(strWriteCondition))
                        {
                            bAppendCheck = false;
                            foreach(const QString& str , strWriteList)
                            {
                                out << str << "\n";
                            }
                        }
                        else
                        {
                            out << line << "\n";
                        }
                    }

                    if(bAppendCheck)
                    {
                        foreach(const QString& str , strWriteList)
                        {
                            out << str << "\n";
                        }
                    }
                }
                file.close();
                UpdatedDebugLogFile.close();
                strReturnList << "Write Operation Successfull";
            }
            QFile::remove(strFileName);
            QFile::copy(tmpFile,strFileName);
            sync();
            QFile::remove(tmpFile);
        }
        else
        {
            if (file.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&file);

                foreach(const QString& str , strWriteList)
                {
                    out << str << "\n";
                }

                file.close();
                sync();
                strReturnList << "Write Operation Successfull";
            }
        }

        if(strFileName.startsWith("/sda1"))
        {
            if(status != 0)
                mount(FIRSTPARTITIONMOUNTPOINT, FIRSTPARTITIONMOUNTPOINT, "ext3", MS_REMOUNT | MS_RDONLY | MS_NODEV, "");
        }
    }

    qDebug() << "LCore:readAndWriteFile::3:: Ends    returns : " << strReturnList;
    return strReturnList;
}

size_t LCore::writeCallback(char* buf, size_t size, size_t nmemb, void* up)
{ //callback must have this declaration
    //buf is a pointer to the data that curl has for us
    //size*nmemb is the size of the buffer

    for (int c = 0; c<size*nmemb; c++)
    {
        //data.push_back(buf[c]);
        strResponseData.append(buf[c]);
    }
    return size*nmemb; //tell curl how many bytes we handled
}

// cppcheck-suppress unusedFunction
JsonObject LCore::restServerRequest(QString strRequestType, QString strURL, QString strId, QString strLicenseKey, QString strDeviceType)
{
    QFutureWatcher<JsonObject> futurewatcher;
    QFuture<JsonObject> future = QtConcurrent::run(this, &LCore::dummyRestServerRequest, strRequestType, strURL, strId, strLicenseKey, strDeviceType);
    futurewatcher.setFuture(future);
    while(futurewatcher.isRunning())
        qApp->processEvents();

    return future.result();
}

JsonObject LCore::dummyRestServerRequest(QString strRequestType, QString strURL, QString strId, QString strLicenseKey,  QString strDeviceType)
{
    qDebug() << "LCore:readAndWriteFile::3:: Starts" ;
    qDebug() << "LCore:readAndWriteFile::3:: RequestType " << strRequestType ;
    qDebug() << "LCore:readAndWriteFile::3:: URL" << strURL ;
    qDebug() << "LCore:readAndWriteFile::3:: Id " <<  strId;
    qDebug() << "LCore:readAndWriteFile::3:: LicenseKey" <<  strLicenseKey;
    qDebug() << "LCore:readAndWriteFile::3:: DeviceType" << strDeviceType;
    strResponseData.clear();
    strResponseData.clear();

    JsonObject strResult;
    bool bReturn =  false;

    if(strURL.isEmpty() || strRequestType.isEmpty())
        bReturn = true;
    if(strRequestType == QString("POST") && strId.isEmpty() && strLicenseKey.isEmpty())
        bReturn = true;
    else if(strId.isEmpty() && strLicenseKey.isEmpty())
        bReturn = true;

    if(bReturn)
    {
        strResult.insert("response", false);
        strResult.insert("responseStatus", "Please provide required information.");
    }

    QMap<QString,QString> strCredentialsMap = getUrlDataSeperatly(strURL);
    QString strIp = strCredentialsMap.value("Ip");
    QString strServer = strCredentialsMap.value("Server");

    bool bisCheckCertificate = false;
    QStringList  strlistCheckCertificate = readDefaultsValue("CheckCertificate");
    if(strlistCheckCertificate.count() && strlistCheckCertificate.at(0).toInt())
        bisCheckCertificate = true;

    if(bisCheckCertificate)
    {
        strIp = getFTPS_HTTPSSHostnamefromIP(strIp);
        QString strURLPath = QString("%1://%2").arg(strServer, strIp);
        QString strCmd = QString("/usr/os-bin/CertificateManager CertificateInstall %1 1> /tmp/.certout 2> /tmp/.certerr").arg(strURLPath);
        qDebug() << "UpdateDialog:downloadFile::3:: args : strCmd " << strCmd;
        system(strCmd.toLatin1());
    }
    system(QString("echo \" server url     = %1\"  >> /var/log/license.log").arg(strURL ).toLatin1());
    system(QString("echo \" strRequestType = %1\"  >> /var/log/license.log").arg(strRequestType ).toLatin1());
    system(QString("echo \" strLicenseKey  = %1\"  >> /var/log/license.log").arg(strLicenseKey ).toLatin1());
    system(QString("echo \" strId          = %1\"  >> /var/log/license.log").arg(strId ).toLatin1());
    system(QString("echo \" strDeviceType  = %1\"  >> /var/log/license.log").arg(strDeviceType ).toLatin1());

    QString strMethod = strURL.section("/", -1);

    CURL *curl;
    CURLcode res;

    curl = curl_easy_init();

    if(curl)
    {
        FILE *filep = fopen(VERBOSEOUTPUTFILE, "wb");
        curl_easy_setopt(curl, CURLOPT_URL, strURL.toStdString().c_str());
        curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, strRequestType.toStdString().c_str());

        /* if redirected, tell libcurl to follow redirection */
        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);

        struct curl_slist *headers = NULL;
        headers = curl_slist_append(headers, "Content-Type: application/json");
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

        QString str;
        if(strRequestType != QString("POST") && strMethod != QString("getidinfo"))
        {
            if(!strId.isEmpty())
            {
                if(strRequestType == QString("PUT") && strDeviceType.isEmpty())
                    str = "{  \"id\": \""+ strId+"\" }";
                else
                    str = "{  \"id\": \""+ strId+"\", \"deviceType\": \""+ strDeviceType+"\" }";
            }
            else
            {
                if(strRequestType == QString("PUT") && strDeviceType.isEmpty())
                    str = "{  \"licenseKey\": \""+ strLicenseKey+"\" }";
                else
                    str = "{  \"licenseKey\": \""+ strLicenseKey+"\", \"deviceType\": \""+ strDeviceType+"\"}";
            }
        }
        else
        {
            if(strDeviceType.isEmpty() || strMethod == QString("getidinfo"))
                str = QString("{  \"id\": \""+strId+"\",  \"licenseKey\": \""+strLicenseKey+"\" }");
            else
                str = QString("{  \"id\": \""+strId+"\",  \"licenseKey\": \""+strLicenseKey+"\",   \"deviceType\": \""+ strDeviceType +"\"}");
        }

        char *body = strdup(str.toStdString().c_str());

        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeCallback);
        curl_easy_setopt (curl, CURLOPT_VERBOSE, 1L); //remove this to disable verbose output

        if(bisCheckCertificate)
        {
            curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, true);
        }
        else
        {
            curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, false);
        }

        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);
        curl_easy_setopt(curl, CURLOPT_STDERR, filep);              //Redirect verbose output in file.
        curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, 120L);        // connect-time out 17 sec

        /* Perform the request, res will get the return code */
        res = curl_easy_perform(curl);
        if (res != CURLE_OK) {

            qDebug() << "LCore:dummyRestServerRequest::3:: curl error  : " <<  curl_easy_strerror(res);
        }

        /* Clean up after yourself */
        curl_easy_cleanup(curl);
    }

    if(!strResponseData.isEmpty())
    {
        bool bOk;
        JsonObject mapOutput = QtJson::parse(strResponseData, bOk).toMap();

        if(bOk == true)
        {
            system(QString("echo \" rest response  = %1\"  >> /var/log/license.log").arg(mapOutput.value("response").toString() ).toLatin1());
            system(QString("echo \" rest responseStatus  = %1\"  >> /var/log/license.log").arg(mapOutput.value("responseStatus").toString() ).toLatin1());
            strResult = mapOutput;
        }
    }
    strResponseData.clear();
    qDebug() << "LCore:readAndWriteFile::3:: Ends " << strResult.values() ;
    return strResult;
}

// cppcheck-suppress unusedFunction
void LCore::createEnterPasswordUI(QWidget* w, QApplication *a)
{
    qDebug()<<"LCore:createEnterPasswordUI::3:: Starts";

    if(!checkrunningProcService("x11vnc"))
    {
        system(QString(SERVICES_PATH + QString("/x11vnc restart &")).toLatin1());
    }

    widget = w;
    passwordDialog = new QDialog(widget);
    passwordDialog->setFixedSize(340,100);
    setWidgetGeometry(widget, a);
    passwordDialog->setWindowTitle("Terminal Authentication");
    LE_Password = new QLineEdit();

    LE_Password->setGeometry(20,0,200,31);
    LE_Password->setFixedSize(320,27);
    LE_Password->setEchoMode(QLineEdit::Password);
    QPushButton *PB_Show = new QPushButton("Submit");
    QPushButton *PB_Cancel = new QPushButton("Cancel");
    PB_Show->setFixedSize(100, 27);
    PB_Cancel->setFixedSize(100, 27);

    QPixmap pixmap("/usr/os-bin/images/close.png");
    QPixmap pixmapp("/usr/os-bin/images/apply.png");
    QIcon ButtonIcon(pixmap);
    QIcon Button(pixmapp);

    PB_Cancel->setIcon(ButtonIcon);
    PB_Show->setIcon(Button);
    QHBoxLayout* hLayout = new QHBoxLayout;
    hLayout->addWidget(PB_Show);
    hLayout->addWidget(PB_Cancel);

    QVBoxLayout* topLayout = new QVBoxLayout;
    topLayout->addWidget(LE_Password);
    topLayout->addLayout(hLayout);

    passwordDialog->setLayout(topLayout);

    connect(PB_Show, SIGNAL(clicked()), this, SLOT(showClicked()));
    connect(PB_Cancel, SIGNAL(clicked()), this, SLOT(closeClicked()));
    passwordDialog->exec();
    qDebug()<<"LCore:createEnterPasswordUI::3:: Ends";
}

void LCore::closeClicked()
{
    passwordDialog->close();
    delete passwordDialog;
    passwordDialog = NULL;
}

// cppcheck-suppress unusedFunction
void LCore::showClicked()
{
    invokeTerminalFromLineEdit(widget , LE_Password->text());
}

void LCore::invokeTerminalFromLineEdit(QWidget* w, QString password)
{
    qDebug()<<"LCore:invokeTerminalFromLineEdit::3:: Starts";
    QString strKey;

    int nTimeCnt;
    QString strosBuild,strCmp,strPassword,strpwd;
    QStringList strlistosBuildparameter;

    if(password == "terminal")
    {
        QString strMac = getMac().remove(":");
        if(strMac.isEmpty())
        {
            strMac =  getMacForWifi().remove(":");
        }
        strKey = getRandomString(strMac, 12, true);

        if(LE_Password != NULL)
            LE_Password->clear();
        QMessageBox::information(w, tr("Code For OTP Generation"), tr("Code For OTP Generation : \"%1\"").arg(strKey));
        return;
    }

    if(password.contains("OS"))
    {
        QString strCnt = password.section("OS", -1);
        nTimeCnt = strCnt.toInt();
        password.chop(strCnt.length());
        qDebug() << "strTimeCnt " << nTimeCnt;

        QStringList strosBuildList;
        QString strImpactOSBuild = readBuildFiles(QString("/proc/cmdline"));
        qDebug()<<"strImpactOSBuild:"<<strImpactOSBuild;
        if(strImpactOSBuild.contains("impact",Qt::CaseInsensitive))
        {
            strImpactOSBuild = readBuildFiles(QString(IMPACTOSBUILD));
            strosBuildList << strImpactOSBuild;
        }
        else
            strosBuildList = readAndWriteFile(QString("/data/.osbuild"), QString("READ"));


        if(!strosBuildList.isEmpty())
            strosBuild = strosBuildList.at(0);
        strlistosBuildparameter= strosBuild.split("-");
        QString strbuildNo;
        if(strlistosBuildparameter.count() >= 6)
            strbuildNo=strlistosBuildparameter.at(5);

        strPassword=password;
        qDebug()<<"build no :" <<strbuildNo;
        strpwd="Gio6@Sukshm"+strbuildNo+"#OS";
    }
    else
    {
        QString md5sum = getMd5Sum(password.toLatin1());

        qDebug() << "md5sum ***D*"<<md5sum;
        qDebug() << "md5sum ***CONFIGPWD*"<<CONFIGPWD;
        if(md5sum == QString(TERMINALPWD) || md5sum == QString(CONFIGPWD))
        {
            if(LE_Password !=NULL)
                LE_Password->clear();
            QProcess::startDetached(TERMINALCMD, QStringList() << QString::number(999));
            closeClicked();
            return;
        }
    }

    QString md5sum = getMd5Sum(strKey.toLatin1());
    strCmp = getRandomString(md5sum, 15, false);

    if(!password.isEmpty() && !strCmp.isEmpty())
    {
        if(password == strCmp)
        {
            if(LE_Password != NULL)
                LE_Password->clear();
            QProcess::startDetached(TERMINALCMD, QStringList() << QString::number(999));
            strKey.clear();
            strCmp.clear();
        }
    }

    if(!strPassword.isEmpty() && !strpwd.isEmpty())
    {
        if(strPassword == QString(strpwd) && nTimeCnt) // Terminal
        {
            if(LE_Password != NULL)
                LE_Password->clear();
            QProcess::startDetached(TERMINALCMD, QStringList() << QString::number(nTimeCnt));
            strCmp.clear();
        }
    }
    closeClicked();
    qDebug()<<"LCore:invokeTerminalFromLineEdit::3:: End";
}

QString LCore::getRandomString(QString strKey, int nLength, bool bEncrypt)
{
    qDebug()<<"LCore:getRandomString::3:: Starts";
    if(bEncrypt)
        qsrand(QTime::currentTime().msec());
    else
        qsrand(22091986);

    const QString possibleCharacters(strKey);
    const int randomStringLength = nLength;
    QString randomString;

    for(int i = 0; i < randomStringLength; ++i)
    {
        int index = qrand() % possibleCharacters.length();
        QChar nextChar = possibleCharacters.at(index);
        randomString.append(nextChar);
    }
    qDebug()<<"LCore:getRandomString::3:: End   _returns " << randomString;
    return randomString;
}

QString LCore::base64BitEncodeAndDecode(const QString& strCondition, const QString& strString)
{
    QString strResult;

    if(strString.isEmpty())
        return strResult;

    if(strCondition == QString("ENCODE"))
    {
        strResult = strString.toLatin1().toBase64().toBase64();
    }
    else
    {
        strResult = QByteArray::fromBase64(QByteArray::fromBase64(strString.toLatin1()));
    }
    return strResult;
}

// cppcheck-suppress unusedFunction
void LCore::writeGenericSettingsFiles(const QString& strRegistrationCode, const QString& strFullScreenMode)
{
    qDebug() << "LCore:writeGenericSettingsFiles::3:: Start";

    if(!isTableExists("AWS"))
        return;

    QDir dir1(QString(AMAZONEWORKSPACE));
    qDebug() << "\n AMAZONEWORKSPACE" << QString(AMAZONEWORKSPACE);
    if(!dir1.exists())
    {
        qDebug() << dir1.mkpath(QString(AMAZONEWORKSPACE));
    }

    QFile regFile(QString(REGISTRATIONCODEFILE));
    if (!regFile.open(QIODevice::WriteOnly | QIODevice::Text))
        return;
    else
    {
        QTextStream out(&regFile);
        out << "[\n";
        out << "{\n";
        out << "\"RegistrationCode\"\: \""+strRegistrationCode+"\",\n";
        out << "}\n";
        out << "]\n";
        regFile.close();
    }

    QFile usrSettingsFile(QString(USERSETTINGSFILE));
    if (!usrSettingsFile.open(QIODevice::WriteOnly | QIODevice::Text))
        return;
    else
    {
        QTextStream out(&usrSettingsFile);
        out << "{\n";
        out << "    \"CurrentRegistration\"\: {\n";
        out << "     \"RegistrationCode\"\: \""+strRegistrationCode+"\"\,\n";
        out << "     \"CustomDescription\"\: null\,\n";
        out << "     \"OrgName\"\: \"d\-926715935a\"\,\n";
        out << "     \"RememberMeSetting\"\: \{\n";
        out << "        \"AdminSetting\"\: true\,\n";
        out << "        \"LocalSetting\"\: false\n";
        out << "     \}\,\n";
        out << "     \"LogLevelSetting\"\: \{\n";
        out << "        \"AdminSetting\"\: true\,\n";
        out << "        \"LocalSetting\"\: 2\n";
        out << "     \}\n";
        out << "    \}\,\n";
        out << "    \"SaveRegistrationList\"\: true\,\n";
        out << "    \"UpdateURL\"\: \"\"\,\n";
        out << "    \"MADCookie\"\: \"\"\,\n";
        out << "    \"FullScreenMode\"\: "+QString(strFullScreenMode)+"\,\n";
        out << "    \"FullScreenSingleMonitor\"\: false\,\n";
        out << "    \"Locale\"\: \"en\-US\"\,\n";
        out << "    \"Proxy\"\: \{\n";
        out << "     \"UseProxy\"\: false\,\n";
        out << "     \"ProxyAddress\"\: \"127.0.0.1\"\,\n";
        out << "     \"ProxyPort\"\: \"8080\"\n";
        out << "    }\n";
        out << "\}\n";
        usrSettingsFile.close();

    }

    qDebug() << "LCore:writeGenericSettingsFiles::3:: End";
}

QString LCore::readBuildFiles(QString strFileName)
{
    qDebug()<<"LCore:readBuildFiles::3:: Starts";
    qDebug()<<"LCore:readBuildFiles::3:: Argument passed: "<< strFileName ;
    QString build = "";
    if(QFile::exists(strFileName))
    {
        QFile file(strFileName);
        if (file.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&file);
            QString line = in.readLine().simplified();
            build = line;
        }
    }
    qDebug()<<"LCore:readBuildFiles::3:: Returning value: "<< build;
    qDebug()<<"LCore:readBuildFiles::3:: Ends";
    return build;
}
int LCore::generateUniqueId()
{
    int nHigh = 99999999;
    int nLow = 1;
    QTime time = QTime::currentTime();
    qsrand((uint)time.msec());
    return qrand() % ((nHigh + 1) - nLow) + nLow;
}

// cppcheck-suppress unusedFunction
int LCore::writeLogsInDataBase(int nUniqueId, QMap<QString, QString> mapValue)
{
    qDebug() << "LCore::writeLogsInDataBase : " << nUniqueId << mapValue;
    if(nUniqueId == 0)
        nUniqueId = generateUniqueId();

    QString strUniqueId = QString::number(nUniqueId);
    QString strType = mapValue.value("Type");
    QString strLoggedinUserName = mapValue.value("LoggedinUserName");
    QString strApplication = mapValue.value("Application");
    QString strConnectionName = mapValue.value("ConnectionName");
    QString strAuthentication = mapValue.value("Authentication");
    QString strAction = mapValue.value("Action");
    QString strStatus = mapValue.value("Status");

    QLocalSocket *client_socket = new QLocalSocket;
    client_socket->abort();
    client_socket->connectToServer(LOGGERSERVER);
    if(client_socket->waitForConnected())
    {
        QByteArray block;
        block.clear();
        QDataStream out(&block, QIODevice::WriteOnly);
        out.setVersion(QDataStream::Qt_4_8);
        out << strUniqueId;
        out << strType;
        out << strLoggedinUserName;
        out << strApplication;
        out << strConnectionName;
        out << strAuthentication;
        out << strAction;
        out << strStatus;
        client_socket->write(block);
        client_socket->flush();
    }

    qDebug() << "LCore::writeLogsInDataBase : END";
    delete client_socket;
    return nUniqueId;
}

// cppcheck-suppress unusedFunction
QString LCore::getHostnameForImpact()
{
    QString strSerialNumber, strHostName;;
    bool bFound = false;

    QProcess proc;
    proc.start(QString("hwinfo"), QStringList() << "--bios");
    proc.waitForFinished(-1);
    QString line;
    while ( !proc.atEnd() )
    {
        line = proc.readLine().trimmed();
        if(line.startsWith("System Info:"))
        {
            bFound = true;
        }

        if(line.contains("Serial:") && bFound)
        {
            strSerialNumber = line.section(":", -1, -1).trimmed();
            bFound = false;
            qDebug()<<"LCore:getHostnameForImpact::3:: SerialNumber: "<<strSerialNumber;
            break;
        }
    }
    Q_UNUSED(bFound);

    if(!strSerialNumber.isEmpty())
    {
        strHostName = QString("ITL");
        strHostName.append(strSerialNumber.trimmed().remove("\""));
    }
    qDebug()<<"LCore:getHostnameForImpact::3:: strHostName: "<< strHostName;

    return strHostName;
}

// cppcheck-suppress unusedFunction
void LCore::DisconnectAllConnectionFromImprivata(bool bForceLogout)
{
    qDebug() << "LCore:DisconnectAllConnectionFromImprivata::3:: start ";
    bool bImprivata = false;

    QString checkImprivata = readImprivataGlobalTable("Imprivata");
    QStringList strlstImprivata = readTable("SysConf", "Property='PromptLogin'", "Value");
    QStringList ImprivataCheck = readTable("SysConf","Property='Imprivata'", "Value");
    QStringList strImpriLoggedInStatus = readTable("Imprivata", "Property='Status'", "Value"); ///below condition is added because in case of admin mode if we change mode in Authentication to any other mode and after that if we set Imprivata and apply then also "bImprivata" Variable get true -- prajakta

    if(!checkImprivata.isEmpty() && checkImprivata == "Active" && strlstImprivata.count() && strlstImprivata.first() == "Imprivata" && ImprivataCheck.count() && ImprivataCheck.at(0) == "Enable" && (strImpriLoggedInStatus.count() && strImpriLoggedInStatus.at(0) == "loggedin"))
    {
        bImprivata = true;
    }
    writeLogsOnDefaultValue("LCore::DisconnectAllConnectionFromImprivata::bImprivata = ", QString::number(bImprivata));

    if(bImprivata) ///condition for two connection launching simultaneously after disconnecting all the icons from desktop should get remove
    {
        QList <QStringList> lstConnectioData = readCompleteTable("ConnectionTable","");

        for(int i = 0; i < lstConnectioData.count(); i++)
        {
            if(lstConnectioData[i][4] == "1")
            {
                LaunchPNAgentAppsOnDesktop(lstConnectioData[i][1].trimmed(), 0);
                LaunchPNAgentAppsOnMenu(lstConnectioData[i][1].trimmed(), 0);
                ModifyStartup( "xalf -s LaunchCommand \""+lstConnectioData[i][1].trimmed()+"\" "+lstConnectioData[i][0].trimmed()+"", 0, 0);
                ModifyStartMenu(lstConnectioData[i][1].trimmed(), "xalf -s LaunchCommand \""+lstConnectioData[i][1].trimmed()+"\" "+lstConnectioData[i][0].trimmed()+"", 0);
                QString filename = QString(PNAGENT_LIST_DIR) + "pna." + QString(lstConnectioData[i][1].trimmed());
                QFile::remove(filename);
                deleteEntry(lstConnectioData[i][0].trimmed(), "Name='"+lstConnectioData[i][1].trimmed()+"'" );
                deleteEntry("ConnectionTable", "ConnectionName='"+lstConnectioData[i][1].trimmed()+"'" );
            }
        }

        SendSignalToTC("refreshAll", "", "");
        writeLogsOnDefaultValue( "LCore::DisconnectAllConnectionFromImprivata::/tmp/.impriLogOut file Exist Stataus = ", QString::number(QFile::exists(QString(LOGOUTIMPRIVATA))));

        if(bForceLogout == true && QFile::exists(QString(LOGOUTIMPRIVATA)) == false)
        {
            writeLogsOnDefaultValue( "LCore::DisconnectAllConnectionFromImprivata::OSDesktop forlogout called", "OS_Desktop --forcelogout");
            QProcess::startDetached("OS_Desktop --forcelogout");
        }

        //                QStringList strconnPID = readTable("ConnectionTable", "ConnectionType='PNAgent' AND status='Active'", "PID,ConnectionName");
        //                if(strconnPID.count() )
        //                {
        //                    for(int i = 0; i < strconnPID.count(); i++)
        //                    {
        //                        qDebug() << "\n prajakta 5555555555: " << strconnPID.at(i+1);
        //                        QString filename = QString(PNAGENT_LIST_DIR) + "pna." + QString(strconnPID.at(i+1));
        //                        QFile file(filename);

        //                        SendSignalToTC(QString("ChangeStatus"), strconnPID.at(i+1), "PNAgent");

        //                        QFile LogFile("/data/Connection-log");
        //                        if (LogFile.open(QIODevice::Append | QIODevice::Text))
        //                        {
        //                            QTextStream out(&LogFile);
        //                            out <<QDateTime::currentDateTime().toString("ddMMyyyy-hh:mm:ss")<< "\t";
        //                            out << strconnPID.at(i+1) << "\t";
        //                            out << ConnectionType << "\t";
        //                            out << "Disconnected" << "\n";

        //                            LogFile.close();
        //                        }
        //                        QStringList conValues2;
        //                        conValues2 << "Status=''" << "PID=''";
        //                        updateTable("ConnectionTable", conValues2 , "ConnectionType='"+ConnectionType+"' AND ConnectionName='"+strconnPID.at(i+1)+"'");

        //                        LaunchPNAgentAppsOnDesktop(strconnPID.at(i+1), 0);
        //                        LaunchPNAgentAppsOnMenu(strconnPID.at(i+1), 0);

        //                        if(file.exists())
        //                            file.remove();

        //                        QStringList strlistPID = strconnPID.at(i).split(',', QString::SkipEmptyParts);
        //                        for(int j = 0; j < strlistPID.count(); j++)
        //                            killpid(strlistPID.at(j));
        //                        if(QFile::exists(QString(LOGOUTIMPRIVATA)) == false)
        //                        {
        //                            QProcess::startDetached("OS_Desktop --forcelogout");
        //                        }

        //                    }
        //                }

        qDebug() << "LCore:DisconnectAllConnectionFromImprivata::3:: End ";
    }
}

// cppcheck-suppress unusedFunction
void LCore::cleanUpLogs(QMap<QString, QString> mapValue)
{
    qDebug() << "LCore:cleanUpLogs()::3::Start" << mapValue;
    QString txt;
    txt = QString(" %2:: %1").arg("CleanUp Started").arg(QDateTime::currentDateTime().toString("MMM dd hh:mm:ss yyyy"));

    QFile outFile(QString(CLEANUPLOGSFILE));
    if(outFile.open(QIODevice::WriteOnly | QIODevice::Append))
    {
        QTextStream out(&outFile);
        out << txt .simplified()<<endl;

        QMap<QString, QString>::iterator i;
        out << QString("Free\ Space\ Before\ Cleanup") << " : " << mapValue.value("SizeBeforeCleanup") << endl;
        for (i = mapValue.begin(); i != mapValue.end(); ++i)
        {
            if(!i.key().contains("Select all") && i.key() != QString("SizeBeforeCleanup") && i.key() != QString("SizeAfterCleanup"))
                out << i.key() << " : " << i.value() << endl;
        }
        out << QString("Free\ Space\ After\ Cleanup") << " : " << mapValue.value("SizeAfterCleanup") << endl<<endl;
        outFile.close();
    }
}

// cppcheck-suppress unusedFunction
QString LCore::readLivepenKeyFileData(QString strData)
{
    QString strFileData = "";
    QStringList strResultList = readAndWriteFile(QString(LIVEPENKEYFILE), QString("READ"), QStringList() , strData);

    if(!strResultList.isEmpty() && strResultList.first().section("=", 0, 0) == strData.section("=", 0, 0))
    {
        strFileData = base64BitEncodeAndDecode(QString("DECODE"),  strResultList.at(0).section("=", 1));
    }
    return strFileData;
}

QString LCore::QProcessOutput(QString cmd)
{
    QString output;
    QProcess proc;
    proc.start(cmd);
    proc.waitForFinished(-1);
    output = proc.readLine().data();

    qDebug() << "LCore:cleanUpLogs()::3::End";
    return output;
}

// cppcheck-suppress unusedFunction
QString LCore::formatSize(qint64 num)
{
    qDebug() << "LCore:formatSize()::3::Start";
    QString total;
    const qint64 kb = 1024;
    const qint64 mb = 1024 * kb;
    const qint64 gb = 1024 * mb;
    const qint64 tb = 1024 * gb;

    if (num >= tb) total = QString("%1TB").arg(QString::number(qreal(num) / tb, 'f', 2));
    else if(num >= gb) total = QString("%1GB").arg(QString::number(qreal(num) / gb, 'f', 2));
    else if(num >= mb) total = QString("%1MB").arg(QString::number(qreal(num) / mb, 'f', 1));
    else if(num >= kb) total = QString("%1KB").arg(QString::number(qreal(num) / kb,'f', 1));
    else total = QString("%1 bytes").arg(num);

    qDebug() << "LCore:formatSize()::3::Return value = "<< total;
    qDebug() << "LCore:formatSize()::3::End";
    return total;
}

QString LCore::checkClientisCloudDesktop()
{
    qDebug() << "LCore::checkClientisCloudDesktop::3:: Start";
    QString strBuild = "CD";

    if(!readGrubFile(QString("cloud")) && (!QFile::exists(QString(NOCHECKCODEFILE))))
    {

        QString cmdLenovo = "/bin/sh -c \"/usr/sbin/dmidecode | grep -i vendor: | awk '{printf $2}'";
        QString cmdOS = "/bin/sh -c \"/usr/sbin/dmidecode | grep -i 'manufacturer' | head -n1";
        QString cmdImpact = "cat /proc/cmdline";
        QProcess cmd;
        QString stroutput;

        int strLenovoStatus= system(cmdLenovo.toLatin1());
        int strOSStatus= system(cmdLenovo.toLatin1());
        int strImpactStatus= system(cmdLenovo.toLatin1());

        if(strLenovoStatus == 0)
        {
            cmd.start(cmdLenovo);
            cmd.waitForFinished(-1);
            stroutput.clear();
            stroutput=cmd.readAll();
        }
        else if(strOSStatus== 0)
        {
            cmd.start(cmdOS);
            cmd.waitForFinished(-1);
            stroutput.clear();
            stroutput=cmd.readAll();
        }
        else if(strImpactStatus == 0)
        {
            cmd.start(cmdImpact);
            cmd.waitForFinished(-1);
            stroutput.clear();
            stroutput=cmd.readAll();
        }

        if(stroutput.contains("impact"))
        {

            bool bImpact= IsImpactClient();

            if(bImpact == true)
                strBuild = "Not CD";
            else
                strBuild = "CD";

        }
        else if(stroutput.contains("LENOVO"))
        {
            qDebug() << "checkClientisCloudDesktop::1:: Lenovo Board";
            cmdLenovo.clear();
            cmdLenovo = "/bin/sh -c \"dmidecode | grep -E 'Product' | head -1 | cut -d ':' -f2 | sed 's/*//g'";
//            QString op = QProcessOutput(cmdLenovo);
//            QString str = op.trimmed().left(4);
            QProcess proc;
            proc.start(cmdLenovo);
            proc.waitForFinished(-1);
            stroutput.clear();

            if(checkForLenovoValidBoards())
                strBuild = "Not CD";
            else
                strBuild = "CD";
        }
        else if(stroutput.contains("OS"))
        {
            qDebug() << "checkClientisCloudDesktop::1:: OLD Board";
            cmdOS.clear();
            cmdOS = "ifconfig eth0";
            QProcess proc;
            proc.start(cmdOS);
            proc.waitForFinished(-1);
            stroutput.clear();
            stroutput=proc.readAll();

            if(stroutput.contains("00:60:72"))
                strBuild = "Not CD";
            else
                strBuild = "CD";
        }
        else
            strBuild = "CD";
        qDebug() << "LCore::checkClientisCloudDesktop::3:: Start";

    }

    qDebug() << "LCore::checkClientisCloudDesktop::1:: CD or Not CD -> " << strBuild;

    qDebug() << "LCore::checkClientisCloudDesktop::3:: End";
    return strBuild;
}

bool LCore::IsImpactClient()
{
    QString cmdImpact = "cat /proc/cmdline";

    bool bIsImpactClient = false;

    if(QProcessOutput(cmdImpact).contains("impact"))
    {
        QFile hwdetailsFile(QString("/tmp/.hwdetails"));
        if(hwdetailsFile.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            QTextStream in(&hwdetailsFile);
            while(!in.atEnd())
            {
                QString line = in.readLine();
                if(line.contains("Impact Technologies"))
                {
                    bIsImpactClient =  true;
                    break;
                }
            }
            hwdetailsFile.close();
        }

    }
    return bIsImpactClient;
}

// cppcheck-suppress unusedFunction
void LCore::writeAppliDisConfigFile(QMap<QString, QString> mapValue, const QString& connectionName)
{
    qDebug() << "LCore:writeAppliDisConfigFile()::3::Start";
    //QString configFile = APPLIDISCONFIGFILE;
    QString tmpConfigFile("/tmp/"+connectionName+".xml");

    QFile tmpFile(tmpConfigFile);

    if(!tmpFile.open(QIODevice::WriteOnly | QIODevice::Text ))
        return ;

    QTextStream out(&tmpFile);

    if(!mapValue.isEmpty())
    {
        out << "<?xml version=\"1.0\""<<" "<<"encoding=\"UTF-8\"?> \n";
        out << "<Config>" <<"\n";

        out << "<Applidis>"<<"\n";
        out <<  QString("<urlSRV>")+mapValue.value("urlSRV")+QString("</urlSRV>") << "\n";
        out <<  QString("<portSRV>")+mapValue.value("portSRV")+QString("</portSRV>")<< "\n";
        out <<  QString("<Domain>")+mapValue.value("Domain")+QString("</Domain>")<< "\n";
        out <<  QString("<pathSRV>")+mapValue.value("pathSRV")+QString("</pathSRV>")<< "\n";
        out <<  QString("<timeout>")+mapValue.value("timeout")+QString("</timeout>")<< "\n";
        out <<  QString("<verbose>")+mapValue.value("verbose")+QString("</verbose>")<< "\n";
        out <<  QString("<cnectType>")+mapValue.value("cnectType")+QString("</cnectType>")<< "\n";
        out <<  QString("<lockType>")+mapValue.value("lockType")+QString("</lockType>")<< "\n";
        out <<  QString("<HideServer>")+mapValue.value("HideServer")+QString("</HideServer>")<< "\n";
        out <<  QString("<HideServiceType>")+mapValue.value("HideServiceType")+QString("</HideServiceType>")<< "\n";
        out <<  QString("<HideFilter>")+mapValue.value("HideFilter")+QString("</HideFilter>")<< "\n";
        out <<  QString("<hideCloseWdwCkBox>")+mapValue.value("hideCloseWdwCkBox")+QString("</hideCloseWdwCkBox>")<< "\n";
        out <<  QString("<closeWdwOnSessionEnd>")+mapValue.value("CloseWdwOnSessionEnd")+QString("</closeWdwOnSessionEnd>")<< "\n";
        out <<  QString("<AppFilter>")+mapValue.value("AppFilter")+QString("</AppFilter>")<< "\n";
        out <<  QString("<SSL>")+mapValue.value("SSL")+QString("</SSL>")<< "\n";
        out <<  QString("<pathCert>")+mapValue.value("pathCert")+QString("</pathCert>")<< "\n";
        out <<  QString("<forceInsecure>")+mapValue.value("forceInsecure")+QString("</forceInsecure>")<< "\n";
        out <<  QString("<purgeInfos>")+mapValue.value("purgeInfos")+QString("</purgeInfos>")<< "\n";
        out <<  QString("<lang>")+mapValue.value("lang")+QString("</lang>")<< "\n";
        out <<  QString("<passwordMode>")+"cmdline"+QString("</passwordMode>")<< "\n";
        if(mapValue.value("desktoptimeout") != QString("0"))
        {
            out <<  QString("<desktopTimeout>")+mapValue.value("desktoptimeout")+QString("</desktopTimeout>")<< "\n";
        }

        out <<  "</Applidis>"<<"\n";

        out <<  "<System>"<<"\n";
        out <<  QString("<pathPrgm>")+"/usr/local/bin/"+QString("</pathPrgm>")<< "\n";
        out <<  QString("<ParamFormat>")+"freerdp"+QString("</ParamFormat>")<< "\n";
        out <<  QString("<NamePrgm>")+"xfreerdp"+QString("</NamePrgm>")<< "\n";
        out <<  QString("<paramPrgm>")+mapValue.value("paramPrgm")+QString("</paramPrgm>")<< "\n";

        if(mapValue.contains("modeConsole"))
        {
            out <<  QString("<modeConsole>")+mapValue.value("modeConsole")+QString("</modeConsole>")<< "\n";
        }
        out <<  "</System>"<<"\n";
        out << "</Config>" <<"\n";
    }
    tmpFile.close();
    qDebug() << "LCore:writeAppliDisConfigFile()::3::End";
}

// cppcheck-suppress unusedFunction
QString LCore::getImpactNotebook()
{
    QString strImpactNotebook;

    strImpactNotebook = getManufracturerDetalis(QString("Manufacturer")).trimmed();

    return strImpactNotebook;
}

// cppcheck-suppress unusedFunction
bool LCore::isImpactNotebook(QString strImpactNotebook)
{
    QStringList strListImpactNotebook;
    strListImpactNotebook << "Notebook" ;

    if(strListImpactNotebook.contains(strImpactNotebook))
        return true;
    else
        return false;
}

QPair<QString, QString> LCore::getHighestResolution(int nDisplay)
{
    qDebug() << "LCore:getHighestResolution::3:: start nDisplay :" << nDisplay;
    QStringList strListResolutionList = getResolutionList(QString::number(nDisplay));
    QPair <QString ,QString > HigherResRatePair;

    QStringList strResolutionList;
    QStringList strRefreshrateList;
    for(int i = 0; i < strListResolutionList.size(); i++)
    {
        strResolutionList.append(strListResolutionList.at(i).section(' ', 0, 0).simplified());
        strRefreshrateList.append(strListResolutionList.at(i).section(' ', -1, -1).remove("*").remove("+"));
    }
    QStringList sortedResolutionList = ShortingResolution(strResolutionList);

    HigherResRatePair.first = sortedResolutionList.at(0);
    HigherResRatePair.second = strRefreshrateList.at(0);

    return HigherResRatePair;
}

// cppcheck-suppress unusedFunction
void LCore::editFileForTouchpad(EditFileForTouchPadFlag editFileForTouchPadFlag)
{
    qDebug() << "ExecuteStartup:editFileForTouchpad::3:: Start .";
    for(int i=0; i<3; i++)
    {
        QString strFileName;
        QString strFileNameOLD;
        QString strCheck;

        switch(i)
        {
        case 0:
            strCheck = "05-serverlayout.conf";
            strFileName = QString(SERVERLAYOUT_CONF05);
            strFileNameOLD = QString(SERVERLAYOUT_CONFOLD05);
            break;
        case 1:
            strCheck = "10-evdev.conf";
            strFileName = QString(EVDEV_CONF10);
            strFileNameOLD = QString(EVDEV_CONFOLD10);
            break;
        case 2:
            strCheck = "25-keyboard.conf";
            strFileName = QString(KEYBOARD_CONF25);
            strFileNameOLD = QString(KEYBOARD_CONFOLD25);
        }

        QFile file(strFileName);
        QFile fileOld(strFileNameOLD);
        if(file.open(QIODevice::ReadOnly | QIODevice::Text))
        {
            if(fileOld.open(QIODevice::WriteOnly | QIODevice::Text))
            {
                QTextStream out(&fileOld);
                QTextStream in(&file);
                bool bStartFlag = false;
                while (!in.atEnd())
                {
                    QString line = in.readLine();
                    QString strNewLine = line;

                    if(strCheck == "05-serverlayout.conf")
                    {
                        if(line.contains("AutoAddDevices"))
                        {
                            if(editFileForTouchPadFlag == Change)
                            {
                                strNewLine.replace("False","True");
                            }
                            else
                            {
                                strNewLine.replace("True","False");
                            }

                        }
                    }
                    else if(strCheck == "10-evdev.conf")
                    {
                        if(line.contains("MatchIsKeyboard"))
                            bStartFlag = true;

                        if(strNewLine.contains("Driver") && bStartFlag)
                        {
                            if(editFileForTouchPadFlag == Change)
                            {
                                strNewLine.replace("kbd", "evdev"); //checked
                            }
                            else
                            {
                                strNewLine.replace("evdev", "kbd"); //checked
                            }
                            bStartFlag = false;
                        }
                    }
                    else if(strCheck == "25-keyboard.conf")
                    {
                        if(strNewLine.length())
                        {
                            if(editFileForTouchPadFlag == Change)
                            {
                                if(!strNewLine.startsWith('#'))
                                    strNewLine.prepend("#");
                            }
                            else
                            {
                                if(strNewLine.startsWith('#'))
                                    strNewLine.replace("#"," ");
                            }
                        }
                    }
                    out << strNewLine << "\n";
                }
            }
            file.close();
            fileOld.close();
            sync();
        }
        QFile::remove(strFileName);
        QFile::copy(strFileNameOLD, strFileName);
        sync();
        QFile::remove(strFileNameOLD);
    }
    qDebug() << "ExecuteStartup:editFileForTouchpad::3:: End .";
}

// cppcheck-suppress unusedFunction
bool LCore::isImprivataLogout(bool bLogout)
{
    qDebug() << "LCore:bImprivataLogout::3:: Start";

    bool bNoLogout = false;
    QStringList strAddtoDesktop = readTable("PNAgent", "", "AppsOnDesktop");
    QString strImprivataGlobal = readImprivataGlobalTable("LaunchSelfServiceAfterLogin");

    QDir dir(NEWHOMEPATH(strConnectionLaunchPath)+".ICAClient/cache/");
    dir.setFilter(QDir::Files | QDir::NoDotAndDotDot);
    QStringList strlist = dir.entryList();
    qDebug() << "LCore:bImprivataLogout::3:: list."<<strlist;

    for(int i = 0 ; i < strlist.count(); i++)
    {
        if(strlist.at(i).contains(".ICA"))
        {
            qDebug() << "LCore:bImprivataLogout::3:: bNoLogout list at i"<<strlist.at(i);
            bNoLogout = true;
            break;
        }
    }

    if((strAddtoDesktop.count() && strAddtoDesktop.at(0) == "1") && strImprivataGlobal == "0" && bNoLogout == true )
    {
        bLogout = false;
    }

    qDebug() << "LCore:bImprivataLogout::3:: End";
    return bLogout;
}

void LCore::DisableIWConfigPowerManagenentOption(const QString& strWifiDeviceName)
{
    QString strOSBuild;
    strOSBuild = readBuildFiles(QString("/proc/cmdline"));
    if(strOSBuild.contains("impact", Qt::CaseInsensitive))
    {
        QProcess *process = new QProcess();
        process->start(QString(IWCONFIGCMD));
        process->waitForFinished(-1);
        QString strOutput = process->readAll();
        QStringList listOutput = strOutput.split('\n', QString::SkipEmptyParts);

        foreach(const QString& strOutputPower, listOutput)
        {
            if(strOutputPower.contains("Power Management") == true)
            {
                QString strOutputPowerN = strOutput.section(":", 1, -1);
                if(strOutputPowerN.contains("on"))
                {
                    QProcess procPower;
                    procPower.start("iwconfig "+strWifiDeviceName+" power off");
                    procPower.waitForFinished(-1);
                    sync();
                }
            }
        }
        delete process;
    }
}
